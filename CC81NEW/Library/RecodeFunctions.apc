
  { categories for level of education }
  function LevEduc( attend, edlevel )
    numeric z;
    recode   attend ::    edlevel -> z;
           missing  ::            -> missing;
          notappl,2 ::            -> 0;  { no education }
                    :: notappl,6,0-> 0;{ No education, informal}
                    ::      1:2   -> edlevel;{ Primary - secondary}
                    ::      3:4   -> 3; { university }
                    ::        5   -> 1; { vocational = primary equivalent  !! check this!!! }
                    ::            -> 9; { missing }
    endrecode;
    LevEduc = z;
  end;

  { reoding level of education to CS variable !!! }
  function KE_LevEduc( attend, edlevel );
    numeric z;
    recode   attend :: edlevel -> z;
           missing  ::         -> missing;
          notappl,2 ::         -> 0;  { no education }
               8    ::         -> 8;  { don't know }
                    ::         -> edlevel;
    endrecode;
    KE_LevEduc = z;
  end;

  { grade of eductation }
  function GraEduc( edlevel, edgrade )
    numeric z;
    if edlevel in 0,8,notappl,missing then
      z = notappl
    else
      z = edgrade;
    endif;
    GraEduc = z;
  end;
  { education in single years }
  function SingEduc( edlevel, edgrade, zprm, zsec )
    numeric z;
    recode edlevel :: edgrade -> z;
           notappl ::         -> notappl;
                   :: missing -> missing;
           missing ::         -> missing;
                   ::    98   -> 98;
                 8 ::         -> 98;
                   ::    97   -> 97;
                 0 ::         -> 0;     { Preschool and no education counted as 0 years }
                 1 ::         -> edgrade;
                 2 ::         -> edgrade+zprm;
                 3 ::         -> edgrade+zprm+zsec;
    endrecode;
    SingEduc = z;
  end;

  { education attainment }
  function AttnEduc( edlevel, edgrade, raw_v, edage )
    numeric x;
    recode edlevel ::edgrade :: raw_v  :: edage  -> x;
        notappl ::        ::        ::        -> notappl;
        missing ::        ::        ::        -> missing;
              8 ::        ::        ::        -> 8;
              0 ::        ::        ::        -> 0;    { Preschool and no education counted as 0 years }
              1 ::        ::   5    ::        -> 3;    { person attending to vocational completed primary }
              1 ::   8    ::   1    ::        -> 2;    { !! 8 = years of primary school if less than 53 years old !! }
              1 ::   7    ::   1    :: 53:95  -> 2;    { !! 7 = years of primary school if 53+ years of age !! }
              1 ::        ::   1    ::        -> 1;
              2 :: 4:6    ::        ::        -> 4;    { !! 4-6 = years of secondary school !! }
              2 ::        ::        ::        -> 3;
              3 ::        ::        ::        -> 5;
    endrecode;
    AttnEduc = x;
  end;

  { Recodes Yes/No variables code 1/2 to 1/0 }
  function YesNo( ynvar );
    if ynvar = 2 then
      ynvar = 0
    endif;
    YesNo = ynvar
  end

  { Recodes NA to zero }
  function NAtoZero( ynvar );
    if ynvar = notappl then
      ynvar = 0
    endif;
    NAtoZero = ynvar
  end

  { Recodes 3 to zero }
  function Fr3toZro( ynvar );
    if ynvar = 3 then
      ynvar = 0;
    endif;
    Fr3toZro = ynvar;
  end;

  { Recodes 3 to 8 }
  function fr3to8( ynvar );
    if ynvar = 3 then
      ynvar = 8;
    endif;
    fr3to8   = ynvar;
  end;

  { to properly handle missings for the combination of variables with units and two digit numbers }
  function unitnumb( yunits, ynumbers );
    numeric z;
    if ynumbers = missing then
      z = yunits * 100 + 99
    else
      z = yunits * 100 + ynumbers
    endif;
    unitnumb = z;
  end

  { Converts alphanumeric variables to 1/0/8/missing one at a time }
  function alfa2num( vara, string varb, string varc );
    numeric z;
    { VARA = filter question }
    { VARB = the variable itself }
    { VARC = the character to search in the variable }
    { Example::
                          VARA  <--------- VARB-------->  <------- VARC --------->
        V785A = alfa2num( A1042,  alpha variable itself     The character to search );
    }
    if vara = missing | pos("?", varb) then
      z = missing;
    elseif vara = 8 then
      z = 8;
    elseif vara = 1 then
      z = ( poschar(varc, varb) > 0 );
    else
      z = 0;
    endif;
    alfa2num = z;
  end;

  { Converts alphanumeric variables to 1/0/missing one at a time    }
  { This function differs from the previous one in that code 8 (DK) }
  { or alpha code "Z" is converted to zero instead of 8             }
  function alfaDKnum( vara, string varb, string varc );
    numeric z;
    { VARA = filter question }
    { VARB = the variable itself }
    { VARC = the character to search in the variable }
    { Example::
                          VARA  <--------- VARB-------->  <------- VARC --------->
        V785A = alfaDKnum( A1042,  alpha variable itself     The character to search );
    }
    if vara = missing | pos("?", varb) then
      z = missing;
    elseif vara = 8 | pos("Z",varb) then
      z = 0;
    elseif vara = 1 then
      z = ( poschar(varc, varb) > 0 );
    else
      z = 0;
    endif;
    alfaDKnum = z;
  end;

  { calculates the number of days since january 1, 1900 up to the date given in the parameters }
  { the function assumes that the day (zday) within month (zmonth) is consistent               }
  function CDCode( zyear, zmonth, zday )
    numeric z, zz, zdays1 = 0, zdays2 =0, leapday, totdays = 99999;
    if !zyear in 1900:2170 | !zmonth in 1:12 | !zday in 1:31 then
      errmsg( "Invalid date to calculate CDC Year=%04d, Month=%02d, day=%02d", zyear, zmonth, zday );
    else
      { number of days between 1900 and zyear }
      do z = 1900 while z < zyear
        zdays1 = zdays1 + 365 + (z % 4 = 0);
      enddo;
      { number of days up to the month in year zyear }
      leapday = (zyear % 4 = 0);
      do z = 1 while z < zmonth
        recode z          -> zz;
             1,3,5,7,8,10 -> 31;
                        2 -> 28+leapday;
                 4,6,9,11 -> 30;
        endrecode;
        zdays2 = zdays2 + zz;
      enddo;
      { total days }
      totdays = zdays1 + zdays2 + zday;
    endif;
    CDCode = totdays;
  end

  { determines the combination of persons involved in activities with child }
  function ChActivity( string zactivity )
    numeric z, za, zb, zx, zy;
        za = ( pos("A", ZACTIVITY) > 0 ); 
        zb = ( pos("B", ZACTIVITY) > 0 ); 
        zx = ( pos("X", ZACTIVITY) > 0 ); 
        zy = ( pos("Y", ZACTIVITY) > 0 ); 
        recode  za :: zb :: zx :: zy -> z;
                   ::    ::    ::  1 -> 0;     { no one }
                 1 ::  1 ::  1 ::    -> 4;     { mother, father and other }
                 1 ::  1 ::    ::    -> 5;     { mother and father }
                 1 ::    ::  1 ::    -> 6;     { mother and other }
                   ::  1 ::  1 ::    -> 7;     { father and other }
                 1 ::    ::    ::    -> 1;     { mother alone }
                   ::  1 ::    ::    -> 2;     { father alone }
                   ::    ::  1 ::    -> 3;     { other alone }
                   ::    ::    ::    -> missing;  
    endrecode;
    ChActivity = z;
  end   
  
  function group_occ (wocc);
    // !!! function to recode occupation categories to grouped categories
    numeric wgrp;
    recode  wocc  -> wgrp;
             0    ->  0;       { Not currently working or not since 12 months ago }
       110:294    ->  1;       { Professional/technical/managerial                         }
       296:317    ->  1;       { Professional/technical/managerial                         }
   319,321:395    ->  1;       { Professional/technical/managerial                         }
       398:399    ->  1;       { Professional/technical/managerial                         }
       411:423    ->  2;       { Clerical                                                  }
   295,318,396,397->  7;       { Services                                                  }
   511,521:524    ->  7;       { Services                                                  }
       541:543    ->  7;       { Services                                                  }
       532:533    ->  7;       { Services                                                  }
   512            ->  3;       { Sales                                                     }
   612:613,631    ->  4;       { Agricultural - self employed                              }
  611,621,641,651 ->  5;       { Agricultural - employee                                   }
          921     ->  5;       { Agricultural - employee                                   }
  531,913         ->  6;       { Household and domestic                                    }
  711:899         ->  8;       { Skilled manual                                            }
  911:912         ->  9;       { Unskilled manual                                          }
  914:920,922:934 ->  9;       { Unskilled manual                                          }
     996,  99998  -> 98;           { Don't know                                                }
          notappl -> notappl;
          missing -> missing;
                  -> default;  { !! - Add in country specific recoding }
    endrecode;
    group_occ = wgrp;
  end;
  { domestic violence variables when using ever and in the last year }
  function DVRecode(x1, x2);
    recode x1 -> numeric dvval;  
            1 -> x2;
            2 -> 0;
              -> x1;
    endrecode;
    if x1 = 1 & x2 in notappl,missing then dvval = 4 endif;
        DVRecode = dvval;  
  end;
