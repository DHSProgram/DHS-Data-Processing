PROC GLOBAL
  { DHS-8 HH & women Recode master application  version - 1.0.0 of 07/01/2021 }
  { Country = COUNTRY }

  numeric i, j, k, x, y, l, v, a, n;
  numeric vmother, vmarked, xprm, xsec, psecs, hsecs, vsecs, temp, xsex;
  numeric calbegy, acallen, vcallen, maxcols, calint, methoth;
  numeric xunit, number, b7i;
  numeric missex, misliv;
  numeric xtemp, ytemp, altit, adjalt, adjsmk;
  numeric itn, netpers, kidsnet, kids, tx, untx, treated, llinet;
  numeric births3, births35, pregs3, knows, evuse, cuse, imax, obiuse;
  numeric yngst, idx, idxb, idxlastb, ounces, pounds, bwt, found;
  numeric lastsex, pregnant, amenor, xusing, whenwant, fail, infert, lper, infert2;
  numeric sexst, nsexp, xmm9, xmm12, xmm16, xcont;
  numeric cutoff, amenor24, lper3, infec, infec1, infec3, infec4, xdv16, agedays, agemnth;
  numeric read1, read2, read3, systolic, diastolic;
  numeric DaysMonth = 30.4375, WeeksMonth = 0.23;

  string  currmeth;
  string  acalstrs;
  string  vcalstrs;
  string  vcalmeth;
  string  vcaldisc;
  string  vcalsorc;
  array calwork(9,2);
  array calrow(30);
  array nets(50,20); { array to allow household members to sleep in up to 20 bednets }
  array idxbirths(30);

  { for the malaria module, finds a net available for a person }
  function findnet( person, net )
    do k = 1 while k <= 7 & nets(person, k) <> 0     { !!! adjust according to maximum number of occurrences in RECHML }
    enddo;
    nets(person, k) = net;
  end;

  { defines if a vaccine was given and how it was reported }
  function vrec( vacdy, vacmh, vacyr, vacgvn, vacrep, vacnum );
    { mother reported, but has card }
    if vacdy = vmother then
      x = 2
    { card marked }
    elseif vacdy = vmarked then
      x = 3
    { date given }
    elseif vacyr in calbegy:9998 then
      x = 1;
    { Mother reports at least x vaccinations }
    elseif vacrep in 0:7 & vacrep >= vacnum | vacrep in 8,missing & vacnum = 1 then
      x = 2
    elseif vacgvn in 8,missing then
      x = vacgvn
    elseif vacrep in 8,missing then
      x = vacrep
    { no vaccination }
    else
      x = 0
    endif;
    vrec = x;
  end;

  { to recode water source.  The function needs to be adjusted based on the categories }
  { used by the country but they have to be classified within the major categories     }
  function WaterSrce( yvar );
    recode yvar -> xtemp;
            11  -> 11;       { piped into dwelling }
            12  -> 12;       { piped to yard/plot }
            13  -> 13;       { piped to neighbor }
            14  -> 14;       { public tap/standpipe }
            21  -> 21;       { tube well or borehole }
            31  -> 31;       { protected well }
            32  -> 32;       { unprotected well }
            41  -> 41;       { protected spring }
            42  -> 42;       { unprotected spring }
            51  -> 51;       { rainwater }
            61  -> 61;       { tanker truck }
            71  -> 62;       { cart with small tank }
            81  -> 43;       { surface water (river/dam/lake/pond/stream/canal, etc }
            91  -> 71;       { bottled water }
                -> yvar;     { other, missing }
    endrecode;
    WaterSrce = xtemp;
  end;

  { function to result of measuring - height/weight }
  function ResultHW( xwgt, xhgt )
    recode xwgt  ::  xhgt  -> x;
          0:4000 :: 0:2200 -> 0;         { measured }
            9994 ::   9994 -> 3;         { not present }
            9995 ::   9995 -> 4;         { refused     }
            9996 ::   9996 -> 6;         { other }
         missing ::        -> missing;   { missing }
                 :: missing-> missing;   { missing }
                 ::        -> 6;         { any other combination }
    endrecode;
    ResultHW = x;
  end

  { Read consent statement for biomarkers }
  function ReadConsent( adult, parent, respon )
    recode adult  ::  parent :: respon  -> x;
             1    ::         ::         -> 1;         { adult granted }
             2    ::         ::         -> 3;         { adult/respondent refused }
             3    ::         ::         -> 4;         { adult not present }
          missing ::         ::         -> missing;
                  ::    1    ::    1    -> 1;         { granted, for 15-17 years old never in union }
                  ::    2    ::         -> 2;         { parent/other adult refused }
                  ::    3    ::         -> 4;         { adult not present }
                  ::         ::    2    -> 3;         { minor/respondent refused }
                  ::         ::    3    -> 5;         { minor not present }
                  :: missing ::         -> missing;
                  ::         :: missing -> missing;
                  ::         ::         -> adult;
    endrecode;
    ReadConsent = x;
  end;

  { health expenditure cost ranges significantly based on survey currency }
  function RecCost( xcost )
    recode xcost -> numeric dvval;  
           99995 -> 999999995;          // !!! adjust code used for in-kind
           99998 -> 999999998;          // !!! adjust code used for don't know
                 -> xcost;
    endrecode;
	RecCost = xcost;  
  end;

  { domestic violence variables when using ever and in the last year }
  function DVRecode(x1, x2);
    recode x1 -> numeric dvval;  
            1 -> x2;
            2 -> 0;
              -> x1;
    endrecode;
    if x1 = 1 & x2 in notappl,missing then dvval = 4 endif;
	DVRecode = dvval;  
  end;

  // calculates adjustment to hemoglobin by altitude
  function AdjustAltitude( alt )
    numeric adjustment;   
    Adjustment = (0.0056384 * alt + 0.00000033588 * alt * alt) / 10;        // divided by 10 to convert to deciliters
    { no adjustment for altitude < 500 including negative altitude }
    if adjustment < 0 | alt < 0 | alt = missing then adjustment = 0 endif;
    AdjustAltitude = adjustment;
  end;	

  // calculates adjustment to hemoglobin by smoking
  function AdjustSmoking( cigaret )
    numeric adjustment; 
    if cigaret in 0,notappl then
      adjustment = 0;	
    elseif cigaret in 1:80 then		  
      if cigaret in 31:80 then cigaret = 30 endif;	
      adjustment = (0.4565*cigaret - 0.0078*cigaret*cigaret) / 10;        // divided by 10 to convert to deciliters 		
    else
      adjustment = 0.3;
    endif;
    AdjustSmoking = adjustment;	
  end;	

  // for the child-being module, determines if the child has the same parent
  function SameParent( nentries, line1, line2, parent )
    found = 0; 
    do j = 1 while j < nentries & !found 
      if parent = 1 then       // check for same mother	
        if line2 = notappl & AH13(line1) = AH13(AHCW05(j)) then
          found = j;
        elseif line2 = AHCW05(j) & AH13(line1) = AH13(line2) then
          found = j;
        endif;		
      else                     // check for same father	
        if line2 = notappl & AH15(line1) = AH15(AHCW05(j)) then
          found = j;
        elseif line2 = AHCW05(j) & AH15(line1) = AH15(line2) then
          found = j;
        endif;		
      endif;
    enddo;
	// errmsg("line1=%d line2=%d found=%d j=%d",line1,line2,found,j);
    SameParent = found;	
  end;

  // determine parents survival status for child well-being variables HCW105 and HCW106
  function survstat(alive, line);
    numeric livewith = (line in 1:AHMEMBER & AH05(line) = 1);    { mother/father in the household and de-jure }
	recode livewith :: alive -> numeric status;
	          1     ::       -> 1;
	                ::   1   -> 2;
					::   0   -> 0;
					::       -> 8;
    endrecode;
	survstat = status;
  end;
  

  { ----------------------------------------------------------------------------}
PROC CORE8_FF
preproc

  { Set the following variables to their correct codes }
  calbegy = 2015;       { !! Calendar cutoff - year }
  methoth = 14;         { !! Code for other method in quest. }
  xprm    = 6;          { !! Years for complete primary }
  xsec    = 6;          { !! Years for complete secondary }
  vmother = 66;         { Mother's reporting of vaccination }
  vmarked = 44;         { Vaccination marked on card }
  psecs   = 3;          { !! Three or five year for pregnancy and postnatal care section }
  vsecs   = 3;          { !! Three or five year vaccination section }
  hsecs   = 5;          { !! Three or five year for child health section }
  missex  = 0;          { to count number of siblings with missing sex }
  misliv  = 0;          { to count number of siblings with missing living status }
  { currmeth should should match position of contraceptive table in the questionnaire }
  { make sure that there is a one to one correspondence between the number of occurrence in the  }
  { contraceptive table and the methods included in A307.  If not the logic needs to be adapted }
  currmeth = "FCD~GABLMYE~KH~IXJ";           { methods in A307 that are present in contraception table }

{ ----------------------------------------------------------------------------}
  { The following variables are used in the processing of the calendar: }

  { ACALLEN and VCALLEN give the length of the calendar in the raw data and the length of the calendar in the recode }
  acallen  = 72;      {length(ACAL(1));} { Calendar length in raw data !! }
  vcallen  = 80;      { Calendar length - fixed - do not change }

  { ACALSTRS and VCALSTRS define the mapping of the calendar columns from the raw data to the recode }
  { ACALSTRS contains each of the codes in the raw data (as defined in the core questionnaire) }
  { the codes used in ACALSTRS are the ones that should be modified to the codes actually used in the country }
  { VCALSTRS defines the corresponding codes in the recode }
  { the codes used in vcalstrs are standard and should not be changed, except to add new country specific codes, }
  { typically in place of the codes Î±, Î², Î³.  Î±, Î² and Î³ should never appear in the recode data }
  { -- they are included here as place holders for country specific codes }
  { If additional codes for terminated pregnancies are included in the raw data, these should be added }
  { after the 3rd code in ACALSTRS, with the corresponding code being a T in VCALSTRS. }
  { Ensure that the substrings to be used in VCALMETH, VCALDISC and in CALWORK are modified correspondingly. }
  { Similarly, if additional codes are needed for contraceptive method, reason for discontinuation and source of method }
  { add these into ACALSTRS and VCALSTRS and ensure that corresponding changes are made to VCALMETH, VCALDISC and CALWORK. }
  { For source of contraception, codes 1-9,0 are reserved for public sources, }
  { codes A-J for private medical sources and codes K-O are reserved for other private sources in the recode file. }

           {  Columns and their codes !!                                                 }
           {  1---------------------->2----------------->3->5--------------------------> }
  acalstrs = "BPT0634~712LMY5~K8~9XJ? 1236~74N08FADX5~~Z?X0? 123456~~~~789ABC~~~~DEF~~X?";      { !! }
  vcalstrs = "BPT0123~56789WN~LC~EMS? 123456789CFADWM??K?X0? 1234567890ABCDEFGHIJKLMNOX?";      { replace ??? by new codes if necessary }

  vcalmeth = vcalstrs[5:19];          { !! Codes from VCALSTRS above that define contraceptive methods }
  vcaldisc = vcalstrs[25:19];         { !! Codes from VCALSTRS above that define reasons for discontinuation }
  vcalsorc = vcalstrs[48:27];         { !! Codes from VCALSTRS above that define sources of contraception }

  { The following data in CALWORK define 3 things for each recode column }
  { (x,0) column of the raw data used for column x of the recode }
  { (x,1) starting position in acalstrs and vcalstrs for codes for column x }
  { (x,2) number of characters from acalstrs and vcalstrs, starting from the position in (1) to use for column x }
  { Calendar columns, code string start, code string length !! }
  calwork(1,0) = 1;    calwork(1,1) = 1;    calwork(1,2) = 3;  { Pregnancies only - BCORE }
  {+ACORE}
  calwork(1,0) = 1;    calwork(1,1) = 1;    calwork(1,2) = 23; { Pregnancies and contraception }
  calwork(2,0) = 2;    calwork(2,1) = 24;   calwork(2,2) = 20; { Reason for discontinuation }
  calwork(3,0) = 0;    calwork(3,1) = 44;   calwork(3,2) = 3;  { Marriage }
  calwork(4,0) = 0;    calwork(4,1) = 0;    calwork(4,2) = 0;  { Residence - not used in DHSIV }
  calwork(5,0) = 0;    calwork(5,1) = 47;   calwork(5,2) = 28; { Source of contraception }
  calwork(6,0) = 0;    calwork(6,1) = 0;    calwork(6,2) = 0;  { Country specific }
  calwork(7,0) = 0;    calwork(7,1) = 0;    calwork(7,2) = 0;  { Country specific }
  calwork(8,0) = 0;    calwork(8,1) = 0;    calwork(8,2) = 0;  { Country specific }
  calwork(9,0) = 0;    calwork(9,1) = 0;    calwork(9,2) = 0;  { Country specific }
  maxcols = 2;    { !! increase if using country specific columns }
  {ACORE+}
  { to correctly establish the seed to impute date of last tetanus injection }
  seed( 101 );

postproc
  errmsg( 9998, "Mat. Mort. missing sex=", missex );
  errmsg( 9998, "Mat. Mort. missing survival status=", misliv );

{ ----------------------------------------------------------------------------}

PROC HOUSEHOLD

PROC AHSECOVER_EDT
  HV000 = "cc8";        { !! Country code + type of recode (not phase of DHS) }
  { cluster number }
  HV001 = AHCLUST;
  { household number }
  HV002 = AHNUMBER;
  { respondent's line number }
  HV003 = NAtoZero(AHRESP);
  { ultimate area unit }
  HV004 = AHCLUST;    { !! }
  { sample weight }
  HV005 = AHWEIGHT;
  if AHRESULT <> 1 then HV005 = 0 endif;
  { month of interview }
  HV006 = AHINTM;
  { year of interview }
  HV007 = AHINTY;
  { century month code of interview }
  HV008 = AHINTC;
  { century day code of interview }
  HV008A = CDCode( AHINTY, AHINTM, AHINTD );
  { number of household members }
  HV009 = NAtoZero(AHMEMBER);
  { number of eligible women in household }
  HV010 = count(AHSEC01_EDT where AH09 <> 0 & AH06 = 1);
  { number of eligible men in household }
  HV011 = count(AHSEC01_EDT where AH10 <> 0 & AH06 = 1);    { !! CS }
  { number of de jure members }
  HV012 = count(AHSEC01_EDT where AH05 = 1);
  { number of de facto members }
  HV013 = count(AHSEC01_EDT where AH06 = 1);
  { number of children 5 and under }
  HV014 = count(AHSEC01_EDT where AH05 = 1 & AH07 in 0:5 );
  { Result of household interview }
  HV015 = AHRESULT;
  { Day of interview }
  HV016 = AHINTD;
  { Number of visits }
  HV017 = AHVISITS;
  { Interviewer identification }
  HV018 = AHINTNUM;
  { Keyer identification }
  HV019 = notappl;
  { Ever-married sample }
  HV020 = 0;            { !! - code 1 for ever married samples }
  { Primary sampling unit }
  HV021 = AHCLUST;      { !! }
  { Sample strata for sampling errors }
  HV022 = AHSTRATA;     { !! obtain it from sampling specialist }
  { Stratification used in sampling design }
  recode AHTYPE :: AHREGION -> HV023;            { !! obtain it from sampling specialists }
           1    ::    1     -> 1;                { etc..., }
  endrecode;
  { Region }
  HV024 = AHREGION;     { !! this variable is not part of the core-VII but it is required }
  { Type of place of residence }
  HV025 = AHTYPE;       { !! this variable is not part of the core-VII but it is required }
  { Place of residence }
  HV026 = notappl;      { !! in case country has the old locality variable }
  { Selection for male/husb. int. }
  if AHELIGM <> notappl then
    HV027 = YesNo( AHELIGM );    { !! CS }
  else
    HV027 = 0;                   { !! if no male subsample included in the survey assign 0 to this variable }
  endif;
  { Sample weight for male subsamp }
  if AMWEIGHT <> notappl then
    HV028 = AMWEIGHT;            { !! CS }
  else
    HV028 = 0;                   { !! if no male subsample included in the survey assign 0 to this variable }
  endif;
  { Field supervisor }
  HV030 = AHSUPERV;
  { Field editor }
  HV031 = notappl;
  { Office editor }
  HV032 = notappl;
  { Number of eligible children for height & weight }
  HV035 = count( ABSEC01_EDT where (ABINTCD-ACCDC)/DaysMonth < 60 );
  { Cluster altitude in meters }
  HV040 = AHALTIT;     { !! Cluster altitude }
  { Total adults measured }
  HV041 = soccurs( ABSEC02 ) + soccurs( ABSEC03 );
  { Selection for hemoglobin }
  if AHELIHEM <> notappl then
    HV042 = YesNo( AHELIHEM );     { !! eligibility for hemoglobin !! CS }
  else
    HV042 = 0;                     { !! if hemoglobin not included in the survey assign 0 to this variable }
  endif;
  { Selection for domestic violence module }
  { !! selection for DV is normally the same as selection for male, if not adjust it }  
  {    set HV044 to 1 if all hoseholds eligible for DV                               }
  if AHELIGM <> notappl then
    HV044 = YesNo( AHELIGM );    
  else
    HV044 = 0;
  endif;	
  { Language of questionnaire }
  HV045A = AHLANGQ;
  { Language of interview }
  HV045B = AHLANGI;
  { Language of respondent }
  HV045C = AHLANGR;
  { Translator used }
  HV046 = YesNo( AHTRANS );
  { Team number }
  HV047 = AHTEAM;
  { Team supervisor }
  HV048 = notappl;                  { !! make sure to populate it if used }
  if HV015 = 1 then
    { time interview started }
    HV801 = AH100H * 100 + AH100M;
    if AH100H = missing | AH100H >= 97 | AH100M = missing | AH100M >= 97 then
      HV801 = missing
    endif;
    { time interview finalized }
    HV802 = AH156H * 100 + AH156M;
    if AH156H = missing | AH156H >= 97 | AH156M = missing | AH156M >= 97 then
      HV802 = missing
    endif;
    { duration of interview }
    if AHVISITS = 1 then
      if HV801 = missing | HV802 = missing then
        HV803 = missing
      else
        HV803 = (AH156H * 60 + AH156M) - (AH100H * 60 + AH100M);
        if HV803 > 95 then HV803 = 95 endif
      endif
    else
      HV803 = 96
    endif;
    if HV803 = default | HV803 < 0 then
      errmsg( 8030, HV803, AH100H, AH100M, AH156H, AH156M );
      HV803 = 97
    endif;
	{ !!! include here CS variables relevant to complete interviews }
  endif;
{ !! include here geographical and front page HH CS variables for all questionnaires }
{ ----------------------------------------------------------------------------}

PROC AHSEC01_EDT
  if HV015 = 1 then
    for i in AHSEC01_EDT do
      HVIDX(i) = i;
      { relationship to head of household }
      recode AH03 -> HV101(i);       { check coding -- adjust for co-spouse code !! }
             1:8  -> AH03;
               9  -> 10;             { other relative }
              10  -> 11;             { adopted/foster/stepchild }
              11  -> 12;             { not related }
                  -> AH03;
      endrecode;
      { usual resident }
      HV102(i) = YesNo( AH05 );
      { slept last night }
      HV103(i) = YesNo( AH06 );
      { Sex of household member }
      HV104(i) = AH04;
      { Age of household members }
      HV105(i) = AH07;         { !! Check 97, 98, 99 }
      { Highest educational level }
      HV106(i) = LevEduc( AH16, AH17A );
      { Highest year of education }
      HV107(i) = GraEduc( AH17A, AH17B );
      { Education in single years }
      HV108(i) = SingEduc( HV106(i), HV107(i), xprm, xsec );
      { Educational attainment }
      HV109(i) = AttnEduc( HV106(i), HV107(i) );
      { Member still in school }
      HV110(i) = notappl;         { !! member still in school }
      if HV105(i) in 0:17 then
         { Mother alive }
         HV111(i) = YesNo( AH12 );
         { Mother's line number }
         HV112(i) = NAtoZero( AH13 );
         { Father alive }
         HV113(i) = YesNo( AH14 );
         { Father's line number }
         HV114(i) = NAtoZero( AH15 );
      endif;
      { Current marital status }
      recode  AH08 -> HV115(i);     { !! check recoding for codes 2 & 5 }
                1  -> 1;
                2  -> 4;
                3  -> 3;
                4  -> 0;
                   -> AH08;
      endrecode;
      { Currently, formerly, never married }
      recode AH08  -> HV116(i);
               4   -> 0;
               1   -> 1;
              2:3  -> 2;
                   -> AH08;
      endrecode;
      { Eligibility for female interview }
      HV117(i) = ( AH09 <> 0 & AH06 = 1 );           { !! }
      { Eligibility for male interview }
      HV118(i) = ( AH10 <> 0 & AH06 = 1 );           { !! }
      { Children eligibility for height/weight and hemoglobin }
      HV120(i) = 0;       { Set to 0 here and changed in code for RECH6 }
      { Member attended school during current school year }
      HV121(i) = NAtoZero( YesNo(AH18) );
      if HV121(i) = 1 then HV121(i) = 2 endif;
      { Educational level during current school year }
      HV122(i) = LevEduc( AH18, AH19A );
      { Grade of education during current school year }
      HV123(i) = GraEduc( AH19A, AH19B );
      { Education in single years - current school year }
      HV124(i) = SingEduc( HV122(i), HV123(i), xprm, xsec );

      { *** following variables are not part of DHS-8, but may have been used in country
      { Member attended school during previous school year }
      HV125(i) = NAtoZero( YesNo(attended) );
      { Educational level during previous school year }
      HV126(i) = LevEduc( attend, levelatt );
      { Grade of education during previous school year }
      HV127(i) = GraEduc( levelatt, grade );
      { education in single years - previous school year }
      HV128(i) = SingEduc( HV126(i), HV127(i), xprm, xsec );

      { calculation for school attendance status }
      if HV105(i) in 5:24 then
        if HV106(i) in 0,8,missing then
          HV129(i) = HV106(i);
        else
          if HV121(i) = 0 & HV125(i) = 0 then
            HV129(i) = 5
          elseif HV121(i) in 8,missing then
            HV129(i) = HV121(i)
          elseif HV121(i) = 0 & HV125(i) = 1 then   { dropout }
            HV129(i) = 4
          elseif HV125(i) in 8,missing then
            HV129(i) = HV125(i)
          elseif HV125(i) = 0 then   { entered school }
            HV129(i) = 1
          elseif HV128(i) in 97:98,missing | HV124(i) in 97:98,missing then
            HV129(i) = missing
          elseif HV128(i) >= HV124(i) then
            HV129(i) = 3             { repeating }
          else
            HV129(i) = 2             { advanced }
          endif;
        endif;
      endif;
      **** }

      { child has a birth certificate }
      HV140(i)  = Fr3toZro( AH20 );

      { !! following variables correspond to "child wellbeing module" }
      // Year mother died 
      HCW101(i)  = AH12A;
      // Year father died 
      HCW102(i)  = AH14A;
      // Line number of primary caregiver 
      HCW103(i)  = AH15C;
      // Relationship to primary caregiver 
      HCW104(i)  = AH15D;
      // parents survival status
      if HV105(i) in 0:17 then
        // Residence/survival status of mother
        HCW105(i) = survstat(HV111(i),HV112(i));
        // Residence/survival status of father
        HCW106(i) = survstat(HV113(i),HV114(i));
        // Any usual resident child age 0-17 with mother or father alive and living elsewhere
	    HCW100(i) = (HV102(i) = 1 & HV105(i) in 0:17 & (HCW105(i) = 2 | HCW106(i) = 2));
	    // Check consistency of child eligibility
	    if count(AHCW05 = i) <=> HCW100(i) = 0 then
	      errmsg("Eligibility inconsistency %d: HCW100=%d HV102=%d HV105=%d HV115=%d HCW105=%d HCW106=%d count=%d",i,HCW100(i),HV102(i),HV105(i),HV115(i),HCW105(i),HCW106(i),count(AHCW05 = i));
	    endif;
	  endif;


      { !! following variables correspond to "health expenditure module" }
      // Last six months admitted overnight to a health facility	  
      HEX1(i)   = YesNo( AH21 );
      // Eligibility for inpatient module	  
      HEX2(i)   = ( AH22 <> notappl );
      // Last four weeks received care from health provider, pharmacy, traditional healer	  
      HEX3(i)   = YesNo( AH23 );	
      // Last time received care was money paid	  
      HEX4(i)   = YesNo( AH24 );
      // Eligibility for outpatient module	  
      HEX5(i)   = ( AH25 <> notappl ); 	  
	  
      { !! include household schedule country specific variables here }

      IDXH4(i) = i;
    enddo;
  endif;

  {  !!! disability module if present in survey }
  if HV015 = 1 then
    i = 0;  
    for j in AHSEC01_EDT do
	  if AH07 in 0:4 then next endif;
      i = i + 1;	  
      IDXDIS(i) = j;
      { difficulty seeing }
      HDIS1(i)  = YesNo( AH26 );
      if AH26 = 1 then
        HDIS2(i) = AH27
      else
        HDIS2(i) = AH28
      endif;
      { difficulty hearing }
      HDIS3(i)  = YesNo( AH29 );
      if AH29 = 1 then
        HDIS4(i) = AH30
      else
        HDIS4(i) = AH31
      endif;
      { difficulty communicating }
      HDIS5(i) = AH32;
      { difficulty remembering/concentrating }
      HDIS6(i) = AH33;
      { difficulty walking/climbing }
      HDIS7(i) = AH34;
      { difficulty with self-care washing/dressing }
      HDIS8(i) = AH35;
      { highest degree of difficulty for any }
      if HDIS2 (i) = 1 & HDIS4 (i) = 1 & HDIS5 (i) = 1 & HDIS6 (i) = 1 & HDIS7 (i) = 1 & HDIS8 (i) = 1 then  // no difficulty for all
        HDIS9(i) = 1;
      elseif 4 in HDIS2(i), HDIS4(i), HDIS5(i), HDIS6(i), HDIS7(i), HDIS8(i) then      // cannot do all in at least one of the activities
        HDIS9(i) = 4;
      elseif 3 in HDIS2(i), HDIS4(i), HDIS5(i), HDIS6(i), HDIS7(i), HDIS8(i) then      // a lot of difficulty in at least one of the activities
        HDIS9(i) = 3;
      elseif 2 in HDIS2(i), HDIS4(i), HDIS5(i), HDIS6(i), HDIS7(i), HDIS8(i) then      // some difficult in at least one of the activities
        HDIS9(i) = 2;
      elseif 8 in HDIS2(i), HDIS4(i), HDIS5(i), HDIS6(i), HDIS7(i), HDIS8(i) then      // at least on DK
        HDIS9(i) = 8;
      elseif HDIS1(i) <> notappl then                                                  // otherwise missings if apply based on age
        HDIS9(i) = missing
      endif;
    enddo;
  endif;

{ ----------------------------------------------------------------------------}

PROC AHSECA1_EDT
  { Accident and injury module - traffic }
  if HV015 = 1 then
    for i in $ do
      HAIIDX(i) = i;                          { index }           
      HAI1(i)   = 1;                          { accident type }
      HAI2(i)   = AHAI4;                      { vehicle involved in traffic accident }
      HAI3(i)   = notappl;                    { Type of accident for accidents other than traffic }
      HAI4(i)   = notappl;                    { How the accident happened for other than traffic }
      HAI5(i)   = YesNo(AHAI5);               { Household member still alive as a result of accident } 
      if AHAI5 = 2 then
        HAI6(i)   = AHAI6;                    { Sex of household member involved in accident }
        HAI7(i)   = AHAI7;                    { Age of household member at death }
        HAI8(i)   = YesNo(AHAI8);             { Death related to the accident }
        HAI9A(i)  = alfa2num(1, AHAI9, "A");       { cut/open wound }
        HAI9B(i)  = alfa2num(1, AHAI9, "B");       { broken bone }
        HAI9C(i)  = alfa2num(1, AHAI9, "C");       { burn }
        HAI9D(i)  = notappl;                       { poisoning doesn't exist for traffic accidents }
        HAI9E(i)  = alfa2num(1, AHAI9, "D");       { head injury }
        HAI9F(i)  = alfa2num(1, AHAI9, "E");       { internal injury }
        HAI9G(i)  = alfa2num(1, AHAI9, "F");       { suffocation }
        HAI9H(i)  = notappl;                       { CS }
        HAI9I(i)  = notappl;                       { CS }
        HAI9J(i)  = notappl;                       { CS }
        HAI9K(i)  = notappl;                       { CS }
        HAI9L(i)  = notappl;                       { CS }
        HAI9M(i)  = notappl;                       { CS }
        HAI9N(i)  = notappl;                       { CS }
        HAI9X(i)  = alfa2num(1, AHAI9, "X");       { other }
        HAI9Z(i)  = alfa2num(1, AHAI9, "Z");       { don't know }
        HAI10(i)  = notappl;                  { Household line number of member involved in accident }
        HAI11(i)  = notappl;                  { Current age of household member involved in accident }
        HAI12(i)  = notappl;                  { Household member continues to have health problems as a result of traffic accident }
        HAI13A(i) = notappl;                  { paralyzed }
        HAI13B(i) = notappl;                  { brain damage }
        HAI13C(i) = notappl;                  { disfigurement }
        HAI13D(i) = notappl;                  { loss of limb }
        HAI13E(i) = notappl;                  { loss of limb functioning }
        HAI13F(i) = notappl;                  { loss of eyesight }
        HAI13G(i) = notappl;                  { loss of hearing }
        HAI13H(i) = notappl;                  { chronic pain }
        HAI13I(i) = notappl;                  { emotional trauma }
        HAI13J(i) = notappl;                  { CS }
        HAI13K(i) = notappl;                  { CS }
        HAI13L(i) = notappl;                  { CS }
        HAI13M(i) = notappl;                  { CS }
        HAI13N(i) = notappl;                  { CS }
        HAI13O(i) = notappl;                  { CS }
        HAI13P(i) = notappl;                  { CS }
        HAI13X(i) = notappl;                  { other }
        HAI13Z(i) = notappl;                  { don't know }
      else
		if AHAI10 in 1:HV009 then
          HAI6(i)   = AH04(AHAI10)	          { Sex of household member involved in accident }
        else		  
          HAI6(i)   = AHAI11;                 { Sex of household member involved in accident }
        endif;		  
        HAI7(i)   = notappl;                  { Age of household member at death }
        HAI8(i)   = notappl;                  { Death related to the accident }
        HAI9A(i)  = alfa2num(1, AHAI13, "A");      { cut/open wound }
        HAI9B(i)  = alfa2num(1, AHAI13, "B");      { broken bone }
        HAI9C(i)  = alfa2num(1, AHAI13, "C");      { burn }
        HAI9D(i)  = notappl;                       { poisoning doesn't exist for traffic accidents }
        HAI9E(i)  = alfa2num(1, AHAI13, "D");      { head injury }
        HAI9F(i)  = alfa2num(1, AHAI13, "E");      { internal injury }
        HAI9G(i)  = alfa2num(1, AHAI13, "F");      { suffocation }
        HAI9H(i)  = notappl;                       { CS }
        HAI9I(i)  = notappl;                       { CS }
        HAI9J(i)  = notappl;                       { CS }
        HAI9K(i)  = notappl;                       { CS }
        HAI9L(i)  = notappl;                       { CS }
        HAI9M(i)  = notappl;                       { CS }
        HAI9N(i)  = notappl;                       { CS }
        HAI9X(i)  = alfa2num(1, AHAI13, "X");      { other }
        HAI9Z(i)  = alfa2num(1, AHAI13, "Z");      { don't know }
        HAI10(i)  = AHAI10;                        { Household line number of member involved in accident }
		if AHAI10 in 1:HV009 then
		  HAI11(i) = HV105(AHAI10)                 { Current age of household member involved in accident }
        else		  
          HAI11(i)  = AHAI12;                      { Current age of household member involved in accident }
        endif;		  
        HAI12(i)  = YesNo(AHAI14);            { Household member continues to have health problems as a result of traffic accident }
        HAI13A(i) = alfa2num(AHAI14, AHAI15, "A");   { paralyzed }
        HAI13B(i) = alfa2num(AHAI14, AHAI15, "B");   { brain damage }
        HAI13C(i) = alfa2num(AHAI14, AHAI15, "C");   { disfigurement }
        HAI13D(i) = alfa2num(AHAI14, AHAI15, "D");   { loss of limb }
        HAI13E(i) = alfa2num(AHAI14, AHAI15, "E");   { loss of limb functioning }
        HAI13F(i) = alfa2num(AHAI14, AHAI15, "F");   { loss of eyesight }
        HAI13G(i) = alfa2num(AHAI14, AHAI15, "G");   { loss of hearing }
        HAI13H(i) = alfa2num(AHAI14, AHAI15, "H");   { chronic pain }
        HAI13I(i) = alfa2num(AHAI14, AHAI15, "I");   { emotional trauma }
        HAI13J(i) = notappl;                         { CS }
        HAI13K(i) = notappl;                         { CS }
        HAI13L(i) = notappl;                         { CS }
        HAI13M(i) = notappl;                         { CS }
        HAI13N(i) = notappl;                         { CS }
        HAI13O(i) = notappl;                         { CS }
        HAI13P(i) = notappl;                         { CS }
        HAI13X(i) = alfa2num(AHAI14, AHAI15, "X");   { other }
        HAI13Z(i) = alfa2num(AHAI14, AHAI15, "Z");   { don't know }
      endif;	
    enddo;
  endif;	

{ ----------------------------------------------------------------------------}

PROC AHSECA2_EDT
  { Accident and injury module - different from traffic }
  if HV015 = 1 then
    n = soccurs(AHSECA1);
    for i in $ do
      j = n + i;
      HAIIDX(j) = j;                          { index }           
      HAI1(j)   = 2;                          { accident type }
      HAI2(j)   = notappl;                    { vehicle involved in traffic accident }
      HAI3(j)   = AHAI20;                     { Type of accident for accidents other than traffic }
      HAI4(j)   = AHAI21;                     { How the accident happened for other than traffic }
      HAI5(j)   = YesNo(AHAI22);              { Household member still alive as a result of accident } 
      if AHAI22 = 2 then
        HAI6(j)   = AHAI23;                   { Sex of household member involved in accident }
        HAI7(j)   = AHAI24;                   { Age of household member at death }
        HAI8(j)   = YesNo(AHAI25);            { Death related to the accident }
        HAI9A(j)  = alfa2num(1, AHAI26, "A");     { cut/open wound }
        HAI9B(j)  = alfa2num(1, AHAI26, "B");     { broken bone }
        HAI9C(j)  = alfa2num(1, AHAI26, "C");     { burn }
        HAI9D(j)  = alfa2num(1, AHAI26, "D");     { poisoning }
        HAI9E(j)  = alfa2num(1, AHAI26, "E");     { head injury }
        HAI9F(j)  = alfa2num(1, AHAI26, "F");     { internal injury }
        HAI9G(j)  = alfa2num(1, AHAI26, "G");     { suffocation }
        HAI9H(j)  = notappl;                      { CS }
        HAI9I(j)  = notappl;                      { CS }
        HAI9J(j)  = notappl;                      { CS }
        HAI9K(j)  = notappl;                      { CS }
        HAI9L(j)  = notappl;                      { CS }
        HAI9M(j)  = notappl;                      { CS }
        HAI9N(j)  = notappl;                      { CS }
        HAI9X(j)  = alfa2num(1, AHAI26, "X");     { other }
        HAI9Z(j)  = alfa2num(1, AHAI26, "Z");     { don't know }
        HAI10(j)  = notappl;                  { Household line number of member involved in accident }
        HAI11(j)  = notappl;                  { Current age of household member involved in accident }
        HAI12(j)  = notappl;                  { Household member continues to have health problems as a result of traffic accident }
        HAI13A(j) = notappl;                  { paralyzed }
        HAI13B(j) = notappl;                  { brain damage }
        HAI13C(j) = notappl;                  { disfigurement }
        HAI13D(j) = notappl;                  { loss of limb }
        HAI13E(j) = notappl;                  { loss of limb functioning }
        HAI13F(j) = notappl;                  { loss of eyesight }
        HAI13G(j) = notappl;                  { loss of hearing }
        HAI13H(j) = notappl;                  { chronic pain }
        HAI13I(j) = notappl;                  { emotional trauma }
        HAI13J(j) = notappl;                  { CS }
        HAI13K(j) = notappl;                  { CS }
        HAI13L(j) = notappl;                  { CS }
        HAI13M(j) = notappl;                  { CS }
        HAI13N(j) = notappl;                  { CS }
        HAI13O(j) = notappl;                  { CS }
        HAI13P(j) = notappl;                  { CS }
        HAI13X(j) = notappl;                  { other }
        HAI13Z(j) = notappl;                  { don't know }
      else
		if AHAI27 in 1:HV009 then
          HAI6(i)   = AH04(AHAI27)	          { Sex of household member involved in accident }
        else		  
          HAI6(j)   = AHAI28;                 { Sex of household member involved in accident }
        endif;		  
        HAI7(j)   = notappl;                  { Age of household member at death }
        HAI8(j)   = notappl;                  { Death related to the accident }
        HAI9A(j)  = alfa2num(1, AHAI30, "A");      { cut/open wound }
        HAI9B(j)  = alfa2num(1, AHAI30, "B");      { broken bone }
        HAI9C(j)  = alfa2num(1, AHAI30, "C");      { burn }
        HAI9D(j)  = alfa2num(1, AHAI30, "D");      { poisoning }
        HAI9E(j)  = alfa2num(1, AHAI30, "E");      { head injury }
        HAI9F(j)  = alfa2num(1, AHAI30, "F");      { internal injury }
        HAI9G(j)  = alfa2num(1, AHAI30, "G");      { suffocation }
        HAI9H(j)  = notappl;                       { CS }
        HAI9I(j)  = notappl;                       { CS }
        HAI9J(j)  = notappl;                       { CS }
        HAI9K(j)  = notappl;                       { CS }
        HAI9L(j)  = notappl;                       { CS }
        HAI9M(j)  = notappl;                       { CS }
        HAI9N(j)  = notappl;                       { CS }
        HAI9X(j)  = alfa2num(1, AHAI30, "X");      { other }
        HAI9Z(j)  = alfa2num(1, AHAI30, "Z");      { don't know }
        HAI10(j)  = AHAI27;                   { Household line number of member involved in accident }
        if AHAI27 in 1:HV009 then		
          HAI11(j)  = HV105(AHAI27);           { Current age of household member involved in accident }
        else		  
          HAI11(j)  = AHAI29;                 { Current age of household member involved in accident }
        endif;		  
        HAI12(j)  = YesNo(AHAI31);            { Household member continues to have health problems as a result of traffic accident }
        HAI13A(j) = alfa2num(AHAI31, AHAI32, "A");   { paralyzed }
        HAI13B(j) = alfa2num(AHAI31, AHAI32, "B");   { brain damage }
        HAI13C(j) = alfa2num(AHAI31, AHAI32, "C");   { disfigurement }
        HAI13D(j) = alfa2num(AHAI31, AHAI32, "D");   { loss of limb }
        HAI13E(j) = alfa2num(AHAI31, AHAI32, "E");   { loss of limb functioning }
        HAI13F(j) = alfa2num(AHAI31, AHAI32, "F");   { loss of eyesight }
        HAI13G(j) = alfa2num(AHAI31, AHAI32, "G");   { loss of hearing }
        HAI13H(j) = alfa2num(AHAI31, AHAI32, "H");   { chronic pain }
        HAI13I(j) = alfa2num(AHAI31, AHAI32, "I");   { emotional trauma }
        HAI13J(j) = notappl;                         { CS }
        HAI13K(j) = notappl;                         { CS }
        HAI13L(j) = notappl;                         { CS }
        HAI13M(j) = notappl;                         { CS }
        HAI13N(j) = notappl;                         { CS }
        HAI13O(j) = notappl;                         { CS }
        HAI13P(j) = notappl;                         { CS }
        HAI13X(j) = alfa2num(AHAI31, AHAI32, "X");   { other }
        HAI13Z(j) = alfa2num(AHAI31, AHAI32, "Z");   { don't know }
      endif;	
    enddo;
  endif;	

{ ----------------------------------------------------------------------------}

PROC AHSEC02_EDT
  if HV015 = 1 then
    { Source of drinking water }
    HV201 = WaterSrce( AH101 );          { !! check recoding in function and adjust accordingly }
    { Source of non-drinking water }
    HV202 = WaterSrce( AH102 );          { !! check recoding in function and adjust accordingly }
    { Water not available for at least one day last two weeks }
    HV201A = notappl;                    { not in DHS-8 }
    { Water for drinking not sufficient in the last month }
    HV201B = YesNo( AH106 );
    { Time to get to water source }
    HV204 = AH104;
    if AH104 = notappl then HV204 = 996 endif;  { source on premises }
    { Type of toilet facility }
    recode AH109 -> HV205;
           11:19 -> AH109;    { flush toilet }
           21:29 -> AH109;    { pit latrine }
             31  -> 41;       { composting }
             41  -> 42;       { bucket }
             51  -> 43;       { hanging }
             61  -> 31;       { no facility/bush/field }
                 -> AH109;
    endrecode;
    {  Household has the following }
    HV206 = YesNo( AH132A ); { electricity }
    HV207 = YesNo( AH132B ); { radio }
    HV208 = YesNo( AH132C ); { television }
    HV209 = YesNo( AH132F ); { refrigerator }
    HV210 = YesNo( AH133C ); { bicycle }
    HV211 = YesNo( AH133D ); { motorcycle/scooter }
    HV212 = YesNo( AH133F ); { car/truck }
    { Main floor material }
    HV213 = AH152;
    { Main wall material }
    HV214 = AH154;
    { Main roof material }
    HV215 = AH153;
    { Rooms used for sleeping }
    HV216 = AH127;

    xsex  = default;
    { Relationship structure }
    HV217 = default;
    { Line number of head of household }
    HV218 = default;
    { Sex of head of household }
    HV219 = default;
    { Age of head of household }
    HV220 = default;
    do i = 1 while i <= soccurs(RECH1)
      if HV101(i) = 1 & HV218 = default then
         HV218 = i;    { head of household }
      endif;
      if HV105(i) in 15:98,missing & HV102(i) = 1 then
         if (HV101(i) in 11:12,98,missing) then
            HV217 = 5;     { Unrelated member }
         else
            recode HV217 -> HV217;
                 default -> 1;
                       1 -> 2;
                     2,3 -> 4;
                       4 -> 4;
                       5 -> 5;
            endrecode;
            if HV217 = 1 then
               xsex = HV104(i);
            elseif HV217 = 2 & HV104(i) = xsex then
               HV217 = 3
            endif
         endif
      endif;
    enddo;
    if HV217 = default then
      errmsg( 0020 );
      HV217 = 0                   { No adults }
    endif;
    if HV218 = default then
      errmsg( 0010 );
      HV218 = 1
    elseif HV218 <> 1 then
      errmsg( 1510, HV218 )
    endif;
    { Sex of head of household }
    HV219 = HV104(HV218);
    { Age of head of household }
    HV220 = HV105(HV218);
    { Has telephone }
    HV221 = YesNo( AH132D );
	{ Type of cookstove }
	HV222 = AH117;
	{ Type of cooking fuel }
	HV223 = AH120;
    { Share toilet with other households }
    HV225 = YesNo( AH110 );
    { Type of cooking fuel }
    recode AH117 :: AH120 -> HV226;
	      1:5,95 ::       -> AH117;  
		         ::   96  -> 96;
                 ::       -> AH120+5;
    endrecode;				 
    { Have bednet for sleeping }
    HV227 = YesNo( AH137 );
    { Children under 5 slept under bednet last night }
    { variable HV228 will be created in the MALARIA module if used }
    HV228 = notappl;

    { place where household members wash their hands }
    HV230A = AH149;
    { presence of water at hand washing place }
    HV230B = YesNo( AH150 );
    { presence of cleansing agents }
    if AH149 in 1,2 then
      HV232  = alfa2num( 1, AH151, "A" );     { soap/detergent }
      HV232B = alfa2num( 1, AH151, "B" );     { ash, mud, sand }
      HV232C = notappl;                       { !! CS }
      HV232D = notappl;                       { !! CS }
      HV232E = notappl;                       { !! CS }
      HV232Y = alfa2num( 1, AH151, "Y" );     { none }
    endif;
    { result of test for iodine PPM, not in DHS-8 }
    HV234 = notappl;
    { result of test for iodine }
    recode AH155 -> HV234A;
	         2   -> 0;
			     -> AH155;
    endrecode;				 

    { Location of source for water }
    HV235 = AH103;
    { Line of household member fetching water }
    HV236A = AH105;

    { Anything done to water to make safe to drink }
    HV237 = YesNo( AH107 );
    { water treatment }
    HV237A = alfa2num( AH107, AH108, "A" );     { boil }
    HV237B = alfa2num( AH107, AH108, "B" );     { add bleach/chlorine }
    HV237C = alfa2num( AH107, AH108, "C" );     { strain to cloth }
    HV237D = alfa2num( AH107, AH108, "D" );     { use water filter }
    HV237E = alfa2num( AH107, AH108, "E" );     { solar disinfection }
    HV237F = alfa2num( AH107, AH108, "F" );     { let it stand and settle }
    HV237G = notappl;                           { !! CS }
    HV237H = notappl;                           { !! CS }
    HV237I = notappl;                           { !! CS }
    HV237J = notappl;                           { !! CS }
    HV237K = notappl;                           { !! CS }
    HV237X = alfa2num( AH107, AH108, "X" );     { other }
    HV237Z = alfa2num( AH107, AH108, "Z" );     { don't know }

    { Number of households sharing toilet }
    HV238  = AH111;
    { Location of toilet facility }
    HV238A = AH112;
    { Food cooked on stove or open fire, not in DHS-8 }
    HV239 = notappl;
    { Stove has a chimney }
    HV240 = YesNo( AH118 );
    { Food cooked in the house / in separate building / outdoors }
    HV241 = AH121;
    { Household has separate room used as kitchen }
    HV242 = YesNo( AH122 );
    { does household have or does any member of household own any of the following }
    HV243A = YesNo( AH133B ); { mobile phone }
    HV243B = YesNo( AH133A ); { watch }
    HV243C = YesNo( AH133E ); { animal drawn cart }
    HV243D = YesNo( AH133G ); { boat with a motor }
    HV243E = YesNo( AH132E ); { computer }

    { Own land usable for agriculture }
    HV244  = YesNo( AH130 );
    { Hectares for agricultural land }
    HV245  = AH131 * 10;

    { Livestock, herds or farm animals }
    HV246   = YesNo( AH128 );
    HV246A  = NAToZero( AH129B ); { Cattle }
    HV246B  = NAToZero( AH129A ); { cows, bulls }
    HV246C  = NAToZero( AH129C ); { horses, donkeys, mules }
    HV246D  = NAToZero( AH129D ); { goats }
    HV246E  = NAToZero( AH129E ); { sheep }
    HV246F  = NAToZero( AH129F ); { chicken }
    HV246G  = notappl;            { !! CS }
    HV246H  = notappl;            { !! CS }
    HV246I  = notappl;            { !! CS }
    HV246J  = notappl;            { !! CS }
    HV246K  = notappl;            { !! CS }

    { Owns a bank account }
    HV247   = YesNo( AH134 );

    { Frequency household members smoke inside the house }
    HV252   = AH136;
    if AH136 = 5 then HV252 = 0 endif;

    { Has dwelling been sprayed against mosquitoes in last 12 months }
    HV253  = notappl;
    { who sprayed dwelling }
    HV253A = notappl;       { government worker/program }
    HV253B = notappl;       { private company }
    HV253C = notappl;       { Nongovernmental organization (NGO) }
    HV253D = notappl;       { !! CS }
    HV253E = notappl;       { !! CS }
    HV253F = notappl;       { !! CS }
    HV253G = notappl;       { !! CS }
    HV253H = notappl;       { !! CS }
    HV253X = notappl;       { other }
    HV253Z = notappl;       { don't know }
	
    { Septic tank has been emptied }
    HV255   = YesNo( AH114 );
    { Septic tank emptied by a service provider }
    HV256   = YesNo( AH115 );
    { Where septic tanked emptied to }
    HV257   = AH116;
    { Heat source for home }
    HV259   = AH123;
    { Heat at home has a chimney }
    HV260   = YesNo( AH124 );
    { Type of fuel for home heat }
    HV261   = AH125;
	if AH123 = 95 then HV261 = 95 endif;
    { Type of light at home }
    HV262   = AH126;
    { Mobile phone used financial transactions }
    HV263   = YesNo( AH135 );

    { wealth index variables }
    HV270     = AHWLTHI;          { HH wealth index combined }
    HV271     = AHWLTHF;          { Wealth index factor score combined (5 decimals) }
    HV270A    = AHWLTIUR;         { HH wealth index for urban/rural }
    HV271A    = AHWLTFUR;         { Wealth index factor score for urban/rural (5 decimals) }

    { !! include household characteristics country specific variables here }

  endif;      { end of HV015 = 1 }

{ ----------------------------------------------------------------------------}

  { !!! {MALARIA} remove this section until the end if no malaria module }
  { household variables for the malaria module.  Variables in the household recode begin with HML }
  { RECH2  - Malaria household single variables }
  { RECHML - Malaria variables coming from the women, women's birth history or male questionnaires }
  { RECHMH - Malaria variables with information about nets used by household members}
  if HV015 = 1 then
    { Number of mosquito nets }
    HML1 = NAtoZero( AH138 );
    { intitalize nets array for the household }
    do i = 1 while i <= 50
      do j = 1 while j <= maxocc(AHSEC03)       
        nets(i,j) = 0;
      enddo;
    enddo;

    for i in AHSEC03_EDT do
      { Net number }
      HMLIDX(i) = i;
      { Net observed }
      HML3(i)   = YesNo( AH140 );
      { Months ago obtained mosquito net }
      HML4(i)   = AH141;
      if AH141 = 95 then HML4(i) = 96 endif;
      { Was net treated with insecticide when bought }
      HML5(i)   = notappl;      { not in DHS-8 }
      { !!! in DHS 8 only LLIN nets are defined but check if questionnaire allows
           to define the categories for HML6 otherwise leave HML as notappl         }
      HML6(i) = notappl;
      { Brand of bednet }
      HML7(i) = AH142;
      { Bednet treated since receiving - not in DHS-8 }
      HML8(i) = notappl;
      { Months ago re-treated - not in DHS-8 }
      HML9(i) = notappl;
      { Insecticide Treated Net (ITN), defined as:
        LLIN nets; Net obtained in mass campaign/ANC/Inmunization or obtained in a health facility }     
      itn = ( AH142 in 11:19 |  AH143 in 1:3 | AH144 in 1:2 );    { Cameron Taylor - 05/03/2019 - message in Outlook "Standard Applications" }
      { ITN net }
      HML10(i) = itn;
      netpers = 0;
      if AH146A in 1:AHMEMBER then
        { Person who slept in mosquito net }
        HMLA(i) = AH146A;
        netpers = netpers + 1;
        findnet( AH146A, i );       { keeps track of what net the person slept in }
      endif;
      if AH146B in 1:AHMEMBER then
        { Person who slept in mosquito net }
        HMLB(i) = AH146B;
        netpers = netpers + 1;
        findnet( AH146B, i );       { keeps track of what net the person slept in }
      endif;
      if AH146C in 1:AHMEMBER then
        { Person who slept in mosquito net }
        HMLC(i) = AH146C;
        netpers = netpers + 1;
        findnet( AH146C, i );       { keeps track of what net the person slept in }
      endif;
      if AH146D in 1:AHMEMBER then
        { Person who slept in mosquito net }
        HMLD(i) = AH146D;
        netpers = netpers + 1;
        findnet( AH146D, i );       { keeps track of what net the person slept in }
      endif;
      { *** if net allows to accommodate 5 people use variable HMLE
      if AH137E in 1:AHMEMBER then
        HMLE(i) = AH137E;
        netpers = netpers + 1;
        findnet( AH137E, i );       { keeps track of what net the person slept in }
      endif;
      **** }

      { Number of persons who slept under this net }
      HML11(i) = netpers;
      { Did someone sleep under bednet last night }
      HML21(i) = yesno( AH145 );

      { Obtained net through a campaign during ANC or immunization visit }
      HML22(i) = AH143;
      if AH143 = 4 then HML22(i) = 0 endif;
      { place where net was obtained }
      recode  AH144 -> HML23(i);
                1   -> 10;      { categories 11-19 for other govt facilities if any }
                2   -> 20;      { categories 21-29 for other private facilities if any }
                3   -> 31;      { pharmacy, categories 32-36 for other sources }
                4   -> 32;      { shop/market }
                5   -> 33;      { CHW }
                6   -> 34;      { religious institution }
                7   -> 35;      { school }
                    -> AH144;
      endrecode;
	  { Reason net was not used }
      HML24(i) = AH147;
    enddo;
    { Number of mosquito nets with specific information }
    HML1A = soccurs( RECHML );

    kidsnet = 0;
    kids = count( AHSEC01_EDT where AH06 = 1 & AH07 in 0:4 );
    if kids then
      do i = 1 while i <= soccurs( AHSEC01 )
        if AH06(i) = 1 & AH07(i) in 0:4 then     { kid under 5 slept in household }
          if nets(i,1) <> 0 then                 { kid slept under a net }
            kidsnet = kidsnet + 1;
          endif;
        endif;
      enddo;
      { Children under 5 slept under bednet last night }
      if HV227 <> 1 then   { variable HV228 constructed here }
        HV228 = 3;         { no bednet in HH }
      elseif kidsnet = 0 then
        HV228 = 0;         { no kids slept under bednets }
      elseif kidsnet = kids then
        HV228 = 1;         { all kids slept under bednets }
      elseif kidsnet < kids then
        HV228 = 2;         { some kids slept under bednets }
      else
        HV228 = missing;
      endif;
    endif;
    { Number of children under bednet previous night }
    HML2 = kidsnet;

    do i = 1 while i <= soccurs(AHSEC01)
      HMHIDX(i) = i;
      if nets(i,1) = 0 then
        { Type of net(s) person slept under last night }
        HML12(i) = 0;
        { Person sleep under an ever treated net }
        HML19(i) = 0;
        { Person sleep under an LLIN net }
        HML20(i) = 0;
      else
        { person sleep in an ITN net }
        tx   = 0;
        untx = 0;
        do j = 1 while j <= maxocc(AHSEC03) & nets(i,j) <> 0    
          if HML10( nets(i,j) ) = 1 then
            tx = 1
          elseif HML10( nets(i,j) ) = 0 then
            untx = 1
          endif;
        enddo;
        { Type of bednet(s) person slept under last night }
        recode tx :: untx -> HML12(i);
                1 ::   0  -> 1;      { only treated bednets }
                1 ::   1  -> 2;      { treated and untreated bednets }
                0 ::   1  -> 3;      { only untreated bednets }
        endrecode;
        { person sleep in an ever treated net }
        treated = 0;
        do j = 1 while j <= 7 & nets(i,j) <> 0 & !treated    { !!! adjust according to maximum number of occurrences in AHSEC03 }
          k = nets(i,j);
          if HML6(k) in 1:4 | HML5(k) = 1 | HML8(k) in 1:2 then
            treated = 1
          endif;
        enddo;
        HML19(i) = treated;
        { person sleep in an LLIN net }
        llinet = 0;
        do j = 1 while j <= 7 & nets(i,j) <> 0 & !llinet   { !!! adjust according to maximum number of occurrences in AHSEC03 }
          k = nets(i,j);
          if HML7(k) in 11:19 then                         { !!! adjust codes for LLIN nets }
            llinet = 1
          endif;
        enddo;
        HML20(i) = llinet;
      endif;
      { 1st net number for net person slept under last night }
      HML13(i) = nets(i,1);
      if nets(i,2) <> 0 then HML14(i) = nets(i,2) endif; { 2nd net number for net person slept under last night }
      if nets(i,3) <> 0 then HML15(i) = nets(i,3) endif; { 3rd net number for net person slept under last night }
      { Corrected age from individual questionnaire }
      HML16(i) = ML07I(i);
      { Flag for AH07 age from individual file }
      HML17(i) = ML07F(i);
      { Pregnancy from individual questionnaire }
      HML18(i) = MLPREG(i);

      { !!! code that follows is for malaria module for children, including
            parachecks(rapid tests) and smear slides results.  The loop needs to be repeated
            for the corresponding sections for women and men if they were also tested }
      for j in ABSEC01 do
        agemnth = int( (ABINTCD-ACCDC)/DaysMonth );          { age in months for children }
        if AB102 = AH01(i) & agemnth in 6:59 then
          HML16A(i) = agemnth;                { age in months for children }
          HML16(i)  = int( HML16A(i) / 12 );  { to make child's age in years consistent with age in months }
          HML30(i)  = AB118;                  { line number of parent/caretaker for malaria testing }
          recode AB120 -> HML31(i);           { read consent statement for malaria testing }
				   3   -> 4;
				       -> AB120;
          endrecode;
          { use malaria testlog to populate these variables
          if loadcase( TESTLOG_DCT, ABM112 ) then	
            recode LRESULT1 :: LRESULT2 :: LRESULT3 -> HML32(i); { final result of malaria from blood smear }
                      0     ::     0    :: notappl  -> 0; 			
                      1     ::     1    :: notappl  -> 1; 			
                            ::          ::          -> LRESULT3;
            endrecode;	
            string species;
            if lenght(strip(LSPECIE3)) then
              species = LSPECIE3;
            else			  
              species = LSPECIE1;
            endif;			  
            HML32A(i) = (pos("A",species) > 0);   { presence of species: falciparum (Pf) }
            HML32B(i) = (pos("C",species) > 0);   { presence of species: malariae (Pm) }
            HML32C(i) = (pos("D",species) > 0);   { presence of species: ovale (Po) }
            HML32D(i) = (pos("B",species) > 0);   { presence of species: vivax (Pv) }
            HML32E(i) = notappl;                  { presence of species: CS }
            HML32F(i) = notappl;                  { presence of species: CS }
            HML32G(i) = notappl;                  { presence of species: CS }
          else
            HML32(i) = missing;		  
		  endif;	
		  }
          recode ABM112 -> HML33(i);          { result of malaria measurement }
		        "99994" -> 3;  // not present
		        "99995" -> 4;  // refused
		        "99996" -> 6;  // other
				        -> 0;
          endrecode;						
          HML34(i)  = ABM112;                 { bar code for blood smear sample }
          recode ABM114 -> HML35(i);          { result of malaria paracheck test (rapid test) }
		           2    -> 0;  // negative
				   1    -> 1;  // positive
				   4    -> 3;  // not present
                   5    -> 4;  // refused
                        -> ABM114;
          endrecode; 						
          HML36(i)  = AB115;                  { Fieldworker measurer code for malaria }
		  HML37A(i) = YesNo(ABM115A);         { Suffer from illness/symptom: extreme weakness }
		  HML37B(i) = YesNo(ABM115B);         { Suffer from illness/symptom: heart problems }
		  HML37C(i) = YesNo(ABM115C);         { Suffer from illness/symptom: loss of consciousness }
		  HML37D(i) = YesNo(ABM115D);         { Suffer from illness/symptom: rapid or difficult breathing }
		  HML37E(i) = YesNo(ABM115E);         { Suffer from illness/symptom: seizures }
		  HML37F(i) = YesNo(ABM115F);         { Suffer from illness/symptom: abnormal bleeding }
		  HML37G(i) = YesNo(ABM115G);         { Suffer from illness/symptom: jaundice or yellow skin }
		  HML37H(i) = YesNo(ABM115H);         { Suffer from illness/symptom: dark urine }
		  HML37I(i) = notappl;                { Suffer from illness/symptom: CS }
		  HML37J(i) = notappl;                { Suffer from illness/symptom: CS }
		  HML37K(i) = notappl;                { Suffer from illness/symptom: CS }
		  HML37L(i) = notappl;                { Suffer from illness/symptom: CS }
		  HML37M(i) = notappl;                { Suffer from illness/symptom: CS }
          { Child taken or taking first line medicine given by health provider for malaria }
		  HML38(i)  = YesNo(ABM119);
          { Parent accept first line medicine to treat malaria }
		  HML39(i)  = YesNo(ABM122);
          { Fieldworker provided first line medicine for malaria }		  
		  HML40(i)  = ABM123;
        endif;
      enddo;
     { !!! }
    enddo;

    { !! include malaria country specific variables here }

  endif;              { end HV015 = 1 }
  { !!! {MALARIA}}
  
  { !!! Health expenditure module if present in survey }  
  if HV015 = 1 then
    { second for inpatient }
    for i in AHSECHE1_EDT do
      HEX20(i)  = AH203;               // Index to household schedule for inpatient member
      HEX21(i)  = AH204;	           // Place for most recent stay overnight for health care
      HEX22(i)  = AH205;	           // Main reason to seek care most recent time
      HEX23(i)  = YesNo( AH206 );	   // Had surgery during most recent overnight stay
      HEX24(i)  = RecCost( AH207 );	   // Cost of treatment in most recent overnight stay
      HEX25(i)  = YesNo( AH208 );	   // Last six months stayed another time in a health facility
      HEX26(i)  = AH209;	           // Place next-to-last time stayed overnight for health care
      HEX27(i)  = AH210;	           // Main reason to seek care next-to-last time
      HEX28(i)  = YesNo( AH211 );	   // Had surgery during next-to-last overnight stay
      HEX29(i)  = RecCost( AH212 );	   // Cost of treatment in next-to-last overnight stay
      HEX30(i)  = YesNo( AH213 );	   // Besides two stays, last six months stayed another time in a health facility
      HEX31(i)  = AH214;               // Place second-to-last time stayed overnight for health care	  
      HEX32(i)  = AH215;	           // Main reason to seek care second-to-last time
      HEX33(i)  = YesNo( AH216 );	   // Had surgery during second-to-last overnight stay
      HEX34(i)  = RecCost( AH217 );	   // Cost of treatment in second-to-last overnight stay
      HEX35(i)  = YesNo( AH218 );	   // Besides three stays, last six months stayed another time in a health facility 
      HEX36(i)  = AH219;               // How many times stayed overnight in a health facility last six months	  
      HEX37(i)  = YesNo( AH220 );	   // Inpatient member covered by health insurance
      HEX38(i)  = AH221;	           // Main type of inpatient's health insurance
    enddo;
    { third for outpatient }
    if noccurs(AHSECHE2_EDT) then
      HEX70   = AH302;                 // Index to household schedule for outpatient member 
      HEX71   = AH303;	               // Place where patient got health care most recently
      HEX72   = RecCost( AH304 );	   // Cost of treatment for services received from provider
      HEX73   = AH305;	               // Main reason to seek outpatient care most recent time
      HEX74   = YesNo( AH306 );	       // Last four weeks did get care another time from health provider
      HEX75   = AH307;	               // How many other times did get care last four weeks
      HEX76   = AH308;	               // How many times was money spent
      HEX77   = YesNo( AH309 );	       // Outpatient member covered by health insurance
      HEX78   = AH310;	               // Main type of outpatient's health insurance
      HEX79   = RecCost( AH311 );	   // Cost of vitamins, medicines, herbal remedies not prescribed by health provider
	  HEXOWGT = AHOUTWGT;              // Health expenditure weight for outpatient (6 decimals)
    endif;	  
  endif;	

{ ----------------------------------------------------------------------------}

PROC AHSECCL_EDT
  { Child Labor Module }
  if HV015 = 1 then
    { Child line number in household }
    HCHLINE	= ACHLINE;
    { Past week worked on: plot/farm/looked after animals }
	HCHL2A  = YesNo( ACHL2A );
    { Past week worked on: helped family/relatives with business }
	HCHL2B  = YesNo( ACHL2B );
    { Past week worked on: produce/sell articles/handicrafts/food/agricultural products }
	HCHL2C  = YesNo( ACHL2C );
    { Past week worked on: other activities }
	HCHL2D  = YesNo( ACHL2D );
    { Past week worked on: CS }
	HCHL2E  = notappl;
    { Past week worked on: CS }
	HCHL2F  = notappl;
    { Past week worked on: CS }
	HCHL2G  = notappl;
    { Hours worked in past week activities }
    HCHL4  	= ACHL4;
    { Past week work require carrying heavy loads }
	HCHL5   = YesNo( ACHL5 );
    { Past week work require working with dangerous tools, knives, heavy machines }
	HCHL6   = YesNo( ACHL6 );
    { Work enviorment in past week work: exposed to dust, fumes, gas }
	HCHL7A  = YesNo( ACHL7A );
    { Work enviorment in past week work: exposed to extreme cold, heat, humidity }
	HCHL7B  = YesNo( ACHL7B );
    { Work enviorment in past week work: exposed to loud noise, vibration }
	HCHL7C  = YesNo( ACHL7C );
    { Work enviorment in past week work: require work at heights }
	HCHL7D  = YesNo( ACHL7D );
    { Work enviorment in past week work: exposed to chemicals, pesticides, glues, explosives } 
	HCHL7E  = YesNo( ACHL7E );
    { Work enviorment in past week work: other processes bad for health/safety }
	HCHL7F  = YesNo( ACHL7F );
    { Work enviorment in past week work: CS }
	HCHL7G  = notappl;
    { Work enviorment in past week work: CS }
	HCHL7H  = notappl;
    { Work enviorment in past week work: CS }
	HCHL7I  = notappl;
    { Past week: fetch water for household use }
	HCHL8   = YesNo( ACHL8 );
    { Past week: hours fetching water for household use }
	HCHL9   = ACHL9;
    { Past week: collect firewood for household use }
	HCHL10  = YesNo( ACHL10 );
    { Past week: hours collecting firewood for household use }
	HCHL11  = ACHL11;
    { Past week did do: shopping for household }
	HCHL12A = YesNo( ACHL12A );
    { Past week did do: repair household equipment - not in DHS-8 }
	HCHL12B = notappl;
    { Past week did do: cooking }
	HCHL12C = YesNo( ACHL12B );
    { Past week did do: washing clothes }
	HCHL12D = YesNo( ACHL12D );
    { Past week did do: caring for children }
	HCHL12E = YesNo( ACHL12E );
    { Past week did do: caring for the old/sick }
	HCHL12F = YesNo( ACHL12F );
    { Past week did do: other hosuehold tasks }
	HCHL12G = YesNo( ACHL12G );
    { Past week did do: washing dishes/cleaning the house }
	HCHL12H = YesNo( ACHL12C );
    { Past week did do: CS }
	HCHL12I = notappl;
    { Past week did do: CS }
	HCHL12J = notappl;
    { Past week did do: CS }
	HCHL12K = notappl;
    { Past week hours engaged in household activities }
	HCHL14   = ACHL14;
    { Child labor sample weight }
	HCHLWGT  = ACHLWGT;
  endif;
{ ----------------------------------------------------------------------------}

PROC AHSECCD_EDT
  { Child Discipline Module }
  if HV015 = 1 then                  
    { Child line number in household }  
	HCDI2   = ACDI2;
    { Past month: took away privileges }
	HCDI3A  = YesNo( ACDI3A );
    { Past month: explained wrong behaviour }
	HCDI3B  = YesNo( ACDI3B );
    { Past month: shook him/her }
	HCDI3C  = YesNo( ACDI3C );
    { Past month: shouted, yelled, screamed }
	HCDI3D  = YesNo( ACDI3D );
    { Past month: gave something else to do }
	HCDI3E  = YesNo( ACDI3E );
    { Past month: hit on bottom with bare hand }
	HCDI3F  = YesNo( ACDI3F );
    { Past month: hit with hard object (belt, stick, hairbrush) }
	HCDI3G  = YesNo( ACDI3G );
    { Past month: called dumb, lazy or other names }
	HCDI3H  = YesNo( ACDI3H );
    { Past month: hit on face, head, ears }
	HCDI3I  = YesNo( ACDI3I );
    { Past month: hit on hand, arm, leg }
	HCDI3J  = YesNo( ACDI3J );
    { Past month: beat him/her up }
	HCDI3K  = YesNo( ACDI3K );
    { Past month: CS }
	HCDI3L  = notappl;
    { Past month: CS }
	HCDI3M  = notappl;
    { Past month: CS }
	HCDI3N  = notappl;
    { Child should be punished to bring him/her up, raise or educate }
	HCDI4   = YesNo( ACDI4 );
    { Child discipline sample weight }
	HCDWGT  = ACDWGT;
  endif;

{ ----------------------------------------------------------------------------}

PROC AHSECCW_EDT
  { Child well-being and household structure module }
  if HV015 = 1 then          
    for i in AHSECCW_EDT do  
      // Child line number in household
      HCWIDX(i)  = AHCW05;
      // Time since child and mother lived together
      HCW08(i)   = unitnumb( AHCW08U, AHCW08N );
      // Last 6 months: amount that child and mother communicate
      HCW09(i)   = AHCW09;
      // Same mother as a previous child	  
      HCW11(i)   = YesNo(AHCW11);
      // Child line number with same biological mother
      HCW12(i)   = AHCW12;
      // check if child has the same mother as other children in the module	  
      k = i;	  
      if AHCW09 <> notappl & AH13(AHCW05) in 0,1:AHMEMBER & AHCW15 = notappl then
        l = SameParent( i, AHCW05, AHCW12, 1 );
        if l then k = l endif;
      endif;
      // Mother is married or living with a man	  
      HCW13(i)   = YesNo(AHCW13(k));
      // Man that mother is living with is child's father
      HCW14(i)   = YesNo(AHCW14(k));
      // Mother provides money or goods to this household	  
      HCW15(i)   = YesNo(AHCW15(k));
      // Mother recieves money or goods from this household	  
      HCW16(i)   = YesNo(AHCW16(k));
      // Place where mother lives	  
      HCW17(i)   = AHCW17(k);
	  
      // Time since child and father lived together	  
      HCW19(i)   = unitnumb( AHCW19U, AHCW19N );
      // Last 6 months: amount that child and father communicate	  
      HCW20(i)   = AHCW20;
      // Same father as previous child	  
      HCW22(i)   = YesNo(AHCW22);
      // Child line number with same biological father
      HCW23(i)   = AHCW23;
      // check if child has the same father as other children in the module	  
      k = i;	  
      if AHCW20 <> notappl & AH15(AHCW05) in 0,1:AHMEMBER & AHCW26 = notappl then
        l = SameParent( i, AHCW05, AHCW23, 2 );
        if l then k = l endif;
      endif;
      // Father is married or living with a woman	  
      HCW25(i)   = YesNo(AHCW25(k));
      // Father provides money or goods to this household	  
      HCW26(i)   = YesNo(AHCW26(k));
      // Father receives money or goods from this household	  
      HCW27(i)   = YesNo(AHCW27(k));
      // Place where father lives	  
      HCW28(i)   = AHCW28(k);
	  
      // update marital status for father if mother reported to be married to father
      if HCW25(i) = notappl & HCW26(i) <> notappl & HCW14(i) <> notappl then
	    HCW25(i) = HCW13(i);
		if HCW13(i) <> 1 then // these should all be 1
		  errmsg("HCW25 set to %d",HCW13(i));
        else
		  errmsg("HCW25 set to %d",HCW13(i)) summary;
		endif;
	  endif;
      // if AHCW25 was empty for an earlier entry, look at what that entry is now set to
	  if HCW25(i) = notappl & AHCW23 <> notappl then
		HCW25(i) = HCW25(k);
		errmsg("HCW25 set to %d",HCW25(k)) summary;
	  endif;
    enddo;	
  endif;
  

{ ----------------------------------------------------------------------------}

PROC AHSECFS_EDT
  { Food insecurity module }
  if HV015 = 1 then
    HFS1    = YesNo(AHFS1);     { Household worried about food for lack of money or resources }   
    HFS2    = YesNo(AHFS2);     { Last 12 months household members unable to eat healthy for lack of money or resources }
    HFS3    = YesNo(AHFS3);     { Household members ate only few foods because of lack of money or resources }
    HFS4    = YesNo(AHFS4);     { Household members skip a meal because of lack of money or resources }
    HFS5    = YesNo(AHFS5);     { Last 12 months household members ate less than expected because of lack of money or resources }
    HFS6    = YesNo(AHFS6);     { Any time household run out of food because of lack of money or resources }
    HFS7    = YesNo(AHFS7);     { Any time household members were hungry and did not eat because of lack of money or resources }
    HFS8    = YesNo(AHFS8);     { Any time when any household member did not eat for a whole day because of lack of money or resources }
    HFS_MOD = AHFS_MOD;         { Severity probability for moderate+severe food insecurity }
    HFS_SEV = AHFS_SEV;         { Severity probability for severe food insecurity }
  endif;

{ ----------------------------------------------------------------------------}

PROC ABSECOVER_EDT
  { Biomarker questionnaire }
  if HV015 = 1 then
    { number of visits biomarker questionnaire }
    HV804  = ABVISITS;
    { day of biomarker visit }
    HV807D = ABINTD;
    { month of biomarker visit }
    HV807M = ABINTM;
    { year of biomarker visit }
    HV807Y = ABINTY;
    { CMC of biomarker questionnaire }
    HV807C = cmcode( ABINTM, ABINTY );
    { CDC of biomarker questionnaire }
    HV807A = CDCode( ABINTY, ABINTM, ABINTD );
  endif;

{ ----------------------------------------------------------------------------}

PROC ABSEC01_EDT
  { Biomarkers for children }
  { !!!!!!!! new variables HC36 & HC59 }
  {          what about AB124 ????     }
  if HV015 = 1 then
    j = 0;
    for i in ABSEC01_EDT do
      if ACAGEM < 60 then     // ACAGEM is properly calculated by FinImp8
        j = j + 1;
        { Index to household schedule }
        HC0(j)   = AB102;
        { Children eligibility for height/weight and hemoglobin }
        HV120( HC0(j) ) = 1;
        { Age in days }
        HC1A(j)  = ACCDCM - ACCDC;
        { Age in months }
        HC1(j)   = ACAGEM;
        { !! children's weight in kilograms (1 dec.) - first measurement }
        recode  AB106  -> HC2A(j);
               missing -> missing;
                99.94  -> 9994;
                99.95  -> 9995;
                99.96  -> 9996;
                       -> int( AB106*10 + 0.5 );
        endrecode;
        { !! children's weight in kilograms (1 dec.) - re-measurement }
        recode  ABWEIGHT -> HC2B(j);
                notappl  -> notappl;
                missing  -> missing;
                 99.94   -> 9994;
                 99.95   -> 9995;
                 99.96   -> 9996;
                         -> int( ABWEIGHT*10 + 0.5 );
        endrecode;
        { Height in centimeters (1 dec.) - first measurement }
        HC3A(j)  = AB108*10;
        { Height in centimeters (1 dec.) - re-measurement }
        HC3B(j)  = ABHEIGHT*10;
        { Height: lying or standing - first measurement }
        HC15A(j) = NAToZero( AB110 );
        { Height: lying or standing - re-measurement }
        HC15B(j) = NAToZero( ABLYNSTN );
        { final height, weight and how child was measured based on reason for re-measurement }
        HC2(j)  = HC2A(j);
        HC3(j)  = HC3A(j);
        HC15(j) = HC15A(j);
        if ABRTYPE in 2,3 & !ABWEIGHT in 99.90:99.98,missing,notappl & !ABHEIGHT in 999.0:999.8,missing,notappl then
          HC2(j)  = HC2B(j);
          HC3(j)  = HC3B(j);
          HC15(j) = HC15B(j);
          HC17(j) = ABRDAY;                           { Date measured (day) }
          HC18(j) = ABRMONTH;                         { Date measured (month) }
          HC19(j) = ABRYEAR;                          { Date measured (year) }
		else
          HC17(j)  = AB109D;                          { Date measured (day) }
          HC18(j)  = AB109M;                          { Date measured (month) }
          HC19(j)  = AB109Y;                          { Date measured (year) }
        endif;
        { result of measuring - height/weight }
        HC13(j)  = ResultHw( HC2(j), HC3(j) );

        HC20(j)  = ACCDCM;                            { Century Day Code of measurement }
        HC21(j)  = AB115;                             { Fieldworker measurer code for anthropometry }
        HC21A(j) = AB116;                             { Fieldworker assistant measurer code for anthropometry }
        HC21B(j) = AB121;                             { Fieldworker measurer code for hemoglobin }
		HC22(j)  = YesNo(AB107);                      { Child minimally dressed }
		HC23(j)  = ( ACAGEM in  0:23 & AB110 = 1 |    { Correct measurement procedure used }
		             ACAGEM in 24:60 & AB110 = 2 );   { Correct measurement procedure used }
		HC24(j)  = YesNo(AB113);                      { Child's hair had braids or ornaments }
        HC27(j)  = AH04( AB102);                               { Sex }
        HC30(j)  = (ACCMC - 1) % 12 + 1;                       { Month of birth of child }
        HC31(j)  = int((ACCMC - 1) / 12) + 1900;               { Year of birth of child }
        HC16(j)  = ACCDC - CDCode( HC31(j), HC30(j), 1 ) + 1;  { Day of birth of child }
        HC32(j)  = ACCMC;                                      { Date of birth (cmc) }
        HC32A(j) = CDCode( HC31(j), HC30(j), HC16(j) );        { Date of birth (cdc) }
        HC33(j)  = ACFLG;                              { Completeness of information }
        HC35(j)  = NAToZero( ABRTYPE );                { reason for remeasurement }
		{ !!!! new var - Height/weight recorded in anthropometry/anemia pamphlet }
        HC36(j)  = YesNo(AB114);
        { hemoglobin related variables should only be present for children 6+ months old }
        if HC1(j) in 6:59 then
          HC51(j)  = AB118;     { Line no. of parent/caretaker }
          if HC51(j) = notappl then HC51(j) = missing endif;
          HC52(j)  = AB120;     { Read consent statement for hemoglobin }
          if HC52(j) = notappl then HC52(j) = missing endif;
          { Hemoglobin level (g/dl - 1 decimal) }
          HC53(j)  = AB123 * 10;        { make sure that original variable has one decimal }
          if AB123 = notappl & HC52(j) = 2 then HC53(j) = 995 endif;
          if AB123 = notappl & HC52(j) = 3 then HC53(j) = 994 endif;
          if HC53(j) = notappl then HC53(j) = missing endif;
          { Result of measuring (Hemoglobin) }
          recode AB120 :: HC53(j) -> HC55(j);
               missing ::         -> missing;
                   2   ::         -> 4;       { refused     }
                   3   ::         -> 3;       { not present/other }
                       ::  0:600  -> 0;       { measured }
                       ::   994   -> 3;       { not present }
                       ::   995   -> 4;       { refused     }
                       ::   996   -> 6;       { other }
                       ::         -> HC53(j);
          endrecode;
          // hemoglobin and anemia according to first DHS methodology		  
          { altitude adjustment }
          altit    = HV040 / 1000 * 3.3;
          adjalt   = -0.032 * altit + 0.022 * altit * altit;
          { no adjustment for altitud < 1000 meters including negative altitude }
          if adjalt < 0 | HV040 < 1000 | HV040 = missing then adjalt = 0 endif;
          { Hemoglobin level adjusted by altitud (g/dl - 1 decimal) }
          if HC53(j) in 994:998,missing,notappl then
            HC56(j) = missing
          elseif !HC53(j) in 20:256 then    { assign inconsistent to implausible hemoglobin levels }
            HC56(j) = 997
          else
            HC56(j)  = int( ( HC53(j) / 10 - adjalt ) * 10 + 0.5 );
          endif;
          { Anemia level }
          recode HC56(j) -> HC57(j);
                 missing -> missing;
                  997    -> missing;
                  <70    -> 1;        { severe }
                 <100    -> 2;        { moderate }
                 <110    -> 3;        { mild }
                         -> 4;        { not anemic }
          endrecode;
          // hemoglobin and anemia according to WHO methodology. Implemented on 3/15/2024		  
          { altitude adjustment }
          adjalt = AdjustAltitude( HV040 );
          { Hemoglobin level adjusted by altitud (g/dl - 1 decimal) }
          if HC53(j) in 994:998,missing,notappl then
            HC56A(j) = missing
          elseif !HC53(j) in 20:256 then    { assign inconsistent to implausible hemoglobin levels }
            HC56A(j) = 997
          else
            HC56A(j)  = int( ( HC53(j) / 10 - adjalt ) * 10 + 0.5 );
          endif;
          { Anemia level }
          recode HC1(j) :: HC56A(j) -> HC57A(j);
                        :: missing  -> missing;
                        ::   997    -> missing;
                        ::   <70    -> 1;   // severe
                   6:23 ::   <95    -> 2;   // moderate
                   6:23 ::   <105   -> 3;   // mild
                  24:59 ::   <100   -> 2;   // moderate
                  24:59 ::   <110   -> 3;   // mild
                        ::          -> 4;   // no anemia
          endrecode;
          { Agrees to referral }
    	  { !!! candidate to be removed from DHS-9 as it hasn't been used for a while }
          HC58(j)  = notappl;   { !! maybe present in country }
          { !!!! new var - Severe anemia referral provided }
          HC59(j)  = AB125;
        endif;
        { Mother's line number from woman's questionnaire }
        HC60(j)  = ACMLN;
        if ACMLN = 0 then HC60(j) = 993 endif;
        { Mother's highest educational level }
        HC61(j)  = ACED1;
        { Mother's highest year of education }
        HC62(j)  = ACED2;
        { Preceding birth interval }
        HC63(j)  = ACBI;
        { Birth order number }
        HC64(j)  = ACBO;
        { Highest educational level (CS for preliminary & final report) }
        HC68(j)  = ACED3;

        { anthropometry scores according to WHO }
        HC70(j)  = ACZSHA;     { Ht/A standard deviation  }
        HC71(j)  = ACZSWA;     { Wt/A standard deviation  }
        HC72(j)  = ACZSWH;     { Wt/Ht standard deviation }
        HC73(j)  = ACZSBM;     { BMI standard deviation   }

      endif;       { end < 60 }
    enddo;
  endif;           { end HV015 = 1 }

{ ----------------------------------------------------------------------------}

PROC ABSEC02_EDT
  { Biomarkers for women }
  { !!!! there are 3 fieldworkers for every test }
  {      two for respondent (mutually exclusive) one for adult responsible (only one variable defined) }  
  { !!!!!!!! new variables HA36 & HA59 }
  {          what about AB256 ????     }
  if HV015 = 1 then
    for i in ABSEC02_EDT do
      { Index to household schedule }
      HA0(i)   = AB202;
      { Women's age in years }
      if AB208M <> notappl then
        HA1(i) = int( (cmcode(AB208M,AB208Y)-AWCMC)/12 );
      else	  
        HA1(i) = int( (HV807C-AWCMC)/12 );
      endif;		
      { !! woman's weight in kilograms (1 dec.) }
      recode  AB205  -> HA2(i);
             missing -> missing;
             999.94  -> 9994;
             999.95  -> 9995;
             999.96  -> 9996;
                     -> int( AB205*10 + 0.5 );
      endrecode;

      { Respondent's height (cms-1d) }
      HA3(i)   = AB207*10;
      { result of measuring - height/weight }
      HA13(i)  = ResultHW( HA2(i), HA3(i) );
      HA17(i)  = AB208D;         { Date measured (day) }
      HA18(i)  = AB208M;         { Date measured (month) }
      HA19(i)  = AB208Y;         { Date measured (year) }
      HA21(i)  = AB211;          { Fieldworker measurer code for anthropometry }
      HA21A(i) = AB212;          { Fieldworker assistant measurer code for anthropometry }
      HA21B(i) = AB218;          { Fieldworker measurer code for hemoglobin }
	  if AB218 = notappl then
        HA21B(i) = AB218D;       
      endif;	  
      HA21C(i) = AB217B;         // Fieldworker consent for hemoglobin from parent/responsible	  
	  HA22(i)  = YesNo(AB206);   { Was woman wearing only lightweight clothing }
	  HA24(i)  = YesNo(AB209);   { Measurement interfered with braided or ornament }

      HA32(i)  = AWCMC;          { Date of birth (cmc) }
      HA33(i)  = AWFLG;          { Completeness of information }
      HA35(i)  = AWSMK;          { Smoking }
      { !!!! new var - Height/weight recorded in anthropometry/anemia pamphlet }
      HA36(i)  = YesNo(AB210);
      HA40(i)  = AWBM;           { Body mass index }
      HA50(i)  = AB203;          { Under age 18 }
      HA51(i)  = AB212A;         { Line no. of parent/caretaker }
      { Read consent statement for anemia }
      HA52(i) = ReadConsent( AB217, AB217A, AB218C );

      { Hemoglobin level (g/dl - 1 decimal) }
      HA53(i)  = AB255 * 10;     { make sure that original variable has one decimal }
      if AB255 = notappl & HA52(i) in 2,3 then HA53(i) = 995 endif;
      if AB255 = notappl & HA52(i) in 4,5 then HA53(i) = 994 endif;
      if HA53(i) = notappl then HA53(i) = missing endif;
      { Currently pregnant }
      { !!! use zzAB208A if AWPRG is not available, for the most part AWPRG is more reliable }
      HA54(i)  = AWPRG;
      if HA54(i) = notappl then HA54(i) = missing endif;
      { Duration of current pregnancy in months }
      HA54A(i) = AWMOS;
      { Result of measuring (Hemoglobin) }
      recode HA53(i) -> HA55(i);
              0:980  -> 0;       { measured }
               994   -> 3;       { not present }
               995   -> 4;       { refused     }
               996   -> 6;       { other }
                     -> HA53(i);
      endrecode;
      // hemoglobin and anemia according to first DHS methodology		  
      { altitude adjustment }
      altit    = HV040 / 1000 * 3.3;
      adjalt   = -0.032 * altit + 0.022 * altit * altit;
      { no adjustment for altitud < 1000 including negative altitud }
      if adjalt < 0 | HV040 < 1000 | HV040 = missing then adjalt = 0 endif;
      { smoking adjustment }
      recode AWSMK -> adjsmk;
           notappl -> 0;
             0:9   -> 0;          { no smoking or < 10 cigarettes }
            10:19  -> 0.3;
            20:39  -> 0.5;
            40:80  -> 0.7;    { 80 means 80+ cigarttes }
                   -> 0.3;    { missing, DK }
      endrecode;
      { Hemoglobin level adjusted by altitud and smoking (g/dl - 1 decimal) }
      if HA53(i) in 994:998,missing,notappl then
        HA56(i) = missing
      elseif !HA53(i) in 20:256 then    { assign inconsistent to implausible hemoglobin levels }
        HA56(i) = 997
      else
        HA56(i)  = int( ( HA53(i) / 10 - adjalt - adjsmk ) * 10 + 0.5 );
      endif;
      { Anemia level }
      recode HA56(i) :: HA54(i) -> HA57(i);
             missing ::         -> missing;
              997    ::         -> missing;
              <70    ::   1     -> 1;        { severe }     // for pregnant women
             <100    ::   1     -> 2;        { moderate }
             <110    ::   1     -> 3;        { mild }
                     ::   1     -> 4;        { not anemic }
              <80    ::         -> 1;        { severe }     // for non-pregnant women
             <110    ::         -> 2;        { moderate }
             <120    ::         -> 3;        { mild }
                     ::         -> 4;        { not anemic }
      endrecode;
      // hemoglobin and anemia according to WHO methodology. Implemented on 3/15/2024		  
      { adjust by altitude }
      adjalt = AdjustAltitude( HV040 );
      // adjust by smoking 		
      adjsmk = AdjustSmoking( AWSMK );
      { hemoglobin adjusted by altitude and smoking }
      if HA53(i) in 994:998,missing,notappl then
        HA56A(i) = missing
      elseif !HA53(i) in 20:256 then    { assign inconsistent to implausible hemoglobin levels }
        HA56A(i) = 997
      else
        HA56A(i)  = int( ( HA53(i) / 10 - adjalt - adjsmk ) * 10 + 0.5 );
      endif;
      { Anemia level }
      recode HA54(i) :: HA54A(i) :: HA56A(i) -> HA57A(i);
                     ::          :: missing  -> missing;
                     ::          ::   997    -> missing;
                1    ::          ::  <70     -> 1;       // severe  -  for pregnant women
                1    ::    0:3   ::  <100    -> 2;       // moderate
                1    ::    0:3   ::  <110    -> 3;       // mild
                1    ::    4:6   ::  <95     -> 2;       // moderate
                1    ::    4:6   ::  <105    -> 3;       // mild
                1    ::    7:11  ::  <100    -> 2;       // moderate 
                1    ::    7:11  ::  <110    -> 3;       // mild 
                1    ::          ::          -> 4;       // no anemia 
                     ::          ::   <80    -> 1;       // severe  -  for non-pregnant women
                     ::          ::  <110    -> 2;       // moderate 
                     ::          ::  <120    -> 3;       // mild 
                     ::          ::          -> 4;       // no anemia 
      endrecode;
      { Agrees to referral for anemia }
	  { !!! candidate to be removed from DHS-9 as it hasn't been used for a while }
      HA58(i)  = notappl;                    { !! maybe present in country }
      { !!!! new var - Severe anemia referral provided }
      HA59(i)  = AB257;
      { Marital status }
      HA60(i)  = AB204;
	  { !!!! variables HA61, HA62, HA63, and HA64 are related to HIV           }
	  {      if "Other test" not HIV, these variables should by set to notappl }  
      { Read consent statement for HIV }
      HA61(i) = ReadConsent( AB220, AB220A, AB221C );
      { Blood sample ID number }
      HA62(i)  = ABWDBS;
      { Result of measuring (HIV) }
      if ABWDBS in "99993":"99996" then
        xtemp = tonumber( ABWDBS );
        recode xtemp -> HA63(i);
               99993 -> 4;              { sample not tested/lost/damaged/insufficient }
               99994 -> 2;              { not present }
               99995 -> 3;              { refused }
               99996 -> 6;              { other }
        endrecode;
      elseif length( strip(ABWDBS) ) = 5 then
        HA63(i) = 1                     { measured }
      else
        HA63(i) = missing
      endif;
      { Consent for additional tests }
      HA64(i) = notappl; { ReadConsent( ABWHIV3, ABWHIV7, ABWHIV8 ); }
      { Result of woman individual interview }
      HA65(i)  = AWRESI;
      { Woman's highest educational level }
      HA66(i)  = AWED1;
      { Woman's highest year of education }
      HA67(i)  = AWED2;
      { Highest educational level (CS for preliminary & final reports) }
      HA68(i)  = AWED3;
      { HIV weight (6 decimals) }
      HA69(i)  = AWHIVWGT;
	  
      { Interviewer that took blood for HIV testing }
      if AB220 <> notappl then
        HA70A(i)  = AB221
      else
        HA70A(i)  = AB221D
      endif;
      HA70C(i) = AB220B;         // Fieldworker consent for HIV from parent/responsible	  

      { anthropometry scores according to WHO }
      HA70(i)  = AWZSHA;     { Ht/A standard deviation  }
      HA73(i)  = AWZSBM;     { BMI/A standard deviation  }
    enddo;
  endif;           { end HV015 = 1 }

  { Blood pressure for women }
  { !!!! there are 3 fieldworkers for BP }
  {      two for respondent (mutually exclusive) one for adult responsible (harmonize with hemoglobin) }  
  if HV015 = 1 then
    for i in ABSEC02_EDT do
      { Index to household schedule }
      BPW0(i)   = AB202;
      { Consent for blood pressure }
      BPW1(i) = ReadConsent( AB214, AB214A, AB215C );
      { Fieldworker took consent for respondent }
      BPW2(i) = AB215;
      if AB215 = notappl then	  
        BPW2(i) = AB215D;
      endif;
      { Fieldworker took consent for parent/responsible adult }
      BPW3(i)   = AB214B;
      { Line no. of parent/caretaker }
      BPW4(i)   = AB212A;
      { Number of BP readings }
      read1     = ( ValidBP(AB227A,1) & ValidBP(AB227B,2) );
      read2     = ( ValidBP(AB236A,1) & ValidBP(AB236B,2) );
      read3     = ( ValidBP(AB239A,1) & ValidBP(AB239B,2) );
      recode read1 :: read2 :: read3 -> BPW5(i);
               0   ::   0   ::   0   -> 0;         // not a single reading	  
               1   ::   1   ::   1   -> 1;         // all three readings	  
               1   ::   1   ::       -> 2;         // first and second readings
               1   ::       ::   1   -> 3;         // first and third readings	  
               1   ::       ::       -> 4;         // only first reading	  
                   ::   1   ::   1   -> 5;         // second and third readings	  
                   ::   1   ::       -> 6;         // only second reading	  
                   ::       ::   1   -> 7;         // only third reading	  
                   ::       ::       -> default;
      endrecode;				   
      { Last 30 minutes have you: eaten anything  }				 
      BPW11(i)  = YesNo( AB224A );
      { Last 30 minutes have you: had coffe, tea, cola other drinks with caffeine  }				 
      BPW12(i)  = YesNo( AB224B );
      { Last 30 minutes have you: smoked any tobacco products  }				 
      BPW13(i)  = YesNo( AB224C );
      { Last 30 minutes have you: excercised with intensity  }				 
      BPW14(i)  = YesNo( AB224D );
      { Arm circumference in centimeters  }				 
      BPW15(i)  = AB225;
      { Blood pressure monitor used  }				 
      BPW16(i)  = AB226;
      { First blood pressure reading: Systolic  }				 
      BPW17(i)  = AB227A;
      { First blood pressure reading: Diastolic  }				 
      BPW18(i)  = AB227B;
      { First blood pressure reading (hour)  }				 
      BPW19H(i) = AB228H;
      { First blood pressure reading (minutes)  }				 
      BPW19M(i) = AB228M;
      { Ever had blood pressure measured by a doctor/health worker  }				 
      BPW20(i)  = YesNo( AB230 );
      { Ever been diagnosed by doctor/health worker with hypertension  }				 
      BPW21(i)  = YesNo( AB231 );
      { Last 12 months have been diagnosed by doctor/health worker with hypertension  }				 
      BPW22(i)  = YesNo( AB232 );
      { Has a doctor/health worker prescribed medication to control blood pressure  }				 
      BPW23(i)  = YesNo( AB233 );
      { Is respondent taken medication to control blood pressure  }				 
      BPW24(i)  = YesNo( AB234 );
      { Consent given for second blood pressure reading  }				 
      BPW25(i)  = YesNo( AB235 );
      { Second blood pressure reading: Systolic  }				 
      BPW26(i)  = AB236A;
      { Second blood pressure reading: Diastolic  }				 
      BPW27(i)  = AB236B;
      { Second blood pressure reading (hour)  }				 
      BPW28H(i) = AB237H;
      { Second blood pressure reading (minutes)  }				 
      BPW28M(i) = AB237M;
      { Consent given for third blood pressure reading  }				 
      BPW29(i)  = YesNo( AB238 );
      { Third blood pressure reading: Systolic  }				 
      BPW30(i)  = AB239A;
      { Third blood pressure reading: Diastolic  }				 
      BPW31(i)  = AB239B;
      { Third blood pressure reading (hour)  }				 
      BPW32H(i) = AB240H;
      { Third blood pressure reading (minutes)  }				 
      BPW32M(i) = AB240M;
      { recalculate final blood pressure because algorithm used in the field may be different from }	
      { the standard to be used for tables. Original variables AB250A and AB250B are discarded     }	  
      if BPW5(i) = 1 then                              // average of second and third for three valid readings
        systolic  = round( (AB236A + AB239A)/2 ); 	 
        diastolic = round( (AB236B + AB239B)/2 ); 	 
      elseif BPW5(i) in 3,5 then                       // third reading when first and third or second and third readings are valid
        systolic  = AB239A;
        diastolic = AB239B;
      elseif BPW5(i) = 2 then                          // second reading when first and second readings are valid
        systolic  = AB236A;
        diastolic = AB236B;
      elseif BPW5(i) in 4,6,7 then                     // undefined, only one reading valid
        diastolic = 994;
        systolic  = 994;
      else                                          // no valid readings 
        systolic  = 997;
        diastolic = 997;
      endif;
      { Final/calculated blood pressure: Systolic  }				 
      BPW33(i)  = systolic;
      { Final/calculated blood pressure: Diastolic  }				 
      BPW34(i)  = diastolic;
      { Blood pressure category  }				 
      BPW35(i)  = BloodResult( BPW33(i), BPW34(i) );           // it may have changed from what was established at data collection
      { Respondent received form with blood pressure result }				 
      BPW36(i)  = AB253;
    enddo;
  endif;	

{ ----------------------------------------------------------------------------}

PROC ABSEC03_EDT
  { Biomarkers for men }
  { !!!! there are 3 fieldworkers for every test }
  {      two for respondent (mutually exclusive) one for adult responsible (only one variable defined) }  
  { !!!!!!!! new variables HB36 & HB59 }
  {          what about AB356 ????     }
  if HV015 = 1 then
    for i in ABSEC03_EDT do
      { HIV weight (6 decimals) }
      HB0(i)   = AB302;
      { Men's age in years }
      if AB308M <> notappl then
        HB1(i) = int( (cmcode(AB308M,AB308Y)-AMCMC)/12 );
      else	  
        HB1(i) = int( (HV807C-AMCMC)/12 );
      endif;		
      { man's weight (kilos-1d) }
      recode  AB305  -> HB2(i);
             missing -> missing;
             999.94  -> 9994;
             999.95  -> 9995;
             999.96  -> 9996;
                     -> int( AB305*10 + 0.5 );
      endrecode;

      { Respondent's height (cms-1d) }
      HB3(i)   = AB307*10;
      { result of measuring - height/weight }
      HB13(i)  = ResultHW( HB2(i), HB3(i) );
      HB17(i)  = AB308D;         { Date measured (day) }
      HB18(i)  = AB308M;         { Date measured (month) }
      HB19(i)  = AB308Y;         { Date measured (year) }
      HB21(i)  = AB311;          { Fieldworker measurer code for anthropometry }
      HB21A(i) = AB312;          { Fieldworker assistant measurer code for anthropometry }
      HB21B(i) = AB318;          { Fieldworker measurer code for hemoglobin }
	  if AB318 = notappl then
        HB21B(i) = AB318D;        
      endif;	  
      HB21C(i) = AB317B;         // Fieldworker consent for hemoglobin from parent/responsible	  
	  HB22(i)  = YesNo(AB306);   { Was man wearing only lightweight clothing }
	  HB24(i)  = YesNo(AB309);   { Measurement interfered with braided or ornament }

      HB32(i)  = AMCMC;          { Date of birth (cmc) }
      HB33(i)  = AMFLG;          { Completeness of information }
      HB35(i)  = AMSMK;          { smoking }
      { !!!! new var - Height/weight recorded in anthropometry/anemia pamphlet }
      HB36(i)  = YesNo(AB310);
      HB40(i)  = AMBM;           { Body mass index }
      HB50(i)  = AB303;          { Under age 18 }
      HB51(i)  = AB312A;         { Line no. of parent/caretaker }
      { Read consent statement for anemia }
      HB52(i) = ReadConsent( AB317, AB317A, AB318C );

      { Hemoglobin level (g/dl - 1 decimal) }
      HB53(i)  = AB355 * 10;     { make sure that original variable has one decimal }
      if AB355 = notappl & HB52(i) in 2,3 then HB53(i) = 995 endif;
      if AB355 = notappl & HB52(i) in 4,5 then HB53(i) = 994 endif;
      if HB53(i) = notappl then HB53(i) = missing endif;
      { Result of measuring (Hemoglobin) }
      recode HB53(i) -> HB55(i);
              0:980  -> 0;       { measured }
               994   -> 3;       { not present }
               995   -> 4;       { refused     }
               996   -> 6;       { other }
                     -> HB53(i);
      endrecode;
      { altitude adjustment }
      altit    = HV040 / 1000 * 3.3;
      adjalt   = -0.032 * altit + 0.022 * altit * altit;
      { no adjustment for altitud < 1000 including negative altitud }
      if adjalt < 0 | HV040 < 1000 | HV040 = missing then adjalt = 0 endif;
      { smoking adjustment }
      recode AMSMK -> adjsmk;
           notappl -> 0;
             0:9   -> 0;          { no smoking or < 10 cigarettes }
            10:19  -> 0.3;
            20:39  -> 0.5;
            40:80  -> 0.7;        { 80 means 80+ cigarttes }
                   -> 0.3;        { missing, DK }
      endrecode;
      { Hemoglobin level adjusted by altitud and smoking (g/dl - 1 decimal) }
      if HB53(i) in 994:998,missing,notappl then
        HB56(i) = missing
      elseif !HB53(i) in 20:256 then    { assign inconsistent to implausible hemoglobin levels }
        HB56(i) = 997
      else
        HB56(i)  = int( ( HB53(i) / 10 - adjalt - adjsmk ) * 10 + 0.5 );
      endif;
      { Anemia level }
      recode HB56(i) -> HB57(i);
            missing  -> missing;
             997     -> missing;
             <80     -> 1;          { severe }
            <110     -> 2;          { moderate }
            <130     -> 3;          { mild }
                     -> 4;          { Not anemic }
      endrecode;
      // hemoglobin and anemia according to WHO methodology. Implemented on 3/15/2024		  
      { adjust by altitude }
      adjalt = AdjustAltitude( HV040 );
      // adjust by smoking	
      adjsmk = AdjustSmoking( AMSMK ); 		
      { hemoglobin adjusted by altitude and smoking }
      if HB53(i) in 994:998,missing,notappl then
        HB56A(i) = missing
      elseif !HB53(i) in 20:256 then    { assign inconsistent to implausible hemoglobin levels }
        HB56A(i) = 997
      else
        HB56A(i)  = int( ( HB53(i) / 10 - adjalt - adjsmk ) * 10 + 0.5 );
      endif;
      { Anemia level }
      recode HB56A(i) -> HB57A(i);
             missing  -> missing;
               997    -> missing;
               <80    -> 1;       // severe 
              <110    -> 2;       // moderate 
              <130    -> 3;       // mild 
                      -> 4;       // no anemia 
      endrecode;
      { Agrees to referral }
	  { !!! candidate to be removed from DHS-9 as it hasn't been used for a while }
      HB58(i)  = notappl;           { !! maybe present in country }
      { !!!! new var - Severe anemia referral provided }
      HB59(i)  = AB357;
      { Marital status }
      HB60(i)  = AB304;
	  { !!!! variables HB61, HB62, HB63, and HB64 are related to HIV           }
	  {      if "Other test" not HIV, these variables should by set to notappl }  
      { Read consent statement (HIV) }
      HB61(i) = ReadConsent( AB320, AB320A, AB321C );
      { Blood sample ID number }
      HB62(i)  = ABMDBS;
      { Result of measuring (HIV) }
      if ABMDBS in "99993":"99996" then
        xtemp = tonumber( ABMDBS );
        recode xtemp -> HB63(i);
               99993 -> 4;              { sample not tested/lost/damaged/insuficient }
               99994 -> 2;              { not present }
               99995 -> 3;              { refused }
               99996 -> 6;              { other }
        endrecode;
      elseif length( strip(ABMDBS) ) = 5 then
        HB63(i) = 1                     { measured }
      else
        HB63(i) = missing
      endif;
      { Consent for additional tests }
      HB64(i) = notappl; { ReadConsent( ABMHIV3, ABMHIV7, ABMHIV8 ); }
      { Result of man individual interview }
      HB65(i)  = AMRESI;
      { Man's highest educational level }
      HB66(i)  = AMED1;
      { Man's highest year of education }
      HB67(i)  = AMED2;
      { Highest educational level (CS for preliminary & final reports) }
      HB68(i)  = AMED3;
      { HIV weight (6 decimals) }
      HB69(i)  = AMHIVWGT;
      { Interviewer that took blood for HIV testing }
      if AB321 <> notappl then
        HB70A(i)  = AB321;
      else
        HB70A(i)  = AB321D;
      endif;
      HB70C(i) = AB320B;         // Fieldworker consent for HIV from parent/responsible	  

      { anthropometry scores according to WHO }
      HB70(i)  = AMZSHA;     { Ht/A standard deviation  }
      HB73(i)  = AMZSBM;     { BMI/A standard deviation }
    enddo;
  endif;           { end HV015 = 1 }

  { Blood pressure for men }
  if HV015 = 1 then
    for i in ABSEC03_EDT do
      { Index to household schedule }
      BPM0(i)   = AB302;
      { Consent for blood pressure }
      BPM1(i) = ReadConsent( AB314, AB314A, AB315C );
      { Fieldworker took consent for respondent }
      BPM2(i) = AB315;
      if AB315 = notappl then	  
        BPM2(i) = AB315D;
      endif;
      { Fieldworker took consent for parent/responsible adult }
      BPM3(i)   = AB314B;
      { Line no. of parent/caretaker }
      BPM4(i)   = AB312A;
      { Number of BP readings }
      read1     = ( ValidBP(AB327A,1) & ValidBP(AB327B,2) );
      read2     = ( ValidBP(AB336A,1) & ValidBP(AB336B,2) );
      read3     = ( ValidBP(AB339A,1) & ValidBP(AB339B,2) );
      recode read1 :: read2 :: read3 -> BPM5(i);
               0   ::   0   ::   0   -> 0;         // not a single reading	  
               1   ::   1   ::   1   -> 1;         // all three readings	  
               1   ::   1   ::       -> 2;         // first and second readings
               1   ::       ::   1   -> 3;         // first and third readings	  
               1   ::       ::       -> 4;         // only first reading	  
                   ::   1   ::   1   -> 5;         // second and third readings	  
                   ::   1   ::       -> 6;         // only second reading	  
                   ::       ::   1   -> 7;         // only third reading	  
                   ::       ::       -> default;
      endrecode;				   
      { Last 30 minutes have you: eaten anything  }				 
      BPM11(i)  = YesNo( AB324A );
      { Last 30 minutes have you: had coffe, tea, cola other drinks with caffeine  }				 
      BPM12(i)  = YesNo( AB324B );
      { Last 30 minutes have you: smoked any tobacco products  }				 
      BPM13(i)  = YesNo( AB324C );
      { Last 30 minutes have you: excercised with intensity  }				 
      BPM14(i)  = YesNo( AB324D );
      { Arm circumference in centimeters  }				 
      BPM15(i)  = AB325;
      { Blood pressure monitor used  }				 
      BPM16(i)  = AB326;
      { First blood pressure reading: Systolic  }				 
      BPM17(i)  = AB327A;
      { First blood pressure reading: Diastolic  }				 
      BPM18(i)  = AB327B;
      { First blood pressure reading (hour)  }				 
      BPM19H(i) = AB328H;
      { First blood pressure reading (minutes)  }				 
      BPM19M(i) = AB328M;
      { Ever had blood pressure measured by a doctor/health worker  }				 
      BPM20(i)  = YesNo( AB330 );
      { Ever been diagnosed by doctor/health worker with hypertension  }				 
      BPM21(i)  = YesNo( AB331 );
      { Last 12 months have been diagnosed by doctor/health worker with hypertension  }				 
      BPM22(i)  = YesNo( AB332 );
      { Has a doctor/health worker prescribed medication to control blood pressure  }				 
      BPM23(i)  = YesNo( AB333 );
      { Is respondent taken medication to control blood pressure  }				 
      BPM24(i)  = YesNo( AB334 );
      { Consent given for second blood pressure reading  }				 
      BPM25(i)  = YesNo( AB335 );
      { Second blood pressure reading: Systolic  }				 
      BPM26(i)  = AB336A;
      { Second blood pressure reading: Diastolic  }				 
      BPM27(i)  = AB336B;
      { Second blood pressure reading (hour)  }				 
      BPM28H(i) = AB337H;
      { Second blood pressure reading (minutes)  }				 
      BPM28M(i) = AB337M;
      { Consent given for third blood pressure reading  }				 
      BPM29(i)  = YesNo( AB338 );
      { Third blood pressure reading: Systolic  }				 
      BPM30(i)  = AB339A;
      { Third blood pressure reading: Diastolic  }				 
      BPM31(i)  = AB339B;
      { Third blood pressure reading (hour)  }				 
      BPM32H(i) = AB340H;
      { Third blood pressure reading (minutes)  }				 
      BPM32M(i) = AB340M;
      { recalculate final blood pressure because algorithm used in the field may be different from }	
      { the standard to be used for tables. Original variables AB350A and AB350B are discarded     }	  
      if BPM5(i) = 1 then                              // average of second and third for three valid readings
        systolic  = round( (AB336A + AB339A)/2 ); 	 
        diastolic = round( (AB336B + AB339B)/2 ); 	 
      elseif BPM5(i) in 3,5 then                       // third reading when first and third or second and third readings are valid
        systolic  = AB339A;
        diastolic = AB339B;
      elseif BPM5(i) = 2 then                          // second reading when first and second readings are valid
        systolic  = AB336A;
        diastolic = AB336B;
      elseif BPM5(i) in 4,6,7 then                     // undefined, only one reading valid
        diastolic = 994;
        systolic  = 994;
      else                                          // no valid readings 
        systolic  = 997;
        diastolic = 997;
      endif;
      { Final/calculated blood pressure: Systolic  }				 
      BPM33(i)  = systolic;
      { Final/calculated blood pressure: Diastolic  }				 
      BPM34(i)  = diastolic;
      { Blood pressure category  }				 
      BPM35(i)  = BloodResult( BPM33(i), BPM34(i) );           // it may have changed from what was established at data collection
      { Respondent received form with blood pressure result }				 
      BPM36(i)  = AB353;
    enddo;
  endif;	

{ ----------------------------------------------------------------------------}

PROC INDIVIDUAL
preproc
  { Keep incomplete cases, but drop non de facto cases (except for de jure samples) }
  if AH04(ALINE) <> 2 | AH06(ALINE) <> 1 then skip case; endif;

PROC ASECOVER_EDT
  if ARESULT = 1 then
    { Put handling of calendar here,
      so that calendar available for later processing }
    calint = vcallen - (AINTC - (calbegy-1900)*12) + 1;   { Row of date of interview }

    { Loop through columns in calendar }
    do i = 1 while i <= maxcols
      VCOL(i) = i;
      { Get column number in raw data, start of code string and length }
      j = calwork(i,0);
      k = calwork(i,1);
      l = calwork(i,2);
      { If column exists in raw data }
      if j & soccurs(AWSEC2C) >= j then     { !! adjust according to the number of columns in the calendar }
        { Blank top portion of column }
        do v = 1 while v <= vcallen - acallen
          VCAL(i)[v:1] = " ";
        enddo;
        a = 1;
        { Check nothing after date of interview }
        do v = v while v < calint
          if !pos(ACAL(j)[a:1]," ") then
            errmsg( 9900, j, a, ACAL(j)[a:1] );
          endif;
          VCAL(i)[v:1] = " ";
          a = a + 1;
        enddo;
        { Convert codes from remaining portion of column }
        do v = v while v <= vcallen
          x = pos(ACAL(j)[a:1],acalstrs[k:l]);
          if x then
            VCAL(i)[v:1] = vcalstrs[k+x-1:1];
          else
            VCAL(i)[v:1] = "*";
            errmsg( 9900, j, a, ACAL(j)[a:1] );
          endif;
          a = a + 1;
        enddo;
      else
        VCAL(i) = " ";
      endif;
    enddo;
  endif;

  { ----------------------------------------------------------------------------}

  { !! Country code + type of recode (not phase of DHS) }
  V000 = HV000;
  { Cluster number }
  V001 = HV001;
  { Household number }
  V002 = HV002;
  { Respondent's line number }
  V003 = ALINE;
  { Ultimate area unit }
  V004 = HV004;         { !! }
  { Sample weight }
  V005 = AWEIGHT;
  if ARESULT <> 1 then V005 = 0 endif;
  { Month of interview }
  V006 = AINTM;
  { Year of interview }
  V007 = AINTY;
  { Date of interview (CMC) }
  V008 = AINTC;
  { Century Day Code of interview (CDC) }
  V008A = CDCode( AINTY, AINTM, AINTD );
  if ARESULT = 1 then
    { Respondent's month of birth }
    V009 = (A110C-1) % 12 + 1;
    { Respondent's year of birth }
    V010 = int((A110C-1)/12) + 1900;
    { Date of birth (CMC) }
    V011 = A110C;
    { Current age - respondent }
    V012 = A111C;
    { Age 5-year groups }
    recode V012 -> V013;
          15:19 -> 1;
          20:24 -> 2;
          25:29 -> 3;
          30:34 -> 4;
          35:39 -> 5;
          40:44 -> 6;
          45:49 -> 7;
    endrecode;
    V014 = A110F;       { !! completeness flag - check coding }
  else
    V009 = notappl;
    V010 = notappl;
    V011 = notappl;
    V012 = notappl;
    V013 = notappl;
    V014 = notappl;
  endif;
  { Result of individual interview }
  V015 = ARESULT;       { !! check coding correct }
  { Day of interview }
  V016 = AINTD;
  { CMC start of calendar }
  V017 = (calbegy-1900) * 12 + 1;      { !! }
  if V015 = 1 then
    { Row of month of interview }
    V018 = vcallen - (V008 - V017);
    { Length of calendar }
    V019 = vcallen - V018 + 1;
    { Number of calendar columns }
    V019A = MaxOcc(AWSEC2C);  { !!!! or adjust depending on calendar used in country }
  else
    V018 = 0;
    V019 = 0;
    V019A = 0;
  endif;
  { Ever-married sample }
  V020 = HV020;         { !! - code 1 for ever married samples }
  { Primary sampling unit }
  V021 = HV021;         { !! }
  { Sample strata for sampling errors }
  V022 = HV022;         { !! }
  { Stratification used in sampling design }
  V023 = HV023;         { !! }
  { Region }
  V024 = HV024;
  { Type of place of residence }
  V025 = HV025;
  { De facto place of residence }
  V026 = HV026;
  { Number of visits }
  V027 = AVISITS;
  { Interviewer identification }
  V028 = AINTNUM;
  { Keyer identification }
  V029 = notappl;
  { Field supervisor }
  V030 = ASUPERV;
  { Field editor }
  V031 = notappl;
  { Office editor }
  V032 = notappl;
  { Line number of husband }
  V034 = A710;
  { Cluster altitude in meters }
  V040 = HV040;
  { Household selection for hemoglobin }
  V042 = HV042;
  { Selection for domestic violence module }
  if HV044 = 1 then
    V044 = ( AHNUMDV = ALINE );     { eligibility for domestic violence !! CS }
    if V044 = 1 then
      V044 = DV01;                  { 1 = Privacy obtained, 2 = Privacy not possible, missing = no data }
      if special(DV01) then V044 = 3 endif;
    endif;
  else
    V044 = HV044
  endif;
  { Language of questionnaire }
  V045A = ALANGQ;
  { Language of interview }
  V045B = ALANGI;
  { Language of respondent }
  V045C = ALANGR;
  { Translator used }
  V046 = YesNo( ATRANS );
  { Team number }
  V047 = ATEAM;
  { Team supervisor }
  V048 = notappl;                  { !! make sure to populate it if used }

  { !!! include geographical and front page CS Individual variables for all questionnaires }
  if V015 = 1 then
    { include here CS variables relevant to complete questionnaires }
  endif;

{ ----------------------------------------------------------------------------}

PROC AWSEC01_EDT
  if V015 = 1 then
    { Region }
    V101 = AREGION;
    { Type of place of residence }
    V102 = ATYPE;
    { !!!! candidate to be removed from DHS-9 recode, it hasn't been used since DHS-5 }	
    { Childhood place of residence }
    V103 = notappl;     { !! may exist in country }
    { Years lived in place of res. }
    V104 = A104;
    { Type of place of previous residence }
    V105 = A108;
    { Region of previous residence }
    V105A = A107;       { !! make sure to use the same code schema as that of V101 }
    { Highest educational level }
    V106 = LevEduc( A113, A114 );
    { Highest year of education }
    V107 = GraEduc( A114, A115 );

    { variables coming from the household }
    { !!! make sure to update the value sets the same way as used in HH variables }
    if AH05(ALINE) = 1 then
      V113 = HV201;  { Source of drinking water }
      V115 = HV204;  { Time to get to water source }
      V116 = HV205;  { Type of toilet facility }
      V119 = HV206;  { Has electricity }
      V120 = HV207;  { Has radio }
      V121 = HV208;  { Has television }
      V122 = HV209;  { Has refrigerator }
      V123 = HV210;  { Has bicycle }
      V124 = HV211;  { Has motorcycle/scooter }
      V125 = HV212;  { Has car/truck }
      V127 = HV213;  { Main floor material }
      V128 = HV214;  { Main wall material }
      V129 = HV215;  { Main roof material }
      V153 = HV221;  { Has telephone }
      V160 = HV225;  { Toilet facilities shared }
      V161 = HV226;  { Type of cooking fuel }
      V166 = HV234;  { Results of salt iodine test }
    else
      { !! if var does not exist in questionnaire, set to NA !! }
      V113 = 97;
      V115 = 997;
      V116 = 97;
      V119 = 7;
      V120 = 7;
      V121 = 7;
      V122 = 7;
      V123 = 7;
      V124 = 7;
      V125 = 7;
      V127 = 97;
      V128 = 97;
      V129 = 97;
      V153 = 7;
      V160 = 7;
      V161 = 97;
      V166 = 997;
    endif;
    { !! Religion }
    V130 = A130;
    if A130 = 6 then V130 = 96 endif;   { !! code 96 for other }
    { !! Ethnicity }
    V131 = A131;
    { Education in single years }
    V133 = SingEduc( V106, V107, xprm, xsec );
    { De facto place of residence }
    V134 = V026;
    { Usual resident or visitor }
    V135 = AH05(ALINE);
    { Number of household members }
    V136 = HV009;
    { Number of children 5 and under }
    V137 = HV014;
    { Number of eligible women in HH }
    V138 = HV010;
    if V135 = 1 then
      { De jure region of residence }
      { !! update value sets as those used in V101 }
      V139 = V101;
      { De jure type of place of res. }
      V140 = V102;
      { De jure place of residence }
      V141 = V134;
    else
      V139 = 97;
      V140 = 7;
      V141 = 7;
    endif;
    { Educational attainment }
    V149 = AttnEduc( V106, V107 );
    { Relationship to household head }
    V150 = HV101(V003);
    { Sex of household head }
    V151 = HV219;
    { Age of household head }
    V152 = HV220;

    { all women factors for ever married samples }
    if V020 then
      AWFACTT = AWFTOTAL;   { total }
      AWFACTU = AWFTYPE;    { urban/rural }
      AWFACTR = AWFREG;     { regions }
      AWFACTE = AWFEDUC;    { level of education }
      AWFACTW = AWFWLTH;    { wealth index }
    else
      AWFACTT = 100;
      AWFACTU = 100;
      AWFACTR = 100;
      AWFACTE = 100;
      AWFACTW = 100;
    endif;
    { Literacy }
    recode A117 -> V155;
            1:5 -> A117-1;
        notappl -> 2;
                -> missing;
    endrecode;
    { !!!! candidate to be removed from DHS-9 recode, it was removed since DHS-6 }	
    { Ever participated in a literacy program outside of primary }
    V156 = notappl;        { !! may exist in country }
    { Frequency of reading newspaper or magazine }
    recode A119 -> V157;
              3 -> 0;       { not at all }
              2 -> 1;       { less than once a week }
              1 -> 2;       { at least once a week  }
       {      ? -> 3;         almost every day      }
       missing  -> missing;
                -> 0;
    endrecode;
    { Frequency of listening to radio }
    recode A120 -> V158;
              3 -> 0;       { not at all }
              2 -> 1;       { less than once a week }
              1 -> 2;       { at least once a week  }
       {      ? -> 3;         almost every day      }
       missing  -> missing;
                -> 0;
    endrecode;
    { Frequency of watching television }
    recode A121 -> V159;
              3 -> 0;       { not at all }
              2 -> 1;       { less than once a week }
              1 -> 2;       { at least once a week  }
       {      x -> 3;         almost every day      }
       missing  -> missing;
                -> 0;
    endrecode;
    { Number of trips in last 12 months, not in DHS-8 }
    V167     = notappl;
    { Away for more than one month in last 12 months, not in DHS-8 }
    V168     = notappl;
    { Owns a mobile telephone }
    V169A    = YesNo( A122 );
    { Use mobile telephone for financial transactions }
    V169B    = YesNo( A930C );
	{ Is respondent's mobile phone a smart phone }
    V169C    = YesNo( A123 );
    { Has an account in a bank or other financial institution }
    V170     = YesNo( A930A );
    { Use of internet }
    recode A127 :: A128 -> V171A;
             2  ::      -> 0;     { never }
             1  ::   1  -> 1;     { Yes, last 12 months }
             1  ::   2  -> 2;     { Yes, before last 12 months }
             1  ::      -> 3;     { Yes, can't establish when }
                ::      -> A127;
    endrecode;
    { Frequency of using internet last month }
    recode A129 -> V171B;
              4 -> 0;       { not at all }
              3 -> 1;       { less than once a week }
              2 -> 2;       { at least once a week  }
              1 -> 3;       { almost every day      }
       missing  -> missing;
                -> 0;
    endrecode;
    { Respondent state of birth }
	V172   = A102;
    { Respondent country of birth }
	V173   = A103;
    { Month move to current place of residence }
	V174M  = A106M;
    { Year move to current place of residence }
	V174Y  = A106Y;
    { Reason for moving to current place of residence }
	V175   = A109;
    { Self reported health status }
	V176   = A112;
    { Money put/taken from bank account last 12 months }
	V177   = YesNo( A930B );

    { Wealth index variables }
    V190     = HV270;   { wealth index for combined from household }
    V191     = HV271;   { Wealth index factor score combined (5 decimals) }
    V190A    = HV270A;  { wealth index for urban/rural from household }
    V191A    = HV271A;  { Wealth index factor score for urban/rural (5 decimals) }

    { !! include women's background country specific variables here }

  endif;                { end of V015 = 1 }

{ ----------------------------------------------------------------------------}

PROC AWSEC2B_EDT
  if V015 = 1 then
    { extract births out of a pregnancy history }
	numeric porder = soccurs(AWSEC2B);      // to keep track of pregnancy order 
    n = count(AWSEC2B where A223 = 1);           { n = # of births - exclude other pregnancy outcomes }
    j = soccurs(AWSEC2B);                        { start with the last pregnancy (j) }
    if n then                                    { if at least one child }
      do i = 1 while i <= n                      { loop through births (exclude other pregnancy outcomes) }
        do while j & A223(j) <> 1           // find the last/prior birth
		  j = j - 1;
        enddo;
        BIDX(i)  = i;                          { index of births in reverse   }
        BORD(i)  = n-i+1;                      { birth order of child         }
        BIDXP(i) = porder-j+1;                 { index to pregnancy history }

        B0(i) = 0;                             { child is twin                }
        B1(i) = (A220C(j)-1) % 12 + 1;         { month of birth of child      }
        B2(i) = int( (A220C(j)-1)/12 ) + 1900; { year  of birth of child      }
        B3(i) = A220C(j);                      { century month code           }
        B4(i) = A219(j);                       { sex of child                 }
        B5(i) = YesNo( A224(j) );              { child still alive            }

        { variables placed here as they are needed to check the imputed age at death }
        { as well as the child's current age in years                                }
        { Imputed day of birth }
        B17(i) = A220DI(j);
        { Century Day Code of birth (CDC) }
        B18(i) = CDCode( B2(i), B1(i), B17(i) );
        { Current age of child in months (months since birth for dead children }
        B19(i) = int( (V008A-B18(i)) / DaysMonth );
        if A215(j) in 2:6 then
          // check that there are at least two live births at this date, not just two pregnancies 
          if count(AWSEC2B_EDT where A223 = 1 & (B3(i) = A220C | B18(i) in (A220CD-1):(A220CD+1))) > 1 then 
            // if there are at least two then set the twin code 
            do k = i while k & (B3(k) = A220C(j) | B18(k) in (A220CD(j)-1):(A220CD(j)+1)) by (-1) 
              B0(k) = B0(k) + 1; 
            enddo; 
          endif; 
        endif;

        {   Convertion of age at death to a common unit : DAYS           }
        if B5(i) = 0 then                            { if child is dead   }
          B6(i)  = unitnumb( A228U(j), A228N(j) );   { age at death (as in questionnaire) }
          xunit  = A228U(j);
          number = A228N(j);
          if xunit = 9 then
          { errmsg( 2201, i, B3(i), V008, xunit, number, 2, A228C(j) ); }
            xunit  = 2;
            number = A228C(j);
          else
            if number in 91:98,missing then
              recode xunit -> x;
                        1 -> 30;
                        2 -> 1;
                        3 -> 1/12;
              endrecode;
            { errmsg( 2201, i, B3(i), V008, xunit, number, xunit, int(A228C(j)*x) ); }
              number = int( A228C(j)*x );
            endif
          endif;
          { Age at death (months-imputed) }
          recode xunit -> b7i;
                    1  -> int(number/30);
                    2  -> number;
                    3  -> number*12;
          endrecode;
          if xunit = 3 & A228C(j) > b7i & A228C(j) <= b7i+11 then
            b7i = A228C(j)
          endif;
          if b7i > B19(i) then
            b7i = B19(i);
            if A228F(j) = 0 then
              errmsg( 2202, i, B3(i), V008, B19(i), xunit, number, b7i )
            endif
          endif;
          B7(i) = b7i;
          if b7i <> A228C(j) & A228F(j) = 0 then
            errmsg( 2203, i, b7i, A228C(j) )
          endif;
        else
          B8(i) = int( B19(i)/12 );  { Current age in years }
          if A226(j) = 1 then
            B9(i) = 0             { Child lives with respondent }
          elseif A226(j) = missing then
            B9(i) = missing
          else                    { Check coding scheme !! }
            B9(i) = 4             { Child lives elsewhere }
          endif
        endif;
        { Completeness of information for date of birth }
        B10(i) = A220F(j);        { !! check coding }
        { Flag for age at death }
        B13(i) = A228F(j);        { !! check coding }
        { Other pregnancy between births }
        B15(i) = YesNo( NAToZero(A222(j)) );
        { Child's line number in household }
        B16(i) = A227(j);
        { Duration of pregnancy in months }
        recode A221U(j) -> B20(i);  
		         1     -> A221N(j) * WeeksMonth;
			           -> A221N(j);
        endrecode;						
        { Duration of pregnancy }
        B21(i)  = unitnumb( A221U(j), A221N(j) );

        j = j - 1; 
      enddo;

      do i = 1 while i <= n
        x = i + 1;
        if B0(i) > 1 then          { B0 Child is twin }
          x = i + B0(i)
        endif;
        if x > n then
          B11(i) = notappl         { B11 is Preceding birth interval }
        else
          B11(i) = int( (B18(i)-B18(x))/DaysMonth );   { B18 is Date of birth in CDC }
        endif;
        do x = i - 1 while x > 0 & B0(x) > 1 by (-1)
        enddo;
        if x > 0 then
          B12(i) = int( (B18(x)-B18(i))/DaysMonth );
        else
          B12(i) = notappl         { B12 Succeeding birth interval }
        endif;
      enddo;
    endif;

    { now processing pregnancy history }
    idxb = 0;                            // to keep track of births
    j = soccurs(AWSEC2B);                      { start with last pregnancy (j) }
    n = soccurs(AWSEC2B);                      { n = # of pregnancies        }
    if n then                                  { if at least one pregnancy   }
      do i = 1 while i <= n
        j = n - (i-1);                         { index to reverse pregnancy order }
        PIDX(i)   = i;                         { index of pregnancy in reverse   }
		PIDXB(i)  = 0;                         { index to birth history }
		if A223(j) = 1 then
		  idxb = idxb + 1;
		  PIDXB(i) = idxb;                      
		endif;
        PORD(i) = j;                           { pregnancy order }

        P0(i) = 0;                             { multiple pregnancy outcome   }
        P1(i) = (A220C(j)-1) % 12 + 1;         { month of pregnancy outcome   }
        P2(i) = int( (A220C(j)-1)/12 ) + 1900; { year of pregnancy outcome    }
        P3(i) = A220C(j);                      { century month code           }
        P4(i) = A219(j);                       { sex of child                 }
        P5(i) = YesNo( A224(j) );              { child still alive            }

        { variables placed here as they are needed to check the imputed age at death }
        { as well as the child's current age in years                                }
        { Imputed day of pregnancy }
        P17(i) = A220DI(j);
        { Century Day Code of birth (CDC) }
        P18(i) = CDCode( P2(i), P1(i), P17(i) );
        { months since pregnancy }
        P19(i) = int( (V008A-P18(i)) / DaysMonth );
        if A215(j) in 2:6 then
          do k = i while k & (P3(k) = A220C(j) | P18(k) in (A220CD(j)-1):(A220CD(j)+1)) by (-1) 
            P0(k) = P0(k) + 1;
          enddo;
        endif;

        {   Convertion of age at death to a common unit : DAYS           }
        if P5(i) = 0 then                            { if child is dead   }
          P6(i)  = unitnumb( A228U(j), A228N(j) );   { age at death (as in questionnaire) }
          xunit  = A228U(j);
          number = A228N(j);
          if xunit = 9 then
          { errmsg( 2201, i, B3(i), V008, xunit, number, 2, A228C(j) ); }
            xunit  = 2;
            number = A228C(j);
          else
            if number in 91:98,missing then
              recode xunit -> x;
                        1 -> 30;
                        2 -> 1;
                        3 -> 1/12;
              endrecode;
            { errmsg( 2201, i, B3(i), V008, xunit, number, xunit, int(A228C(j)*x) ); }
              number = int( A228C(j)*x );
            endif
          endif;
          { Age at death (months-imputed) }
          recode xunit -> b7i;
                    1  -> int(number/30);
                    2  -> number;
                    3  -> number*12;
          endrecode;
          if xunit = 3 & A228C(j) > b7i & A228C(j) <= b7i+11 then
            b7i = A228C(j)
          endif;
          if b7i > P19(i) then
            b7i = P19(i);
            if A228F(j) = 0 then
              errmsg( 2202, i, P3(i), V008, P19(i), xunit, number, b7i )
            endif
          endif;
          P7(i) = b7i;
          if b7i <> A228C(j) & A228F(j) = 0 then
            errmsg( 2203, i, b7i, A228C(j) )
          endif;
        elseif P5(i) = 1 then             { if child alive } 
          P8(i) = int( P19(i)/12 );       { Current age in years }
          if A226(j) = 1 then
            P9(i) = 0                     { Child lives with respondent }
          elseif A226(j) = missing then
            P9(i) = missing
          else                    { Check coding scheme !! }
            P9(i) = 4             { Child lives elsewhere }
          endif
        endif;
        { Completeness of information for date of pregnancy outcome }
        P10(i) = A220F(j);        { !! check coding }
        { Flag for age at death }
        P13(i) = A228F(j);        { !! check coding }
        { Other pregnancy between pregnancies }
        P15(i) = YesNo( NAToZero(A222(j)) );
        { Child's line number in household }
        P16(i) = A227(j);
        { Duration of pregnancy in months }
        recode A221U(j) -> P20(i);  
		          1     -> A221N(j) * WeeksMonth;
				        -> A221N(j);
        endrecode;						
        { Duration of pregnancy }
        P21(i)  = unitnumb( A221U(j), A221N(j) );
		{ Pregnancy outcome declared by respondent }
		P30(i)  = A216(j);
		{ Baby cried, moved or breathed }
		P31(i)  = YesNo(A217(j));
		{ Pregnancy outcome reclassified }
		P32(i)  = A223(j);
		{ checking stillbirths & miscarriages, has to be consistent for analysis }
        if P32(i) = 2 & !P21(i) in 128:150,207:215 then    // stillbirths definition
		  errmsg( 2400, P32(i), P21(i) );
		endif;  
        if P32(i) = 3 & !P21(i) in 100:127,200:206 then    // stillbirths definition
		  errmsg( 2401, P32(i), P21(i) );
		endif;  

        { !! include pregnancy history country specific variables here }
        IDX92P(i) = i;                         { index in cs REC92 to pregnancy history }
		IDX92(i)  = PIDXB(i);                  { index in cs REC92 to birth history }
      enddo;

      do i = 1 while i <= n
        x = i + 1;
        if P0(i) > 1 then          { pregnancy outcome is multiple }
          x = i + P0(i)
        endif;
        if x > n then
          P11(i) = notappl         { P11 is Preceding pregnancy interval }
        else
          P11(i) = int( (P18(i)-P18(x))/DaysMonth );   { P18 is Date of pregnancy outcome in CDC }
        endif;
        do x = i - 1 while x > 0 & P0(x) > 1 by (-1)
        enddo;
        if x > 0 then
          P12(i) = int( (P18(x)-P18(i))/DaysMonth );
        else
          P12(i) = notappl         { P12 Succeeding pregnancy interval }
        endif;
      enddo;
    endif;

    { Set up calendar row for each birth in working storage }
    j = 0;
    i = 1;
    x = pos("B",VCAL(1)[1:vcallen]);
    while x do
      j = j + x;
      calrow(i) = j;
      while B0(i) > 1 do
        i = i + 1;
        calrow(i) = j
      enddo;
      x = pos("B",VCAL(1)[j+1:vcallen-j]);
      i = i + 1
    enddo;
    while i <= n do
      calrow(i) = 0;
      i = i + 1
    enddo;

  endif;       { end V015 = 1 }

{ ----------------------------------------------------------------------------}

PROC AWSEC2D_EDT
  if V015 = 1 then
    V201 = soccurs(REC21);                         { Total children ever born }
    V202 = count( REC21 where B4 = 1 & B9 = 0 );   { Sons at home }
    V203 = count( REC21 where B4 = 2 & B9 = 0 );   { Daughters at home }
    V204 = count( REC21 where B4 = 1 & B9 = 4 );   { Sons elsewhere }
    V205 = count( REC21 where B4 = 2 & B9 = 4 );   { Daughters elsewhere }
    V206 = count( REC21 where B4 = 1 & B5 = 0 );   { Sons who have died }
    V207 = count( REC21 where B4 = 2 & B5 = 0 );   { Daughters who have died }
    { Births in last five years }
    V208 = count( REC21 where B19 <= 59 );
    births3  =  count( REC21 where B19 < 12*vsecs & B5 = 1 );
    births35 =  count( REC21 where B19 < 12*hsecs & B5 = 1 );
    pregs3   =  count( REC22 where P19 < 12*psecs );
    { Births in past year }
    V209 = count( REC21 where B19 <= 12 );
    { Births in month of interview }
    V210 = count( REC21 where B3 = V008 );
    { Date of first birth (CMC) }
    if V201 then
      V211 = B3(V201);
    else
      V211 = notappl
    endif;
    { Age of respondent at 1st birth }
    if V201 then
      V212 = int( (V211 - V011)/12 );
    else
      V212 = notappl
    endif;
    { Currently pregnant }
    V213 = ( A232 = 1 );
    { Duration of current pregnancy in months and as in questionnaire }
    if V213 then
      V214  = V008 - A233C;
	  V214A = unitnumb( A233U, A233N );
    else
      V214  = notappl;
	  V214A = notappl;
    endif;
    { Time since last menstrual period }
    V215 = unitnumb( A236U, A236N );
    { Menstruated in last six weeks }
    recode V215 -> V216;
        100:142 -> 1;
        200:206 -> 1;
        300:301 -> 1;
                -> 0;
    endrecode;
    { Knowledge of ovulatory cycle }
    recode A241 :: A242 -> V217;
              1 ::    8 -> 8;
              1 ::    6 -> 6;
              1 ::    1 -> 4;
              1 ::  2:4 -> A242-1;
              1 ::      -> A242;
              2 ::      -> 5;
                ::      -> A241;
    endrecode;
    { Number of living children }
    V218 = count( REC21 where B5 = 1 );        //!!! For MIS this variable should be the sum of variables V202 to V205
    { Living children + current preg }
    V219 = V218;
    if V213 then
      V219 = V219 + 1;
    endif;
    { Living children + curr preg 6+ }
    recode V219 -> V220;
            < 6 -> V219;
                -> 6;
    endrecode;
    { Marriage to first birth int. }
    V221 = default;              { variable created at V509 }
    { Last birth to interview }
    if V201 then                //!!! For MIS use soccurs( REC21 ) instead of V201
      V222 = B19(1);
    else
      V222 = notappl
    endif;
    { Completeness of curr preg. inf }
    V223 = A233F;         { !! check coding }
    { Entries in birth history }
    V224 = soccurs(REC21);
    { Current pregnancy wanted }
    recode A234 -> V225;
             1  -> 1;
             2  -> A235 + 1;
                -> A234;
    endrecode;
    { Time since last period (comp) }
    { No flag, or never menstruated but had children }
    if A236F in 0,8 then         { !! check coding }
      if special(A236N) then
        V226 = missing
      elseif A236N > 90 then
        V226 = 900 + A236N
      else
        recode A236U -> V226;
                   1 -> int( A236N/30 );
                   2 -> int( A236N/4.3 );
                   3 -> A236N;
                   4 -> A236N*12;
                   9 -> 900 + A236N;
        endrecode
      endif
    { Duration exceeds interval }
    elseif A236F = 9 then     { !! check coding }
      V226 = 995
    else
      V226 = 997
    endif;
    { Flag for last period }
    V227 = A236F;        { !! check coding }
    { Ever had a terminated pregancy }
    V228 = ( count(REC22 where P32 in 2:4) > 0 );
    if V228 = 1 then      { ever had a termination }
	  for i in REC22 do
	    if P32 in 2:4 then
          { Month pregnancy ended }
          V229 = P1;
          { Year pregnancy ended }
          V230 = P2;
          { CMC pregnancy ended }
          V231 = P3;
          { Completeness of last term. inf }
          V232 = P10;
          x = pos("T",VCAL(1));
          if x then
            if V232 = 1 then
              if V017 + 80 - x <> V231 then
                errmsg( 2310, V231, V229, V230, x )
              endif
            else
              V231 = V017 + 80 - x;
              V232 = 2;
            endif
          endif;
          { Months when pregnancy ended }
          V233 = P20;
		  break;
        endif;
      enddo;	  
      { Other such pregnancies }
      V234 = ( count(REC22 where P32 in 2:4) > 1 );
    else
      V229 = notappl;
      V230 = notappl;
      V231 = notappl;
      V232 = notappl;
      V233 = notappl;
      V234 = notappl;
    endif;                  { end ever had a termination }
    { Index last child prior to maternity-health section (calendar) }
    V235 = 1;
    while V235 <= V224 & B3(V235) >= V017 do
      V235 = V235 + 1
    enddo;
    if V235 > V224 then V235 = 0 endif;
    { Pregnancies between last and interview }
    V237 = YesNo( A222A );
    { Births in last three years }
    V238 = count( REC21 where B19 < 36 );
    { Pregnancies terminated before calendar beginning }
    if V228 = 1 then
      if V230 < calbegy then
        V239 = 1
      else
        V239 = ( count(REC22 where P32 in 2:4 & P3 < V017) > 0 )
      endif
    else
      V239 = notappl
    endif;
    if count(REC22 where P32 in 2:4 & P3 < V017) then        { terminations prior to last 5 years }
	  for i in REC22 do
	    if P32 in 2:4 & P3 < V017 then
          { Month of last termination prior to calendar }
          V240 = P1;
          { Year of last termination prior to calendar }
          V241 = P2;
          { CMC termination ended prior to calendar }
		  V242 = P3;
          { Completeness of last termination date prior to calendar }
		  V243 = P10;
		  break;
        endif;
      enddo		
    else
      V240 = notappl;
      V241 = notappl;
      V242 = notappl;
      V243 = notappl;
    endif;                { end terminations prior to last 5 years  }
    { Can women get pregnant after birth and before period }
    V244  = YesNo( A243 );
    { Number of pregnancy losses }
    V245  = count(REC22 where P32 in 2:4);
    { Entries in pregnancy history }
    V246  = soccurs(REC22);
    if length( strip(A238) ) then        
      V247A = alfa2num( 1, A238, "A" );     { Collection of menstrual blood: reusable sanitary pads }
      V247B = alfa2num( 1, A238, "B" );     { Collection of menstrual blood: disposable sanitary pads } 
      V247C = alfa2num( 1, A238, "C" );     { Collection of menstrual blood: tampons } 
      V247D = alfa2num( 1, A238, "D" );     { Collection of menstrual blood: menstrual cup } 
      V247E = alfa2num( 1, A238, "E" );     { Collection of menstrual blood: cloth } 
      V247F = alfa2num( 1, A238, "F" );     { Collection of menstrual blood: toilet paper } 
      V247G = alfa2num( 1, A238, "G" );     { Collection of menstrual blood: cotton wool } 
      V247H = alfa2num( 1, A238, "H" );     { Collection of menstrual blood: underwear only } 
      V247I = notappl;                     { Collection of menstrual blood: CS } 
      V247J = notappl;                     { Collection of menstrual blood: CS } 
      V247K = notappl;                     { Collection of menstrual blood: CS } 
      V247L = notappl;                     { Collection of menstrual blood: CS } 
      V247X = alfa2num( 1, A238, "X" );     { Collection of menstrual blood: other } 
      V247Y = alfa2num( 1, A238, "Y" );     { Collection of menstrual blood: nothing } 
    endif;	
    { Able to change in privacy during last menstrual cycle }
	recode A239 -> V248;
	         2  -> 0;      // No
             3  -> 2;      // Away from home
                -> A239;
    endrecode;
    { Age at first menstrual period }
    V249  = A240;	
	if V215 = 996 then V249 = 96 endif;

	{ !! include reproduction country specific variables here }

  endif;

{ ----------------------------------------------------------------------------}

PROC AWSEC3A_EDT
  if V015 = 1 then
    { ever used of methods was removed from DHS-8, but it was left in the code in case }
    { it was used by the country. Pieces are commented between { ***USE*** } brackets  }
    do i = 1 while i <= 20
      { If method does not exist in questionnaire, set j to zero }
      { Recode => Questionnaire, contraceptive table }
      recode i -> j;         { Used to recode occurrences }
             1 -> 6;         { Pill }
             2 -> 3;         { IUD }
             3 -> 4;         { Injection }
             4 -> 0;         { Diaphragm, not used unless included in country }
             5 -> 7;         { Condom }
             6 -> 1;         { Female, male sterilization }
             7 -> 2;         { Female, male sterilization }
             8 -> 12;        { Rhythm/Periodic abstinence }
             9 -> 13;        { Withdrawal }
            10 -> methoth+1; { Other }
            11 -> 5;         { Norplant/implants }
            12 -> 0;         { Long term Abstinence - not used unless included in country }
            13 -> 11;        { Lactational amenorrhea (LAM) }
            14 -> 8;         { Female condom }
            15 -> 0;         { Foam or jelly, not used unless included in country }
            16 -> 9;         { Emergency contraception }
            17 -> methoth;   { other modern method }
            18 -> 10;        { Standard Days (SDM) }
            19 -> 0;         { CS methods }
            20 -> 0;         { CS methods }
               -> 0;
      endrecode;
      recode i          -> x;
           1:7,11,13:18 -> 1; { Modern methods }
           8:9,12       -> 2; { Traditional methods }
           10,19:20     -> 3; { Folkloric methods }
      endrecode;
      V304A(i) = x;

      if j then            { methods in contraceptive table }
        { !!! Note that there is a one to one correspondence between the contraceptive table and  }
        { current method. If that is not the case the code needs to be adjusted accordingly       }
        knows = A301(j);          { Knows method }
        evuse = notappl;
        cuse  = notappl;
        { !!! the instructions below should be used in case ever used was asked }
        { ***USE
        evuse = EVERUSE(j);       { Ever used method }
        if evuse = 1 then
          cuse  = ( pos(currmeth[i:1],A307) > 0 );     { Currently using method }
        endif;
        ***USE }
        if knows = 1 then
          cuse  = ( pos(currmeth[i:1],A307) > 0 );       { Currently using method }
        endif;

        recode knows -> xtemp;
                   1 -> 1;
                   2 -> 0;
             notappl -> 8;
           8,missing -> missing;
                     -> default;
        endrecode;
        if xtemp = default then errmsg( 3040, i, knows ) endif;
        V304(i) = xtemp;            { knows method }
        V305(i) = YesNo( evuse );   { Ever used method }
        V307(i) = cuse;             { Currently using method }
      elseif i in 4,15 then         { !! methods declared in current use but not in contraception table }
        V304(i) = 7;
        V305(i) = notappl;
        if i = 4 then
          V307(i) = ( pos("~",A307) > 0 );      { diaphragm }
        elseif i = 15 then
          V307(i) = ( pos("~",A307) > 0 );      { foam/jelly }
        endif;
      else
        V304(i) = 8;
        V305(i) = notappl;
        V307(i) = notappl;
      endif;
    enddo;

    { ----------------------------------------------------------------------------}
    {*****  Methods:
     1-Pill                   2-IUD                          3-Injection
     4-Diaphragm              5-Condom                       6-Fem.Sterlization
     7-male sterilization     8-Rhythm                       9-Withdrawal
    10-Other traditional     11-Norplant                    12-Prolonged abstinence
    13-Lactational amenorr   14-Female condom
    15-Foam or jelly         16-Emergency contraception     17-Other modern method
    18-Standard Days (SDM)   19-Specific method 2           20-Specific method 3
   ***** }
    V301 = 0;                              { Knows No Method }
    V302 = notappl;                        { !! Used  No Method, change to zero if ever used asked in contraceptive table }
    do i = 1 while i <= 20
      if V304(i) = 1 & V304A(i) < 4 - V301 then
        V301 = 4 - V304A(i);
      endif;
      if V305(i) = 1 & V304A(i) < 4 - V302 then
        V302 = 4 - V304A(i);
      endif;
    enddo;

    { ever used anything or tried to delay or avoid getting pregnant }
    { !!! V302A should be set to NA if question A320 wasn't asked    }
    V302A = NAToZero( YesNo(A320) );
    if A307N <> notappl then V302A = 2 endif;          { in case there is no calendar or the woman is currently using but had a baby in the month of the interview }
    do i = 1 while i <= 80 & V302A in 0,1
      if pos( VCAL(1)[i:1], strip(vcalmeth) ) then
        V302A = 2;                                  { used in calendar }
        break
      endif;
    enddo;
  endif;                { end V015 = 1 }

{ ----------------------------------------------------------------------------}

PROC AWSEC3B_EDT
  if V015 = 1 then
    { Living children at first use }
    V310 = notappl;               { !! may be used by country }
    { Children at first use (grpd) }
    recode V310 -> V311;
        notappl -> 5;
        missing -> missing;
             <5 -> V310;
                -> 4;
    endrecode;
    V311 = notappl;               { !! delete this instruction if V310 used by country }
    { Current contraceptive method }
    recode A307N -> V312;             { !! }
         notappl -> 0;
               6 -> 1;                { Pill }
               3 -> 2;                { IUD }
               4 -> 3;                { Injection }
         {       -> 4;                  Diaphragm }
               7 -> 5;                { Male condom }
               1 -> 6;                { Female sterilization }
               2 -> 7;                { male sterilization }
              12 -> 8;                { Periodic Abstinence }
              13 -> 9;                { Withdrawal }
              96 -> 10;               { Other, traditional }
               5 -> 11;               { Implants }
              11 -> 13;               { Lactational amenorrhrea method (LAM) }
               8 -> 14;               { Female condom }
         {       -> 15;                 Foam and jelly }
               9 -> 16;               { Emergency contraception }
              95 -> 17;               { other modern method }
              10 -> 18;               { Standard days method (SDM) }
                 -> A307N;            { Special codes }
    endrecode;
    { Current use by method type }
    recode V312       -> V313;             { Sets Current Method, grp Trad. vs Modern }
              0       -> 0;
         1:7,11,13:18 -> 3;
         8:9,12       -> 2;
                      -> 1;
    endrecode;
    if V312 <> 0 then     { Date of start of use of method -- not just sterilization }
      { Month of start of use of method }
      V315 = (A314C-1) % 12 + 1;
      { Year of start of use of method }
      V316 = int( (A314C-1) / 12 ) + 1900;      { 4 digit year }
      { Date of start of use of method (CMC) }
      V317 = A314C;
      { Completeness of information for date started using method  }
      V318 = A314F;               { !! check coding }
    else
      V315 = notappl;
      V316 = notappl;
      V317 = notappl;
      V318 = notappl;
    endif;
    if V312 in 6,7 then                           { only if sterilized }
      V319 = int((V008 - V317) / 24) + 1;         { years since sterilization in two year groups }
      if V319 > 6 then V319 = 6 endif;            { if more than twelve years }
      V320 = int( ( ((V317-V011)/12) - 15) / 5);  { age at sterilization in 5 year groups }
      if V320 < 1 then V320 = 1 endif;            { if less than age 20 }
      { Marital duration at sterilization }
      V321  = default;              { variable to be created when generating V509 }
      V321A = default;              
      { Parity at sterilization }
      V322 = count( REC21 where B3 <= V317 );
      if V322 > 5 then V322 = 5 endif;
    endif;

    { brand of pills/condoms }
    if V312 = 1 then              { currently using pills }
      { Brand of pill used }
      V323   = A310;
    elseif V312 = 5 then          { currently using condoms }
      { Brand of condom used }
      V323A  = A311;
    endif;

    { cost of current method }
    V325A = notappl;              { !! may exist in country };
    if V325A = 995 then
      V325A = 9999995               { free, 7 digits }
    elseif V325A = 998 then
      V325A = 9999998               { DK, 7 digits }
    endif;

    if V313 = 3 then              { Modern method }
      if V312 in 6:7 then         { Sterilization method }
        V326  = A312;
        V3A07 = A312;
      { **** begins here
      else
          column source of method in calendar dropped in DHS-V
          however code was left here in case the column was used by country

        { Search calendar for start of episode of use }
        { but first check last method in calendar is same as current method }
        meth = V312; if V312 = missing then meth = pos("?",vcalmeth) endif;
        mcode = VCAL(1)[V018:1];
        if !pos(mcode,vcalmeth[meth:1]) then      { Method not same }
          errmsg( 3260, V312, VCAL(1)[V018:1] )
        endif;
        { Find start of use }
        do x = 0 while x < V019 & pos( mcode, VCAL(1)[V018+x:1] )
        enddo;
        {recode to 11-16,21-26,31-36 }{11111111122222222223333333333}
                                      {12345678901234567890123456789}
        src = pos(VCAL(5)[V018+x-1:1],"123456~~~~ABCDEF~~~~KLM~~X~~?");
        if src then
          V3A07 = src+10; if V3A07 = 39 then V3A07 = missing endif;
        elseif x = V019 & VCAL(5)[V018+x-1:1] = " " then
          V3A07 = 97; { No source - started use before calendar }
        else
          V3A07 = missing; { Can't find code for source }
          errmsg( 3261, V018+x-1, VCAL(5)[V018+x-1:1] )
        endif;
        if A330 <> notappl then   { Last source }
          V326 = A330
        else
        { Assume first source for this episode is the last source }
          V326 = V3A07
        endif
      **** ends here }
      else
        { if questions for first and last source present, use following instructions }
        V326  = A330;
        V3A07 = A322;
      endif
    else
      V326  = notappl;
      V3A07 = notappl;
    endif;
    { Last source for users by type }
    recode V326 -> V327;             { !! }
        notappl -> notappl;
        missing -> missing;
          11:13 -> 1;              { Govt. hospital/clinic/health center/pharmacy }
          14:16 -> 2;              { Govt. home/community delivery }
          31:36 -> 3;              { NGOs }
    21,22,24:27 -> 4;              { Private hospital/clinic/delivery }
             23 -> 5;              { Pharmacy }
          41:46 -> 6;              { Shop/church/friend/relative }
             96 -> 7;              { Other }
             98 -> 8;              { Don't know }
                -> default;
    endrecode;
    if V327 = default then errmsg( 3270, V326 ) endif;
    { Months of use of current method }
    if V312 <> 0 then                     { Currently using a method }
      if V246 & V317 < P3(1) then         { Method use started before last birth? }
        V337 = P19(1)
      else
        V337 = V008 - V317
      endif;
      if V019 <> 0 & V337 >= V019 then V337 = 95 endif;
    else
      V337 = notappl
    endif;

    { V359 - Last method disc. last 5 years }
    { V360 - Reason of last discontinuation }
    imax = V018 + 59;
    if vcallen < imax then imax = vcallen endif;
    do i = V018 while i <= imax & pos(" ",VCAL(2)[i:1])
    enddo;
    if i > imax then
      V359 = notappl;
      V360 = notappl;
    else
      if pos("?", VCAL(1)[i:1]) then       { Missing - code ? }
        V359 = missing
      else
        V359 = pos(VCAL(1)[i:1], vcalmeth);
      endif;
      if pos("?", VCAL(2)[i:1]) then       { Missing - code ? }
        V360 = missing
      elseif pos("K", VCAL(2)[i:1]) then   { DK - code K }
        V360 = 98
      else
        V360 = pos(VCAL(2)[i:1], vcaldisc);
      endif
    endif;

    { Pattern of use }
    { use in open interval - V361 }
    obiuse = 0;
    { Search for method use or birth in calendar }
    do i = V018 while i <= vcallen & pos(VCAL(1)[i:1], "0PT")
    enddo;
    if i <= vcallen then
      obiuse = pos(VCAL(1)[i:1], vcalmeth);      { Used in calendar ? }
    else
      obiuse = 0;                                { Used before calendar ? }
    endif;
    V361 = 4;
    if V312 <> 0 then                    { currently using }
      V361 = 1
    else
      if obiuse then
        V361 = 2                         { used in OBI (past users) }
      else
        if V302 > 0 | V302A > 0 then     { used before last birth but not since}
          V361 = 3
        endif
      endif
    endif;

    { Intention to use }
    if V361 > 1 then                      { if not currently using }
      recode A812 -> V362;     { no question now for intention to use in next 12 months, but old coding kept }
                1 -> 2;        { intend to use in the future }
                2 -> 5;        { does not intend to use }
                8 -> 4;        { don't know - not sure }
          missing -> missing;
                  -> default;
      endrecode;
      if A812 = notappl then
        if A804 = 3 | A805U = 9 & A805N = 94 then
          V362 = 5                          { Can't get pregnant, assume not intending to use }
        elseif A722 = 0 then
          V362 = 6                          { Never had sex }
        elseif V020 then
          V362 = 5                          { For ever married samples, assume not intending to use }
        endif;
      endif;
    endif;
    { Preferred future method }
    { !! maybe present in country
    recode meth -> V363;             { !! }
        Notappl -> Notappl;
              3 -> 1;                { Pill }
              4 -> 2;                { IUD }
              5 -> 3;                { Injection }
           {  0 -> 4;                  Diaphragm }
              7 -> 5;                { Condom }
              1 -> 6;                { Female sterilization }
              2 -> 7;                { male sterilization }
             12 -> 8;                { Periodic Abstinence }
             13 -> 9;                { Withdrawal }
             96 -> 10;               { Other traditional }
              6 -> 11;               { Implants }
             11 -> 13;               { Lactational amenorrhrea method (LAM) }
              8 -> 14;               { Female condom }
            { 0 -> 15;                 Foam and jelly }
              9 -> 16;               { Emergency contraception }
             95 -> 17;               { Other modern method }
             10 -> 18;               { Standard Days method (SDM) }
                -> meth;             { Special codes }
    endrecode;
    !! }

    { Contraceptive use & intention }
    V364 = 4;                           { does not intend to use }
    if V313 = 3 then                    { currently using a modern method }
      V364 = 1
    elseif V313 <> 0 then               { currently using a traditional method}
      V364 = 2
    elseif V362 = 6  then               { never had sex }
      V364 = 5
    elseif A812 = 1 then                { not using but intend to use }
      V364 = 3
    endif;
    { Wanted last child/last pregnancy }
    V367  = notappl;
    V367A = notappl;
    if pregs3 then
	  for i in AWSEC04 do
	    if A405 = 1 then
          recode A408(i) -> V367;
                   1     -> 1;
                   2     -> A409(i) + 1;
                         -> A408(i);
          endrecode;
		  break;
		endif;
	  enddo;
      recode A408(1) -> V367A;
               1     -> 1;
               2     -> A409(1) + 1;
                     -> A408(1);
      endrecode;
    endif;

    { shown package of pills/condoms }
    if V312 = 1 then              { currently using pills }
      V372   = notappl;           { !! may be used by country }
    elseif V312 = 5 then          { currently using condoms }
      V372A  = notappl;           { !! may be used by country }
    endif;

    { Variables V375a to V376a are candidates for removal from DHS-9 as they haven't been used for a long time }  
    { V375A = A810; }       { variable is now alpha - multiple response - left, but see also V3A08A-Z }
    { Main reason not to use a meth. }
    V376 = notappl;         { !! may be used by country, check logic in DHS-V }
    { Would ever use method if marr. }
    V376A = notappl;        { may be used by country }

    { knowledge of source for any method }
    { in DHS-8 source wasn't asked to users of traditional methods including LAM }
    if V326 <> notappl then
      V379 = V326
    else
	  if A729 <> notappl then
        V379 = A729           // based on source from last time condom was usd
      elseif A331 = 1 then
        V379 = 94             // know source, place wasn't asked
      elseif A331 = 2 then
        V379 = 98             // don't know source
      else
        V379 = 95	          // source not asked
      endif
    endif;
    { Source known for any method }
    recode V379 -> V380;             { !! }
        notappl -> notappl;
        missing -> missing;
          11:13 -> 1;
          14:16 -> 2;
          31:36 -> 3; 
       21,23:26 -> 4;
             22 -> 5;
          41:46 -> 6;
          94,96 -> 7;
		     95 -> missing;
             98 -> 8;
                -> default;
    endrecode;

    V384A = YesNo( A815A );     { Heard family planning on radio last months }
    V384B = YesNo( A815B );     { Heard family planning on TV last months }
    V384C = YesNo( A815C );     { Heard family planning on newspaper last months }
    V384D = YesNo( A815D );     { Heard family planning by mobile phone text messages }
    V384E = YesNo( A815E );     { Seen about family planning on facebook, twitter, instagram, others }
    V384F = YesNo( A815F );     { Seen about family planning on poster, brochure }
    V384G = YesNo( A815G );     { Seen about family planning on outdoor sign, billboard }
    V384H = YesNo( A815H );     { Heard family planning at community meetings events }
    V384I = notappl;            { !!! Heard/seen family planning CS }
    V384J = notappl;            { !!! Heard/seen family planning CS }
    V384K = notappl;            { !!! Heard/seen family planning CS }
    V393  = YesNo( A332 );      { Visited by filedworker in last 12 months }
    V393A = YesNo( A333 );      { Did fieldworker talk about family planning }
    V394  = YesNo( A334 );      { Visited health facility last 12m }
    V395  = YesNo( A335 );      { At health facility, told of FP }

    { logic when source of methods is multiple answer }
    { !!! make sure to properly assign labels to variables }
    { *** knowledge of method removed from DHS-VII, but it may have been used
    if A331 <> notappl then     { if applicable }
      V3A00A = alfa2num( A331, ZSOURCE, "A" );       { govt hospital }
      V3A00B = alfa2num( A331, ZSOURCE, "B" );       { !! CS public }
      V3A00C = alfa2num( A331, ZSOURCE, "C" );       { !! CS public }
      V3A00D = alfa2num( A331, ZSOURCE, "D" );       { !! CS public }
      V3A00E = alfa2num( A331, ZSOURCE, "E" );       { !! CS public }
      V3A00F = alfa2num( A331, ZSOURCE, "F" );       { !! CS public }
      V3A00G = notappl;                           { !! CS public }
      V3A00H = notappl;                           { !! CS public }
      V3A00I = notappl;                           { !! CS public }
      V3A00J = alfa2num( A331, ZSOURCE, "G" );       { pvt hospital/clinic }
      V3A00K = alfa2num( A331, ZSOURCE, "H" );       { pharmacy }
      V3A00L = alfa2num( A331, ZSOURCE, "I" );       { pvt doctor }
      V3A00M = alfa2num( A331, ZSOURCE, "J" );       { !! CS Private }
      V3A00N = alfa2num( A331, ZSOURCE, "K" );       { !! CS Private }
      V3A00O = alfa2num( A331, ZSOURCE, "L" );       { !! CS Private }
      V3A00P = notappl;                           { !! CS Private }
      V3A00Q = notappl;                           { !! CS Private }
      V3A00R = notappl;                           { !! CS Private }
      V3A00S = alfa2num( A331, ZSOURCE, "M" );       { !! CS other }
      V3A00T = alfa2num( A331, ZSOURCE, "N" );       { !! CS other }
      V3A00U = alfa2num( A331, ZSOURCE, "O" );       { !! CS other }
      V3A00V = notappl;                           { !! CS other }
      V3A00W = notappl;                           { !! CS other }
      V3A00X = alfa2num( A331, ZSOURCE, "X" );       { other }
    endif;
    **** end comment of multiple source for methods }
    { special cases, no source(Y), any source(Z) }
    if A331 = missing then
      V3A00Y = missing;
      V3A00Z = missing;
    elseif A331 = 2 then
      V3A00Y = 1;
      V3A00Z = 0;
    elseif A331 = 1 then
      V3A00Y = 0;
      V3A00Z = 1;
    endif;

    { Told sterilization would mean no more children }
    V3A01 = notappl;        { !! may be used by country }
    if A324 <> notappl then
      V3A02 = YesNo( A324 );  { Told about side effects for sterilization }
    else
      V3A02 = YesNo( A323 );  { Told about side effects }
    endif;
    V3A03 = notappl;        { Told about side effects by health or FP worker }
    V3A04 = YesNo( A325 );  { Told how to deal with side effects }
    V3A05 = YesNo( A326 );  { Told about other FP methods }
    V3A06 = notappl;        { Told about other FP methods by health or FP worker }

    { reasons for not using a method }
    if length( strip(A810) ) then         { if applicable }
      V3A08A  = alfa2num( 1, A810, "A" );      { not married }
      V3A08B  = alfa2num( 1, A810, "B" );      { not having sex }
      V3A08C  = alfa2num( 1, A810, "C" );      { infrequent sex }
      V3A08D  = alfa2num( 1, A810, "D" );      { menopausal/hysterectomy }
      V3A08E  = alfa2num( 1, A810, "E" );      { subfecund/infecund }
      V3A08F  = alfa2num( 1, A810, "F" );      { postpartum/amenorrheic }
      V3A08G  = alfa2num( 1, A810, "G" );      { breastfeeding }
      V3A08H  = alfa2num( 1, A810, "H" );      { fatalistic }
      V3A08I  = alfa2num( 1, A810, "I" );      { respondent opposed }
      V3A08J  = alfa2num( 1, A810, "J" );      { husband/partner opposed }
      V3A08K  = alfa2num( 1, A810, "K" );      { others opposed }
      V3A08L  = alfa2num( 1, A810, "L" );      { religious prohibition }
      V3A08M  = alfa2num( 1, A810, "M" );      { knows no method }
      V3A08N  = alfa2num( 1, A810, "N" );      { knows no source }
      V3A08O  = notappl;                       { !! health concerns, doesn't exist in DHS-8 }
      V3A08P  = alfa2num( 1, A810, "S" );      { other side effects }
      V3A08Q  = alfa2num( 1, A810, "T" );      { lack of access/too far }
      V3A08R  = alfa2num( 1, A810, "U" );      { costs too much }
      V3A08S  = alfa2num( 1, A810, "O" );      { inconvenient to use }
      V3A08T  = alfa2num( 1, A810, "R" );      { interferes with body's normal process }
      V3A08U  = alfa2num( 1, A810, "V" );      { preferred method not available }
      V3A08V  = alfa2num( 1, A810, "W" );      { no method available }
      V3A08W  = alfa2num( 1, A810, "P" );      { changes in menstrual bleeding }
      V3A08AA = alfa2num( 1, A810, "Q" );      { methods could cause infertility }
      V3A08AB = notappl;                       { !!CS }
      V3A08AC = notappl;                       { !!CS }
      V3A08AD = notappl;                       { !!CS }
      V3A08AE = notappl;                       { !!CS }
      V3A08AF = notappl;                       { !!CS }
      V3A08X  = alfa2num( 1, A810, "X" );      { other }
      V3A08Z  = alfa2num( 1, A810, "Z" );      { don't know }
    endif;

	{ !!! candidates to be removed from DHS-9 as it hasn't been used since DHS-6 }
    { number of pill cycles/condoms }
    if V312 = 1 then              { currently using pills }
      V3A09A = notappl;           { !! may be used by country }
    elseif V312 = 5 then          { currently using condoms }
      V3A09B = notappl;           { !! may be used by country }
    endif;
	
	{ Probe for respondent/partner sterilized }
	V3A10  = A304; 
	{ Type of injectable based on picture observation }
	V3A11  = A308; 
	{ Person who injected last time }
	V3A12  = A309; 
	{ Used emergency contraception in past 12 months }
	V3A13  = YesNo(A318); 
	{ Could switch method if wanted/needed }
	V3A14  = YesNo(A328); 

    { !! include contraception country specific variables here }

  endif;               { end of V015 = 1 }

{ ----------------------------------------------------------------------------}

PROC AWSEC04_EDT
  if V015 = 1 then
    idx = 0;
    for k in REC22 do                 // store index to births
      idxbirths(k) = 0;
      if P32 = 1 then
        idx = idx + 1;
        idxbirths(k) = idx;
      endif;
    enddo;
    yngst = 1;                        { to control youngest child }
    for i in AWSEC04_EDT do
      idx = V246 - A404 + 1;          
      if i <> idx then errmsg( 4100, i, idx ) endif;
      if P19(idx) < 12*psecs then
	    MIDX(i)  = idxbirths(i);       // index to birth history
        MIDXP(i) = idx;               // index to pregnancy history

        { Tetanus related variables }
        if A405 = 1 then   { most recent live birth }
          { Tetanus injection before birth }
          if A420 in 8,missing then
            M1(i) = A420;
          else
            M1(i) = NAtoZero( A421 );
          endif;
          { Tetanus injection before pregnancy }
          if !M1(i) in 2:7 then     { two or more tetanus injections }
            M1A(i) = NAtoZero( A424 );
            if A423 in 8,missing then
              M1A(i) = A423;
            endif;
          endif;
          { !!! variables M1B, M1C, and M1E candidates to be removed from DHS-9, only used in DHS-5 }		  
          if A423 = 1 then
            M1B(i) = notappl;       { !! Month last tetanus injection before pregnancy, may be used by country }
            M1C(i) = notappl;       { !! Year last tetanus injection before pregnancy, maybe used by country }
            M1D(i) = A425;          { Years ago received last tetanus injection before pregnancy }
            { !! century month code for last tetanus injection. Variable M1E should be set to notappl if month and year weren't asked }
            if M1B(i) in 1:12 & M1C(i) in 1970:2026 then
              M1E(i) = cmcode( M1B(i), M1C(i) );
            elseif M1C(i) in 1970:2026 then
              M1E(i) = random( cmcode(1, M1C(i)), cmcode(12, M1C(i)) );
            elseif A425 in 0:40 then
              M1E(i) = random( V008-M1D(i)*12-11, V008-M1D(i)*12 );
            else
              M1E(i) = 9996;
            endif;
          endif;
        endif;     { end A405 i = 1 }

        { Prenatal checkup }
        if A405 in 1,3 then                      // Most recent live-birth/stillbirth 
          M2A(i) = alfa2num( A412, A414, "A" );  { doctor }
          M2B(i) = alfa2num( A412, A414, "B" );  { !! CS Health professional }
          M2C(i) = alfa2num( A412, A414, "C" );  { !! CS Health professional }
          M2D(i) = notappl;                      { !! CS Health professional }
          M2E(i) = notappl;                      { !! CS Health professional }
          M2F(i) = notappl;                      { !! CS Health professional }
          M2G(i) = alfa2num( A412, A414, "D" );  { tradit. birth attendant }
          M2H(i) = alfa2num( A412, A414, "E" );  { !! CS other person }
          M2I(i) = notappl;                      { !! CS other person }
          M2J(i) = notappl;                      { !! CS other person }
          M2K(i) = alfa2num( A412, A414, "X" );  { other }
          M2L(i) = notappl;                      { !! CS }
          M2M(i) = notappl;                      { !! CS }
          recode A412 -> M2N(i);                 { none }
                   1  -> 0;         { No: some antenatal care }
                   2  -> 1;         { Yes: no antenatal care }
                      -> A412;
          endrecode;
        endif;

        { Assistance at delivery }
		if A405 in 1:4 then                      // live births/stillbirts
          M3A(i) = alfa2num( 1, A434, "A" );       { doctor }
          M3B(i) = alfa2num( 1, A434, "B" );       { !! CS Health professional }
          M3C(i) = alfa2num( 1, A434, "C" );       { !! CS Health professional }
          M3D(i) = notappl;                        { !! CS Health professional }
          M3E(i) = notappl;                        { !! CS Health professional }
          M3F(i) = notappl;                        { !! CS Health professional }
          M3G(i) = alfa2num( 1, A434, "D" );       { tradit. birth attend }
          M3H(i) = alfa2num( 1, A434, "E" );       { !! CS other person }
          M3I(i) = notappl;                        { !! CS other person }
          M3J(i) = notappl;                        { !! CS other person }
          M3K(i) = alfa2num( 1, A434, "X" );       { other }
          M3L(i) = notappl;                        { !! CS }
          M3M(i) = notappl;                        { !! CS }
          M3N(i) = alfa2num( 1, A434, "Y" );       { no one }
        endif;		  


        if A405 in 1,2 then                 // live births                       
          { M4 - Duration of breastfeeding }
          { M5 - months of breastfeeding }
          if A480 = missing then         { missing }
            M4(i) = missing;
            M5(i) = missing;
          elseif A480 = 2 then           { never breastfed }
            M4(i) = 94;
            M5(i) = 94;
          elseif A485 = 1 then
            M4(i) = 95;                  { still breastfeeding }
            M5(i) = P19(i);
          else
            M4(i) = 93;                  { not currently breastfeeding, but ever breasted }
            M5(i) = 93;                  { not currently breastfeeding, but ever breasted }
            { !! if breastfeeding duration collected by country, set M4/M5 as was done in DHS-V }
          endif;
          { Handling of flagged cases }
          { !! flag should be present if breastfeeding duration collected
          if FLAGBREAST = 1 then              { !! check coding }
            M5(i) = 97
          elseif FLAGBREAST = 2 & M5(i) then
            M5(i) = M5(i) - 1
          elseif FLAGBREAST = 3 then
            M5(i) = B7(i)
          endif;
          !! }
        endif;		  

        { M6 - Duration of amenorrhea }
        { M7 - months of amenorrhea }
        if i = 1 | P3(i) = P3(1) then            // in DHS-8 asked for the last outcome
          if A476(1) = 2 then           { period has not returned }
            M6(i) = 96;
            do j = i-1 while j & P3(j) = P3(i) by (-1)
            enddo;
            if j then
              M7(i) = P3(j) - P3(i) - 9;
              if M7(i) < 0 then M7(i) = 0 endif;
            elseif V213 then
              M7(i) = P19(i) - V214;
            else
              M7(i) = P19(i);
            endif;
          elseif A476 = missing then
            M6(i) = missing;
            M7(i) = missing;
          else
            M6(i) = 98;        // !!! assign duration of amenorrhea if asked to M6 and M7
            M7(i) = 98;
          endif;
        endif;		  

        { M8 - Duration of abstinence }
        { M9 - Months of abstinence }
        if i = 1 | P3(i) = P3(1) then            // in DHS-8 asked for the last outcome
          if P3(i) = P3(1) & A478(1) = 2 then       { still abstaining  }
            M8(i) = 96;
            M9(i) = P19(i);
          elseif A478 = missing then
            M8(i) = missing;
            M9(i) = missing;
          else
            M8(i) = 98;        // !!! assign duration of abstinence if asked to M8 and M9
            M9(i) = 98;
          endif;
        endif;

        { Time wanted pregnancy }
        recode A408 -> M10(i);
                 1  -> 1;
                 2  -> A409 + 1;
                    -> A408;
        endrecode;
        { Time would have waited }
        M11(i) = unitnumb( A410U, A410N );

        if A405 in 1,3 then            // more recent birth and stillbirth
		  if A412 = 1 then
            { Timing of 1st antenatal check in months and as in questionnaire }
            recode A416U -> M13(i);
			         1   -> A416N * weeksmonth;
					     -> A416N;
            endrecode;
            M13A(i) = unitnumb( A416U, A416N );
          endif;			
          { Antenatal visits for pregnancy }
          M14(i) = NAtoZero( A417 );
        endif;
		
		if A405 in 1:4 then            // births & stillbirths
          { Place of delivery }
          M15(i) = A435;
          { Delivery by caesarian section }
          M17(i) = NAtoZero( YesNo(A436) );
          { Timing on decision for caesarian section }
          M17A(i) = notappl;
        endif;
		
		if A405 in 1:2 then            // births 
          { Size of child at birth }
          M18(i) = A441;         { !! check coding is standard }

          { Birth weight (kilos - 3 dec.) }
          number = A443N;
          xunit = 0;           { If kilos => use Xunit = 0; If pounds => use Xunit = 2, if grams => Xunit = 1 !! }
          if xunit = 2 then    { convert pounds and ounces to pounds with decimals }
            ounces = number%100;
            pounds = int(number/100)+(ounces/16);
          endif;
          recode A442 :: xunit :: number  -> M19(i);
                    2 ::       ::         -> 9996;
                    8 ::       ::         -> 9998;
              missing ::       ::         -> missing;
                      ::       :: missing -> missing;
                      ::       ::   9.998 -> 9998;
                      ::    9  ::         -> missing;
                      ::    0  ::         -> number*1000;                { kilos }
                      ::    1  ::         -> number;                     { grams }
                      ::    2  ::         -> int(1000*pounds/2.20462);   { pounds }
                      ::       ::         -> default;
          endrecode;
          { Weight at birth card/recall }
          M19A(i) = NAtoZero( A443U );
          if A442 = 8 | A443N = 9.998 then
            M19A(i) = 8
          elseif A442 = missing then
            M19A(i) = 9
          endif;
        endif;		  

        { flag for breastfeeding }
        M27(i) = notappl;        { !! if breastfeeding duration was asked, variable shouldn't be notappl }
        { flag for amenorrhea }
        M28(i) = notappl;
        { flag for abstinence }
        M29(i) = notappl;

        { When child put to breast }
        M34(i) = unitnumb( A482U, A482N);

        if P5(MIDXP(i)) = 1 then    { for living children }
          // !!! candidates to be removed as they wer removed since DHS-6		  	
          if M4(i) = 95 then
            { Times breastfed during night }
            M35(i) = notappl;                     { !! may be used by country }
            { Times breastfed during day }
            M36(i) = notappl;                     { !! may be used by country }
          endif;
          { Drank from bottle with nipple }
          M38(i) = NAtoZero( YesNo(A486) );
		  
          { Times ate solid, semi-solid or soft food yesterday }
          { !!! youngest child born in last 2/(3) years and living with respondent }
          if yngst & P9(i) = 0 & P19(i) < 24{/36} then
            M39A(i) = YesNo( A639 );
            if A639 = notappl then M39A(i) = 1 endif;
            M39(i)  = NAtoZero( A640 );
            yngst = 0;
          endif;
        endif;

        if A405 in 1,3 then            // more recent birth and stillbirth
          M42A(i) = YesNo( A418H );   { !! weighted, in DHS-8 comes from maternal healthcare module }
          M42B(i) = notappl;          { !! height taken }
          M42C(i) = YesNo( A418A );   { blood pressure }
          M42D(i) = YesNo( A418B );   { urine sample }
          M42E(i) = YesNo( A418C );   { blood sample }
          M42F(i) = YesNo( A418D );   { listen to baby's heartbeat }
          M42G(i) = YesNo( A418E );   { talk about foods to eat }
          M42H(i) = YesNo( A418F );   { talk about breastfeeding }
          M42I(i) = YesNo( A418G );   { ask about vaginal bleeding }
          M42J(i) = YesNo( A418I );   { !! talk about when baby is due, In DHS-8 comes from maternal healthcare module  }
          M42K(i) = YesNo( A418J );   { !! pay attention to baby movements, In DHS-8 comes from maternal healthcare module  }
          M42L(i) = notappl;          { !! CS }
          M42M(i) = notappl;          { !! CS }
          M42N(i) = notappl;          { !! CS }
          M43(i)  = YesNo( AMH1 );    { !! pregnancy complications, In DHS-8 comes from maternal healthcare module }
          M44(i)  = YesNo( AMH2 );    { !! where to go if complications, In DHS-8 comes from maternal healthcare module }
          M45(i)  = YesNo( A426 );    { iron tablets }
          M46(i)  = A428;             { Days tablets or syrup taken }
		  { !! candidates to be removed from DHS-9 as they were removed starting with DHS-6 }
          M47(i)  = notappl;          { !! difficult day vision }
          M48(i)  = notappl;          { !! night blindness }

          { drugs for Malaria }
          { !! in DHS7 & 8 only Fansidar was asked }
          M49A(i) = YesNo( A431 );               { fansidar }
          M49B(i) = notappl;                     { !! chloroquine }
		  { !! candidates to be removed from DHS-9 as they were removed starting with DHS-6 }
          M49C(i) = notappl;                     { !! CS }
          M49D(i) = notappl;                     { !! CS }
          M49E(i) = notappl;                     { !! CS }
          M49F(i) = notappl;                     { !! CS }
          M49G(i) = notappl;                     { !! CS }
          M49X(i) = notappl;                     { !! other }
          M49Z(i) = notappl;                     { !! don't know }
          { logic to generate M49Y - nothing was taken }
          M49Y(i) = notappl;
 
          { Type of bednet(s) child slept under last night }
          if A405 = 1 & P16(i) <> 0 then
            ML0(i) = HML12(P16(i));
          endif;
          { Times took Fansidar during pregnancy }
          ML1(i)   = A432;
          { Type of visit at source for antimalarial during pregnancy }
          ML2(i)   = A433;

          { Received Vitamin A dose in first 2 months after delivery }
          M54(i) = notappl;

          { place for antenatal care }
          if A412 = 1 then             { prenatal care given }
            M57A(i)  = alfa2num( 1, A415, "A" ); { your home }
            M57B(i)  = alfa2num( 1, A415, "B" ); { others home }
            M57C(i)  = notappl;                  { !! CS home }
            M57D(i)  = notappl;                  { !! CS home }
            M57E(i)  = alfa2num( 1, A415, "C" ); { public hospital }
            M57F(i)  = alfa2num( 1, A415, "D" ); { !! CS public }
            M57G(i)  = alfa2num( 1, A415, "E" ); { !! CS public }
            M57H(i)  = alfa2num( 1, A415, "F" ); { !! CS public }
            M57I(i)  = notappl;                  { !! CS public }
            M57J(i)  = notappl;                  { !! CS public }
            M57K(i)  = notappl;                  { !! CS public }
            M57L(i)  = notappl;                  { !! CS public }
            M57M(i)  = alfa2num( 1, A415, "G" ); { pvt. hospital }
            M57N(i)  = alfa2num( 1, A415, "H" ); { !! CS private }
            M57O(i)  = alfa2num( 1, A415, "I" ); { !! CS private }
            M57P(i)  = notappl;                  { !! CS private }
            M57Q(i)  = notappl;                  { !! CS private }
            M57R(i)  = notappl;                  { !! CS private }
            M57NA(i) = alfa2num( 1, A415, "J" ); { NGO hospital }
            M57NB(i) = alfa2num( 1, A415, "K" ); { !! CS NGO }
            M57NC(i) = alfa2num( 1, A415, "L" ); { !! CS NGO }
            M57ND(i) = notappl;                  { !! CS NGO }
            M57NE(i) = notappl;                  { !! CS NGO }
            M57S(i)  = notappl;                  { !! CS other }
            M57T(i)  = notappl;                  { !! CS other }
            M57U(i)  = notappl;                  { !! CS other }
            M57V(i)  = notappl;                  { !! CS other }
            M57X(i)  = alfa2num( 1, A415, "X" ); { other }
          endif;
          { Drugs for intestinal parasites }
          M60(i) = YesNo( A429 );

          { Postnatal check-up for respondent and child }
          if !A435 in 11,12,96,missing then 
            { 1-For deliveries in health facility }
            M61(i)   = unitnumb( A447U, A447N );  { Time spent at place of delivery }
            M62(i)   = YesNo( A448 );             { Respondent's health checked before discharge }
            M63(i)   = unitnumb( A449U, A449N );  { How long before discharging respondent health check took place }
            M64(i)   = A450;                      { Who checked respondent health before discharge }
            M66(i)  = YesNo( A455 );              { Respondent's health checked after discharge/delivery at home }
            M67(i)  = unitnumb( A456U, A456N );   { How long after discharge/delivery at home respondent health check took place }
            M68(i)  = A457;                       { Who checked respondent health after discharge/delivery at home }
            M69(i)  = A458;                       { Where respondent check after discharge/delivery at home took place }
            M70(i)  = YesNo( A460 );              { Child's health checked after discharge/delivery at home }
            M71(i)  = unitnumb( A461U, A461N );   { How long after delivery child's health check (after discharge/home delivery) took place }
            M72(i)  = A462;                       { Who checked child's health after discharge/home delivery }
            M73(i)  = A463;                       { Where child's health check after discharge/home delivery took place }
            M74(i)  = YesNo( A452 );              { Child's health checked before discharge }
            M75(i)  = unitnumb( A453U, A453N );   { How long before discharging child health check took place }
            M76(i)  = A454;                       { Who checked child health before discharge }
          else
            { 2-For deliveries at home/other }
            M66(i)  = YesNo( A464 );              { Respondent's health checked after discharge/delivery at home }
            M67(i)  = unitnumb( A465U, A465N );   { How long after discharge/delivery at home respondent health check took place }
            M68(i)  = A466;                       { Who checked respondent health after discharge/delivery at home }
            M69(i)  = A467;                       { Where respondent check after discharge/delivery at home took place }
            M70(i)  = YesNo( A469 );              { Child's health checked after discharge/delivery at home }
            M71(i)  = unitnumb( A470U, A470N );   { How long after delivery child's health check (after discharge/home delivery) took place }
            M72(i)  = A471;                       { Who checked child's health after discharge/home delivery }
            M73(i)  = A472;                       { Where child's health check after discharge/home delivery took place }
          endif;
          M78A(i) = YesNo( A473A );  { During first 2 days health provider: examine cord }
          M78B(i) = YesNo( A473B );  { During first 2 days health provider: measure temperature }
          M78C(i) = YesNo( A473C );  { During first 2 days health provider: signs baby needs medical attention }
          M78D(i) = YesNo( A473D );  { During first 2 days health provider: counsel on breastfeeding }
          M78E(i) = YesNo( A473E );  { During first 2 days health provider: observe breastfeeding }
          M78F(i) = YesNo( A474A );  { During first 2 days health provider: measure blood pressure }
          M78G(i) = YesNo( A474B );  { During first 2 days health provider: discuss vaginal bleeding }
          M78H(i) = YesNo( A474C );  { During first 2 days health provider: discuss family planning }
          M78I(i) = YesNo( A473F );  { !!! During first 2 days health provider: tell where get help for breastfeeding, In DHS-8 comes from maternal healthcare module }
          M78J(i) = YesNo( A474D );  { !!! During first 2 days health provider: ask if have problems with urination, In DHS-8 comes from maternal healthcare module }
          M78K(i) = YesNo( A474E );  { !!! During first 2 days health provider: ask if have pain, In DHS-8 comes from maternal healthcare module }
          M78L(i) = YesNo( A474F );  { !!! During first 2 days health provider: ask if feel sad/depressed, In DHS-8 comes from maternal healthcare module }
          M78M(i) = notappl;         { !!! During first 2 days health provider: CS           }
          M78N(i) = notappl;         { !!! During first 2 days health provider: CS           }
          M78O(i) = notappl;         { !!! During first 2 days health provider: CS           }
          M78P(i) = notappl;         { !!! During first 2 days health provider: CS           }

        endif;    { end most recent birth & stillbirth }

        { Given child anything other than breast milk }
        M55(i) = YesNo( A483 );

        if A405 in 1 then               // most recent birth 
          { Was child put on mother's bare skin after birth }
          recode A438 ::  A439 -> M77(i);
                  2   ::        -> 0;      { No }
                  1   ::    1   -> 1;      { Put on chest, touching bare skin }
                  1   ::    2   -> 2;      { Put on chest, no touching bare skin }
                  1   ::        -> 3;      { Put on chest, DK/Missing on touching bare skin }
                      ::        -> A438;
          endrecode;
          M77A(i)  = A440;                 { Time after birth put baby on bare skin }
          { !!! for earlier versions of DHS-8 questionnaire, use this box for conversion 
          recode Q440U :: Q440N -> M77A(i); 
                     0 ::       -> 0; 
                     1 :: 0:23  -> Q440N; 
                     2 :: 1:90  -> 24; 
                       ::       -> Q440U; 
          endrecode; 
          S440(i) = unitnumb(Q440U,Q440N);
		  }
        endif;
		
        { Pregnancy outcome }
        M80(i)  = A405;
		{ Places where iron pills/syrup were obtained }
		if A426 = 1 then
          M81A(i)  = alfa2num( 1, A427, "A" );   { government hospital }
          M81B(i)  = alfa2num( 1, A427, "B" );   { !!! CS public sector } 
          M81C(i)  = alfa2num( 1, A427, "C" );   { !!! CS public sector } 
          M81D(i)  = alfa2num( 1, A427, "D" );   { !!! CS public sector } 
          M81E(i)  = alfa2num( 1, A427, "E" );   { !!! CS public sector } 
          M81F(i)  = alfa2num( 1, A427, "F" );   { !!! CS public sector } 
          M81G(i)  = notappl;                    { !!! CS public sector } 
          M81H(i)  = notappl;                    { !!! CS public sector } 
          M81I(i)  = notappl;                    { !!! CS public sector } 
          M81J(i)  = alfa2num( 1, A427, "G" );   { private hospital } 
          M81K(i)  = alfa2num( 1, A427, "H" );   { pharmacy } 
          M81L(i)  = alfa2num( 1, A427, "I" );   { private doctor } 
          M81M(i)  = alfa2num( 1, A427, "J" );   { !!! CS private medical } 
          M81N(i)  = alfa2num( 1, A427, "K" );   { !!! CS private medical } 
          M81O(i)  = alfa2num( 1, A427, "L" );   { !!! CS private medical } 
          M81P(i)  = alfa2num( 1, A427, "M" );   { !!! CS private medical } 
          M81Q(i)  = notappl;                    { !!! CS private medical } 
          M81R(i)  = notappl;                    { !!! CS private medical } 
          M81NA(i) = alfa2num( 1, A427, "N" );   { NGO hospital } 
          M81NB(i) = alfa2num( 1, A427, "O" );   { !!! CS NGO } 
          M81NC(i) = alfa2num( 1, A427, "P" );   { !!! CS NGO } 
          M81ND(i) = notappl;                    { !!! CS NGO } 
          M81NE(i) = notappl;                    { !!! CS NGO } 
          M81S(i)  = alfa2num( 1, A427, "Q" );   { !!! CS other sector }
          M81T(i)  = alfa2num( 1, A427, "R" );   { !!! CS other sector }
          M81U(i)  = alfa2num( 1, A427, "S" );   { !!! CS other sector }
          M81V(i)  = notappl;                    { !!! CS other sector }
          M81W(i)  = notappl;                    { !!! CS other sector }
          M81X(i)  = alfa2num( 1, A427, "X" );   { other }
        endif;
		
        if A405 in 1,3 then            // more recent birth and stillbirth
          { During pregnancy received food/cash through assistance program }
          M82(i)  = YesNo( A430 );
        endif; 		  

        { !!! following variables for Newborn module }

        { Time after birth child was bathed }
        MNB1(i) = unitnumb( ANB1U, ANB1N);
        { Device used to cut the cord }
		MNB3(i) = ANB3;
        { Was the device new or had it been used before }
		MNB4(i) = ANB4;
        { Was the device boiled before used to cut the cord }
		MNB5(i) = YesNo(ANB5);
        { Anyting applied to the cord from the time it was cut until it fell off }
		MNB6(i) = YesNo(ANB6);
        { Type of product applied to the cord }
		if ANB6 = 1 then
          MNB7A(i)  = alfa2num( 1, ANB7, "A" );   { chlorhexidine }
          MNB7B(i)  = alfa2num( 1, ANB7, "B" );   { other antiseptic (alcohol, spirit, gentian violet)  } 
          MNB7C(i)  = alfa2num( 1, ANB7, "C" );   { mustard oil } 
          MNB7D(i)  = alfa2num( 1, ANB7, "D" );   { ash } 
          MNB7E(i)  = alfa2num( 1, ANB7, "E" );   { animal dung } 
          MNB7F(i)  = notappl;                    { !!! CS  } 
          MNB7G(i)  = notappl;                    { !!! CS  } 
          MNB7H(i)  = notappl;                    { !!! CS  } 
          MNB7I(i)  = notappl;                    { !!! CS  } 
          MNB7J(i)  = notappl;                    { !!! CS  } 
          MNB7X(i)  = alfa2num( 1, ANB7, "X" );   { other }
          MNB7Z(i)  = alfa2num( 1, ANB7, "Z" );   { don't know }
        endif;
        { Was chlorhexidine applied to the cord at any time }
		MNB10(i) = YesNo(ACH2);
        { Time after cord was cut chlorhexidine was first applied }
        MNB11(i) = unitnumb( ACH3U, ACH3N);
        { Days chlorhexidine was applied to the cord }
		MNB12(i) = ACH4;

        { !!! following variables for Maternal healthcare module.                               }
		{     A few other variables from the module are defined above because they were part of }
		{     standard variables in previous DHS phases                                         }

        { During antenatal care discussed: where to deliver baby }		
        MH3A(i)  = YesNo( AMH3A );
        { During antenatal care discussed: if wanted a relative, friend, neighbor during delivery }		
        MH3B(i)  = YesNo( AMH3B );
        { During antenatal care discussed: transportation to delivery place }		
        MH3C(i)  = YesNo( AMH3C );
        { During antenatal care discussed: source of funds for delivery }		
        MH3D(i)  = YesNo( AMH3D );
        { During antenatal care discussed: asking someone as blood donor if necessary }		
        MH3E(i)  = YesNo( AMH3E ); 
        { During antenatal care discussed: find healthcare provider to deliver child }		
        MH3F(i)  = YesNo( AMH3F );
        { During antenatal care discussed: CS }		
        MH3G(i)  = notappl;
        { During antenatal care discussed: CS }		
        MH3H(i)  = notappl;
        { During antenatal care discussed: CS }		
        MH3I(i)  = notappl;
        { Healthcare provider measure blood pressure before delivery }		
        MH5(i)   = YesNo( AMH5 );
        { While in labor wanted to have someone by your side }		
        Recode AMH6 -> MH6(i);
                 1  -> 1;
                 2  -> 0;
                 3  -> 2;
                    -> AMH6;
        endrecode;
        { While in labor the person you wanted by your side was with you }		
        MH7(i)   = YesNo( AMH7 );
        { While in labor how much time the person you wanted by your side was allowed to stay }		
        MH8(i)   = AMH8;
        { Reason the person you wanted by your side was not with you during labor }		
        MH9(i)   = AMH9;
        { During delivery wanted to have someone by your side }		
        MH10(i)  = YesNo( AMH10 );
        { During delivery the person you wanted by your side was with you }		
        MH11(i)  = YesNo( AMH11 );
        { During delivery how much time the person you wanted by your side was allowed to stay }		
        MH12(i)  = AMH12;
        { Reason the person you wanted by your side was not with you during delivery }		
        MH13(i)  = AMH13;
        { Was an instrument used to help pull out the baby }		
        MH14(i)  = AMH14;
		if AMH14 = 4 then MH14(i) = 0 endif;
        { While in labor or delivery did feel ignored/neglected by facility staff }		
        MH15(i)  = YesNo( AMH15 );
        { While in labor or delivery did have privacy }		
        Recode AMH16 -> MH16(i);
                 1   -> 0;
                 2   -> 1;
                 3   -> 2;
                     -> AMH16;
        endrecode;
        { At delivery place did healthcare providers: treated you with respect }		
        MH17A(i) = Fr3toZro( AMH17A );
        { At delivery place did healthcare providers: explained examinations/procedures }		
        MH17B(i) = Fr3toZro( AMH17B );
        { At delivery place did healthcare providers: took best care of you }		
        MH17C(i) = Fr3toZro( AMH17C );
        { At delivery place did healthcare providers: CS }		
        MH17D(i) = notappl;
        { At delivery place did healthcare providers: CS }		
        MH17E(i) = notappl;
        { During stay at health facility: shared bed with other patient }		
        MH18A(i) = YesNo( AMH18A );
        { During stay at health facility: rest/sleep on floor without mattress }		
        MH18B(i) = YesNo( AMH18B );
        { During stay at health facility: CS }		
        MH18C(i) = notappl;
        { During stay at health facility: CS }		
        MH18D(i) = notappl;
        { During stay at health facility were denied medical services for lack of money }		
        MH19(i)  = YesNo( AMH19 );
        { Were delayed or prevented to leave facility because of lack of payment }		
        MH20(i)  = YesNo( AMH20 );
        { During stay staff at health facility: slap you }		
        MH21A(i) = YesNo( AMH21A ); 
        { During stay staff at health facility: hit or punch you }		
        MH21B(i) = YesNo( AMH21B );  
        { During stay staff at health facility: physically threaten you }		
        MH21C(i) = YesNo( AMH21C ); 
        { During stay staff at health facility: physically mistreat or harm you }		
        MH21D(i) = YesNo( AMH21D ); 
        { During stay staff at health facility: CS }		
        MH21E(i) = notappl; 
        { During stay staff at health facility: CS }		
        MH21F(i) = notappl; 
        { During stay staff at health facility: shout at you }		
        MH22A(i) = YesNo( AMH22A ); 
        { During stay staff at health facility: say or do something to humilliate you }		
        MH22B(i) = YesNo( AMH22B ); 
        { During stay staff at health facility: verbally threaten }		
        MH22C(i) = YesNo( AMH22C ); 
        { During stay staff at health facility: verbally mistreat you in any other way }		
        MH22D(i) = YesNo( AMH22D ); 
        { During stay staff at health facility: CS }		
        MH22E(i) = notappl; 
        { During stay staff at health facility: CS }		
        MH22F(i) = notappl; 
        { Did health facility have toilet/latrine for patitents }		
        MH23(i)  = YesNo( AMH23 ); 
        { At any time wanted to use toilet/latrine but was not working }		
        MH24(i)  = YesNo( AMH24 ); 
        { Where did baby stay in first two days after birth }		
        MH25(i)  = AMH25; 
		
        { !! include pregnancy and postnatal care country specific variables here }
	    IDX94(i)  = idxbirths(i);       // index to birth history for cs section
        IDX94P(i) = idx;                // index to pregnancy history for cs section 
      endif;               { end children under 3 }
    enddo;
  endif;                   { end V015 = 1 }

{ ----------------------------------------------------------------------------}

PROC AWSEC05_EDT
  if V015 = 1 then
    { contrary to previous DHS phases, this section is only for living children }
    for i in AWSEC05_EDT do
	  // finds the child in the birth history for proper indexation
	  k  = 0;
	  do idx = 1 while idx <= soccurs(REC21)
	    if B19(idx) < 12*vsecs then
	      if B5(idx) = 1 then
		    k = k + 1;
		  endif;
		  if k = ACOL51 then 
		    x = V246 - BIDXP(idx) + 1;
            if A215L(x) <> A503 then errmsg( 4300, A215L(x), A503, "Child immunization" ) endif;
		    break 
          endif;
        endif;		  
      enddo;	
	  
      if B19(idx) < 12*vsecs then
      { IDX95(i) = idx; }                { index for cs section }
        HIDX(i)  = idx;

        { Has health card }
        recode A504 :: A507 :: A505 -> H1(i);
                    ::  1:3 ::      -> 1;
                1,3 ::      ::      -> 2;
                    ::      ::   1  -> 3;
                  4 ::      ::      -> 0;
                    ::      ::      -> A504;
        endrecode;
        { Has health card/other document }
        recode A504 :: A507 -> H1A(i);
                 1  ::   1  -> 1;       { Has only health card and was seen }
                 1  ::      -> 2;       { Has only health card and wasn't seen }
                 2  ::   2  -> 3;       { Has only other document and was seen }
                 2  ::      -> 4;       { Has only other document and wasn't seen }
                 3  ::   1  -> 5;       { Has card/other document but only card was seen }
                 3  ::   2  -> 6;       { Has card/other document but only other document was seen }
                 3  ::   3  -> 7;       { Has card/other document and both were seen }
                 3  ::      -> 8;       { Has card/other document and none were seen }
                 4  ::      -> 0;       { does not have either card or other document }
                    ::      -> A504;
        endrecode;
        { date of birth from vaccination card }
        H25D(i) = A508D;
        H25M(i) = A508M;
        H25Y(i) = A508Y;
        { Photograph of vaccination card available }
        H26(i)  = A510;
        { BCG }
        H2(i) = vrec( D509B, M509B, Y509B, A514, (A514=1), 1 );
        if H2(i) <> 1 then
          H2D(i) = notappl;
          H2M(i) = notappl;
          H2Y(i) = notappl;
        else
          H2D(i) = D509B;
          H2M(i) = M509B;
          H2Y(i) = Y509B;
        endif;
        { DPT 1 - for DPT by itself or if PENTAVALENT is used }
        H3(i) = vrec( D509D1, M509D1, Y509D1, A521, A522, 1 );
        if H3(i) <> 1 then
          H3D(i) = notappl;
          H3M(i) = notappl;
          H3Y(i) = notappl;
        else
          H3D(i) = D509D1;
          H3M(i) = M509D1;
          H3Y(i) = Y509D1;
        endif;
        { POLIO 1 }
        H4(i) = vrec( D509P1, M509P1, Y509P1, A517, A519, 1+(A518=1) );
        if H4(i) <> 1 then
          H4D(i) = notappl;
          H4M(i) = notappl;
          H4Y(i) = notappl;
        else
          H4D(i) = D509P1;
          H4M(i) = M509P1;
          H4Y(i) = Y509P1;
        endif;
        { DPT 2 - for DPT by itself or if PENTAVALENT is used }
        H5(i) = vrec( D509D2, M509D2, Y509D2, A521, A522, 2 );
        if H5(i) <> 1 then
          H5D(i) = notappl;
          H5M(i) = notappl;
          H5Y(i) = notappl;
        else
          H5D(i) = D509D2;
          H5M(i) = M509D2;
          H5Y(i) = Y509D2;
        endif;
        { POLIO 2 }
        H6(i) = vrec( D509P2, M509P2, Y509P2, A517, A519, 2+(A518=1) );
        if H6(i) <> 1 then
          H6D(i) = notappl;
          H6M(i) = notappl;
          H6Y(i) = notappl;
        else
          H6D(i) = D509P2;
          H6M(i) = M509P2;
          H6Y(i) = Y509P2;
        endif;
        { DPT 3 - for DPT by itself or if PENTAVALENT is used }
        H7(i) = vrec( D509D3, M509D3, Y509D3, A521, A522, 3 );
        if H7(i) <> 1 then
          H7D(i) = notappl;
          H7M(i) = notappl;
          H7Y(i) = notappl;
        else
          H7D(i) = D509D3;
          H7M(i) = M509D3;
          H7Y(i) = Y509D3;
        endif;
        { POLIO 3 }
        H8(i) = vrec( D509P3, M509P3, Y509P3, A517, A519, 3+(A518=1) );
        if H8(i) <> 1 then
          H8D(i) = notappl;
          H8M(i) = notappl;
          H8Y(i) = notappl;
        else
          H8D(i) = D509P3;
          H8M(i) = M509P3;
          H8Y(i) = Y509P3;
        endif;
        { MEASLES 1 }
        H9(i) = vrec( D509M1, M509M1, Y509M1, A527, A528, 1 );
        if H9(i) <> 1 then
          H9D(i) = notappl;
          H9M(i) = notappl;
          H9Y(i) = notappl;
        else
          H9D(i) = D509M1;
          H9M(i) = M509M1;
          H9Y(i) = Y509M1;
        endif;
        { MEASLES 2 }
        H9A(i) = vrec( D509M2, M509M2, Y509M2, A527, A528, 2 );
        if H9A(i) <> 1 then
          H9AD(i) = notappl;
          H9AM(i) = notappl;
          H9AY(i) = notappl;
        else
          H9AD(i) = D509M2;
          H9AM(i) = M509M2;
          H9AY(i) = Y509M2;
        endif;
        { POLIO 0 }
        H0(i) = vrec( D509P0, M509P0, Y509P0, A517, (A518=1), 1 );
        if H0(i) <> 1 then
          H0D(i) = notappl;
          H0M(i) = notappl;
          H0Y(i) = notappl;
        else
          H0D(i) = D509P0;
          H0M(i) = M509P0;
          H0Y(i) = Y509P0;
        endif;
        { MOST RECENT VITAMIN A }
        H33(i) = vrec( D509V, M509V, Y509V, A605(i), (A605(i) = 1), 1 );
        if H33(i) <> 1 then
          H33D(i) = notappl;
          H33M(i) = notappl;
          H33Y(i) = notappl;
        else
          H33D(i) = D509V;
          H33M(i) = M509V;
          H33Y(i) = Y509V;
        endif;
        { 2nd most recent vitamin A, not in DHS-VI and forward but check construction in DHS-V }
        H40(i)  = notappl;
        H40D(i) = notappl;
        H40M(i) = notappl;
        H40Y(i) = notappl;
        { HEPATITIS B AT BIRTH }
        H50(i) = vrec( D509H, M509H, Y509H, A515, (A515=1), 1 );
        if H50(i) <> 1 then
          H50D(i) = notappl;
          H50M(i) = notappl;
          H50Y(i) = notappl;
        else
          H50D(i) = D509H;
          H50M(i) = M509H;
          H50Y(i) = Y509H;
        endif;
        { PENTAVALENT 1 }
        H51(i) = vrec( D509D1, M509D1, Y509D1, A521, A522, 1 );
        if H51(i) <> 1 then
          H51D(i) = notappl;
          H51M(i) = notappl;
          H51Y(i) = notappl;
        else
          H51D(i) = D509D1;
          H51M(i) = M509D1;
          H51Y(i) = Y509D1;
        endif;
        { PENTAVALENT 2 }
        H52(i) = vrec( D509D2, M509D2, Y509D2, A521, A522, 2 );
        if H52(i) <> 1 then
          H52D(i) = notappl;
          H52M(i) = notappl;
          H52Y(i) = notappl;
        else
          H52D(i) = D509D2;
          H52M(i) = M509D2;
          H52Y(i) = Y509D2;
        endif;
        { PENTAVALENT 3 }
        H53(i) = vrec( D509D3, M509D3, Y509D3, A521, A522, 3 );
        if H53(i) <> 1 then
          H53D(i) = notappl;
          H53M(i) = notappl;
          H53Y(i) = notappl;
        else
          H53D(i) = D509D3;
          H53M(i) = M509D3;
          H53Y(i) = Y509D3;
        endif;
        { PNEUMOCOCCAL 1 }
        H54(i) = vrec( D509N1, M509N1, Y509N1, A523, A524, 1 );
        if H54(i) <> 1 then
          H54D(i) = notappl;
          H54M(i) = notappl;
          H54Y(i) = notappl;
        else
          H54D(i) = D509N1;
          H54M(i) = M509N1;
          H54Y(i) = Y509N1;
        endif;
        { PNEUMOCOCCAL 2 }
        H55(i) = vrec( D509N2, M509N2, Y509N2, A523, A524, 2 );
        if H55(i) <> 1 then
          H55D(i) = notappl;
          H55M(i) = notappl;
          H55Y(i) = notappl;
        else
          H55D(i) = D509N2;
          H55M(i) = M509N2;
          H55Y(i) = Y509N2;
        endif;
        { PNEUMOCOCCAL 3 }
        H56(i) = vrec( D509N3, M509N3, Y509N3, A523, A524, 3 );
        if H56(i) <> 1 then
          H56D(i) = notappl;
          H56M(i) = notappl;
          H56Y(i) = notappl;
        else
          H56D(i) = D509N3;
          H56M(i) = M509N3;
          H56Y(i) = Y509N3;
        endif;
        { ROTAVIRUS 1 }
        H57(i) = vrec( D509R1, M509R1, Y509R1, A525, A526, 1 );
        if H57(i) <> 1 then
          H57D(i) = notappl;
          H57M(i) = notappl;
          H57Y(i) = notappl;
        else
          H57D(i) = D509R1;
          H57M(i) = M509R1;
          H57Y(i) = Y509R1;
        endif;
        { ROTAVIRUS 2 }
        H58(i) = vrec( D509R2, M509R2, Y509R2, A525, A526, 2 );
        if H58(i) <> 1 then
          H58D(i) = notappl;
          H58M(i) = notappl;
          H58Y(i) = notappl;
        else
          H58D(i) = D509R2;
          H58M(i) = M509R2;
          H58Y(i) = Y509R2;
        endif;
        { ROTAVIRUS 3 }
        H59(i) = vrec( D509R3, M509R3, Y509R3, A525, A526, 3 );
        if H59(i) <> 1 then
          H59D(i) = notappl;
          H59M(i) = notappl;
          H59Y(i) = notappl;
        else
          H59D(i) = D509R3;
          H59M(i) = M509R3;
          H59Y(i) = Y509R3;
        endif;
        { Inactivated Polio }
        H60(i) = vrec( D509IPV, M509IPV, Y509IPV, A520, (A520=1), 1 );
        if H60(i) <> 1 then
          H60D(i) = notappl;
          H60M(i) = notappl;
          H60Y(i) = notappl;
        else
          H60D(i) = D509IPV;
          H60M(i) = M509IPV;
          H60Y(i) = Y509IPV;
        endif;
        { Hepatitis B 1 - for Hepatitis B by itself or if PENTAVALENT is used and Hep B is part of the Pentavalent }
        H61(i) = vrec( D509D1, M509D1, Y509D1, A521, A522, 1 );
        if H61(i) <> 1 then
          H61D(i) = notappl;
          H61M(i) = notappl;
          H61Y(i) = notappl;
        else
          H61D(i) = D509D1;
          H61M(i) = M509D1;
          H61Y(i) = Y509D1;
        endif;
        { Hepatitis B 2 - for Hepatitis B by itself or if PENTAVALENT is used and Hep B is part of the Pentavalent }
        H62(i) = vrec( D509D2, M509D2, Y509D2, A521, A522, 2 );
        if H62(i) <> 1 then
          H62D(i) = notappl;
          H62M(i) = notappl;
          H62Y(i) = notappl;
        else
          H62D(i) = D509D2;
          H62M(i) = M509D2;
          H62Y(i) = Y509D2;
        endif;
        { Hepatitis B 3 - for Hepatitis B by itself or if PENTAVALENT is used and Hep B is part of the Pentavalent }
        H63(i) = vrec( D509D3, M509D3, Y509D3, A521, A522, 3 );
        if H63(i) <> 1 then
          H63D(i) = notappl;
          H63M(i) = notappl;
          H63Y(i) = notappl;
        else
          H63D(i) = D509D3;
          H63M(i) = M509D3;
          H63Y(i) = Y509D3;
        endif;
        { Hemophilus Influenza type b 1 - for Hemophilus Influenza type b by itself or if Pentavalent is used and Hib is part of the pentavalent vaccine }
        H64(i) = vrec( D509D1, M509D1, Y509D1, A521, A522, 1 );
        if H64(i) <> 1 then
          H64D(i) = notappl;
          H64M(i) = notappl;
          H64Y(i) = notappl;
        else
          H64D(i) = D509D1;
          H64M(i) = M509D1;
          H64Y(i) = Y509D1;
        endif;
        { Hemophilus Influenza type b 2 - for Hemophilus Influenza type b by itself or if Pentavalent is used and Hib is part of the pentavalent vaccine }
        H65(i) = vrec( D509D2, M509D2, Y509D2, A521, A522, 2 );
        if H65(i) <> 1 then
          H65D(i) = notappl;
          H65M(i) = notappl;
          H65Y(i) = notappl;
        else
          H65D(i) = D509D2;
          H65M(i) = M509D2;
          H65Y(i) = Y509D2;
        endif;
        { Hemophilus Influenza type b 3 - for Hemophilus Influenza type b by itself or if Pentavalent is used and Hib is part of the pentavalent vaccine }
        H66(i) = vrec( D509D3, M509D3, Y509D3, A521, A522, 3 );
        if H66(i) <> 1 then
          H66D(i) = notappl;
          H66M(i) = notappl;
          H66Y(i) = notappl;
        else
          H66D(i) = D509D3;
          H66M(i) = M509D3;
          H66Y(i) = Y509D3;
        endif;
        { PENTAVALENT 4 }
        H67(i) = vrec( D509D4, M509D4, Y509D4, A521, A522, 4 );
        if H67(i) <> 1 then
          H67D(i) = notappl;
          H67M(i) = notappl;
          H67Y(i) = notappl;
        else
          H67D(i) = D509D4;
          H67M(i) = M509D4;
          H67Y(i) = Y509D4;
        endif;
        { Ever had vaccination }
        H10(i)  = YesNo( A513 );
        { Hepatitis B at birth received within 24 of birth }
        H68(i)  = YesNo( A516 );
        { Place where most vaccinations were received }
        H69(i)  = A529;

//    endif;    { Child alive }

      endif;      { Age selection }
    enddo;
  endif;

{ ----------------------------------------------------------------------------}

PROC AWSEC6A_EDT
  if V015 = 1 then
    { contrary to previous DHS phases, this section is only for living children }
    for i in AWSEC6A_EDT do
	  // finds the child in the birth history for proper indexation
	  k  = 0;
	  do idx = 1 while idx <= soccurs(REC21)
	    if B19(idx) < 12*hsecs then
	      if B5(idx) = 1 then
		    k = k + 1;
		  endif;
		  if k = ACOL61 then 
  		    x = V246 - BIDXP(idx) + 1;
            if A215L(x) <> A603 then errmsg( 4300, A215L(x), A603, "Child health" ) endif;
		    break 
          endif;
        endif;		  
      enddo;	
	  
      if B19(idx) < 12*hsecs then
      { IDX96(i) = idx; }                { index for cs section }
        HIDXA(i) = idx;

        { Diarrhea recently }
        recode  A608 -> H11(i);
                  1  -> 2;       { last 2 weeks }
                  2  -> 0;
                     -> A608;
        endrecode;
        H11B(i)  = notappl;    { blood in the stools, removed from DHS-7 onwards }

        { seek advice for treatment of diarrhea by }
        if H11(i) in 1:2 then           { diarrhea recently }
          H12A(i)  = alfa2num( A611, A612, "A" ); { pub hospital }
          H12B(i)  = alfa2num( A611, A612, "B" ); { !! CS public sector }
          H12C(i)  = alfa2num( A611, A612, "C" ); { !! CS public sector }
          H12D(i)  = alfa2num( A611, A612, "D" ); { !! CS public sector }
          H12E(i)  = alfa2num( A611, A612, "E" ); { !! CS public sector }
          H12F(i)  = alfa2num( A611, A612, "F" ); { !! CS public sector }
          H12G(i)  = notappl;                     { !! CS public sector }
          H12H(i)  = notappl;                     { !! CS public sector }
          H12I(i)  = notappl;                     { !! CS public sector }
          H12J(i)  = alfa2num( A611, A612, "G" ); { pvt hospital }
          H12K(i)  = alfa2num( A611, A612, "I" ); { pharmacy }
          H12L(i)  = alfa2num( A611, A612, "J" ); { pvt doctor }
          H12M(i)  = alfa2num( A611, A612, "H" ); { !! CS private medical }
          H12N(i)  = alfa2num( A611, A612, "K" ); { !! CS private medical }
          H12O(i)  = alfa2num( A611, A612, "L" ); { !! CS private medical }
          H12P(i)  = alfa2num( A611, A612, "M" ); { !! CS private medical }
          H12Q(i)  = notappl;                     { !! CS private medical }
          H12R(i)  = notappl;                     { !! CS private medical }
          H12NA(i) = alfa2num( A611, A612, "N" ); { NGO hospital }
          H12NB(i) = alfa2num( A611, A612, "O" ); { !! CS NGO sector }
          H12NC(i) = alfa2num( A611, A612, "P" ); { !! CS NGO sector }
          H12ND(i) = notappl;                     { !! CS NGO sector }
          H12NE(i) = notappl;                     { !! CS NGO sector }
          H12S(i)  = alfa2num( A611, A612, "Q" ); { !! CS other sector }
          H12T(i)  = alfa2num( A611, A612, "R" ); { !! CS other sector }
          H12U(i)  = alfa2num( A611, A612, "S" ); { !! CS other sector }
          H12V(i)  = alfa2num( A611, A612, "T" ); { !! CS other sector }
          H12W(i)  = notappl;                     { !! CS other sector }
          H12X(i)  = alfa2num( A611, A612, "X" ); { other }
          { exclude pharmacy and any other non-medical stores or individuals }
          H12Z(i) = ( H12A(i) = 1  | H12B(i) = 1  | H12C(i) = 1  | H12D(i) = 1  | H12E(i) = 1  |
                      H12F(i) = 1  | H12G(i) = 1  | H12H(i) = 1  | H12I(i) = 1  |
                      H12J(i) = 1  | H12L(i) = 1  | H12M(i) = 1  | H12N(i) = 1  | H12O(i) = 1  | 
                      H12P(i) = 1  | H12Q(i) = 1  | H12R(i) = 1  | H12NA(i) = 1 | H12NB(i) = 1 |
                      H12NC(i) = 1 | H12ND(i) = 1 | H12NE(i) = 1 );
          { special values for H12Z }
          if A611 = missing | pos("?",A612) then
            H12Z(i) = missing
          endif;
          { Diarrhea: no treatment }
          if A611 = missing | pos("?",A612) then
            H12Y(i) = missing
          elseif A611 = 1 then
            H12Y(i) = 0
          elseif A611 = 2 then
            H12Y(i) = 1
          else
            H12Y(i) = A611
          endif;

          { Given ORT treatment }
          if A615A = 1 | A615B = 1 then
            H13(i) = 2
          elseif A615A = 2 & A615B = 2 then
            H13(i) = 0
          elseif A615A = 8 & A615B = 8 then
            H13(i) = 8
          else
            H13(i) = missing
          endif;
          { Given a pre-packaged ORS liquid }
          H13B(i)  = YesNo( A615B );

          { Given RHS treatment }
          recode A615D -> H14(i);
                   1   -> 2;
                   2   -> 0;
                       -> A615D;
          endrecode;

          { Other treatments for diarrhea }
          H15(i)  = alfa2num( A616, A617, "A" ); { antibiotic pill/syrup }
          H15A(i) = alfa2num( A616, A617, "B" ); { antimotility }
          H15B(i) = alfa2num( A616, A617, "E" ); { antibiotic injection }
          H15C(i) = alfa2num( A616, A617, "H" ); { intravenous }
          H15D(i) = alfa2num( A616, A617, "I" ); { home remedy/herbs }
          H15E(i) = YesNo( A615C );              { zinc }
          H15F(i) = alfa2num( A616, A617, "C" ); { other non-antibiotic/antimotility }
          H15G(i) = alfa2num( A616, A617, "D" ); { unknown pill/syrup }
          H15H(i) = alfa2num( A616, A617, "F" ); { injection non-antibiotic }
          H15I(i) = alfa2num( A616, A617, "G" ); { unknown injection }
          H15J(i) = notappl;                     { !! CS }
          H15K(i) = notappl;                     { !! CS }
          H15L(i) = notappl;                     { !! CS }
          H15M(i) = notappl;                     { !! CS }
          H20(i)  = alfa2num( A616, A617, "X" ); { other }
          if H15(i)  = 1 | H15A(i) = 1 | H15B(i) = 1 | H15C(i) = 1 |
             H15D(i) = 1 |               H15F(i) = 1 | H15G(i) = 1 |   { Zinc was asked specifically }
             H15H(i) = 1 | H15I(i) = 1 | H15J(i) = 1 | H15K(i) = 1 |
             H15L(i) = 1 | H15M(i) = 1 | H20(i) = 1 then
            H21A(i) = 0
          elseif pos("?",A617) then
            H21A(i) = missing
          elseif A616 = 1 then
            H21A(i) = 0
          elseif A616 = 2 then
            H21A(i) = 1
          else
            H21A(i) = A616
          endif;

          { Received any treatment }
          H21(i) = 0;
          if H12Y(i) = 0 & H12Z(i) <> missing |
             H13 (i) in 1,2 |
             H14 (i) in 1,2 |
             H15 (i) = 1 | H15A(i) = 1 | H15B(i) = 1 | H15C(i) = 1 | H15D(i) = 1 |
             H15E(i) = 1 | H15F(i) = 1 | H15G(i) = 1 | H15H(i) = 1 | H15I(i) = 1 |
             H15J(i) = 1 | H15K(i) = 1 | H15L(i) = 1 | H15M(i) = 1 | H20 (i) = 1 then
            H21(i) = 1
          else
            if H12Y(i) = missing   | H12Z(i) = missing |
               H13(i) in 8,missing | H14(i) in 8,missing | H20(i) = missing then
              H21(i) = missing
            endif;
          endif;

        endif;      { end diarrhea recently }

        { Fever in last 2 weeks }
        H22(i) = YesNo( A618 );

        { Cough in last 2 weeks }
        recode A621 -> H31(i);
                 1  -> 2;
                 2  -> 0;
                    -> A621;
        endrecode;

        { Faster breathing with short, rapid breaths }
        H31B(i) = YesNo( A622 );
        { Problem in the chest or blocked or running nose }
        H31C(i)  = A623;
        { Had fever/cough in last 2 weeks: Amount offered to drink }
        H31D(i) = notappl;  { !!! may be included in survey, not in DHS-VII }
        { Had fever/cough in last 2 weeks: Amount offered to eat }
        H31E(i) = notappl;  { !!! may be included in survey, not in DHS-VII }

        { advice for fever/Cough treatment by }
        if H22(i) = 1 | H31B(i) = 1 then  
          H32A(i)  = alfa2num( A625, A626, "A" ); { pub hospital }
          H32B(i)  = alfa2num( A625, A626, "B" ); { !! CS public sector }
          H32C(i)  = alfa2num( A625, A626, "C" ); { !! CS public sector }
          H32D(i)  = alfa2num( A625, A626, "D" ); { !! CS public sector }
          H32E(i)  = alfa2num( A625, A626, "E" ); { !! CS public sector }
          H32F(i)  = alfa2num( A625, A626, "F" ); { !! CS public sector }
          H32G(i)  = notappl;                     { !! CS public sector }
          H32H(i)  = notappl;                     { !! CS public sector }
          H32I(i)  = notappl;                     { !! CS public sector }
          H32J(i)  = alfa2num( A625, A626, "G" ); { private hospital }
          H32K(i)  = alfa2num( A625, A626, "I" ); { pharmacy }
          H32L(i)  = alfa2num( A625, A626, "J" ); { private doctor }
          H32M(i)  = alfa2num( A625, A626, "H" ); { !! CS private medical }
          H32N(i)  = alfa2num( A625, A626, "K" ); { !! CS private medical }
          H32O(i)  = alfa2num( A625, A626, "L" ); { !! CS private medical }
          H32P(i)  = alfa2num( A625, A626, "M" ); { !! CS private medical }
          H32Q(i)  = notappl;                     { !! CS private medical }
          H32R(i)  = notappl;                     { !! CS private medical }
          H32NA(i) = alfa2num( A625, A626, "N" ); { NGO hospital }
          H32NB(i) = alfa2num( A625, A626, "O" ); { !! NGO medical }
          H32NC(i) = alfa2num( A625, A626, "P" ); { !! NGO medical }
          H32ND(i) = notappl;                     { !! NGO medical }
          H32NE(i) = notappl;                     { !! NGO medical }
          H32S(i)  = alfa2num( A625, A626, "Q" ); { !! CS other sector }
          H32T(i)  = alfa2num( A625, A626, "R" ); { !! CS other sector }
          H32U(i)  = alfa2num( A625, A626, "S" ); { !! CS other sector }
          H32V(i)  = alfa2num( A625, A626, "T" ); { !! CS other sector }
          H32W(i)  = notappl;                     { !! CS other sector }
          H32X(i)  = alfa2num( A625, A626, "X" ); { other }
          { exclude pharmacy and any other non-medical stores or individuals }
          H32Z(i) = ( H32A(i) = 1  | H32B(i) = 1  | H32C(i) = 1  | H32D(i) = 1  | H32E(i) = 1  |
                      H32F(i) = 1  | H32G(i) = 1  | H32H(i) = 1  | H32I(i) = 1  |
                      H32J(i) = 1  | H32L(i) = 1  | H32M(i) = 1  | H32N(i) = 1  | H32O(i) = 1  |
                      H32P(i) = 1  | H32Q(i) = 1  | H32R(i) = 1  | H32NA(i) = 1 | H32NB(i) = 1 |
					  H32NC(i) = 1 | H32ND(i) = 1 | H32NE(i) = 1 );
          { special values for H32Z }
          if A625 = missing | pos("?",A626) then
            H32Z(i) = missing
          endif;
          { fever/cough: no treatment }
          if A625 = missing | pos("?",A626) then
            H32Y(i) = missing
          elseif A625 = 1 then
            H32Y(i) = 0
          elseif A625 = 2 then
            H32Y(i) = 1
          else
            H32Y(i) = A625
          endif;
        endif;          { end fever/cough recently }
        { Vitamin A in last 6 months }
        H34(i) = YesNo( A605 );
        { Fever/Cough treated with }
        if H22(i) = 1 | H31B(i) = 1 then           { treatment asked for children with fever or difficulty breathing }
          H37A(i)  = alfaDKnum( A630, A631, "B" ); { fansidar }
          H37B(i)  = alfaDKnum( A630, A631, "C" ); { chloroquine }
          H37C(i)  = alfaDKnum( A630, A631, "D" ); { amodiaquine }
          H37D(i)  = alfaDKnum( A630, A631, "E" ); { quinine pills }
          H37DA(i) = alfaDKnum( A630, A631, "F" ); { quinine injection/IV }
          H37E(i)  = alfaDKnum( A630, A631, "A" ); { combination w/artemisinin }
          H37AA(i) = alfaDKnum( A630, A631, "G" ); { artesunate rectal }
          H37AB(i) = alfaDKnum( A630, A631, "H" ); { artesunate injection/IV }
          H37F(i)  = notappl;                      { !! CS }
          H37G(i)  = notappl;                      { !! CS }
          H37H(i)  = alfaDKnum( A630, A631, "I" ); { other antimalarial }
          H37I(i)  = alfaDKnum( A630, A631, "L" ); { pills/syrup }
          H37J(i)  = alfaDKnum( A630, A631, "M" ); { injection }
          H37K(i)  = alfaDKnum( A630, A631, "N" ); { aspirin }
          H37L(i)  = alfaDKnum( A630, A631, "O" ); { acetaminophen/paracetamol/panadol }
          H37M(i)  = alfaDKnum( A630, A631, "P" ); { ibuprofen }
          H37N(i)  = alfaDKnum( A630, A631, "J" ); { amoxicillin }
          H37O(i)  = alfaDKnum( A630, A631, "K" ); { cotrimoxazole }
          H37P(i)  = notappl;                      { !! CS }
          H37Q(i)  = notappl;                      { !! CS }
          H37R(i)  = notappl;                      { !! CS }
          H37X(i)  = alfaDKnum( A630, A631, "X" ); { other }
          { special cases, don't know/nothing }
          if A630 = missing | pos("?",A631) then
            H37Y(i) = missing;
            H37Z(i) = missing;
          elseif A630 = 8 | pos("Z",A631) then
            H37Y(i) = 0;
            H37Z(i) = 1;
          elseif A630 in 2,notappl & A625 = 2 then
            H37Y(i) = 1;
            H37Z(i) = 0;
          else
            H37Y(i) = 0;
            H37Z(i) = 0;
          endif;
        endif;               { end fever/cough recently }

        { Had diarrhea in last 2 weeks: Amount offered to drink }
        recode A609 -> H38(i);
                 5  -> 0;
               1:4  -> A609+1;
                    -> A609;
        endrecode;
        { Had diarrhea in last 2 weeks: Amount offered to eat }
        recode A610 -> H39(i);
                 5  -> 0;
                 6  -> 1;
               1:4  -> A610+1;
                    -> A610;
        endrecode;
        { Last 12 months given iron pills or syrup }
        H42(i)  = YesNo( A604A );
        { Drugs for intestinal parasites in last 6 months }
        H43(i)  = YesNo( A606 );
        { Place first sought treatment for diarrhea }
        if A611 = 1 then        { advice sought for diarrhea }
          if length( strip(A612) ) = 1 then
            xtemp    = pos(A612[1:1], "ABCDEFGHIJKLMNOPQRSTX?");
          else
            xtemp    = pos(A614[1:1], "ABCDEFGHIJKLMNOPQRSTX?");
          endif;
          recode xtemp -> xtemp;
                 1:6   -> xtemp+10;  { public sector }
                 7:13  -> xtemp+14;  { private sector }
                14:16  -> xtemp+17;  { NGO source }
                17:20  -> xtemp+17;  { other source }
                  21   -> 96;        { other }
                  22   -> missing;   { missing }
                       -> default;
          endrecode;
          H44A(i)  = xtemp;
        endif;                { end advice for diarrhea }

        { Place first sought treatment for fever }
        if A625 = 1 then        { advice sought fever/cough }
          if length( strip(A626) ) = 1 then
            xtemp    = pos(A626[1:1], "ABCDEFGHIJKLMNOPQRSTX?");
          else
            xtemp    = pos(A628[1:1], "ABCDEFGHIJKLMNOPQRSTX?");
          endif;
          recode xtemp -> xtemp;
                 1:6   -> xtemp+10;  { public sector }
                 7:13  -> xtemp+14;  { private sector }
                14:16  -> xtemp+17;  { NGO source }
                17:20  -> xtemp+17;  { other source }
                  21   -> 96;        { other }
                  22   -> missing;   { missing }
                       -> default;
          endrecode;
          H46A(i)  = xtemp;
        endif;                { end advice for fever/cough }
        { Number of days after fever began sought advice or treatment }
        H46B(i)   = A629;
        { Blood taken from child's finger/heel for testing }
        H47(i)   = YesNo( A619 );
	  
        { Past 3 months health care provider measured child's weight }
        H70A(i) = YesNo(A607A);		  
        { Past 3 months health care provider measured child's length/height }
        H70B(i) = YesNo(A607B);		  
        { Past 3 months health care provider measured child's upper arm }
        H70C(i) = YesNo(A607C);	
        { Was respondent told that child had malaria }		  
        H71(i)  = YesNo(A620);		  
	  
        { !!! foods given last 12 months, change in dictionary LOCAL NAME by the food used in the country  }
        H80A(i) = YesNo( A604B );  { last 12 months given: LOCAL NAME for multiple micronutrient powder }
        H80B(i) = notappl;         { last 12 months given: LOCAL NAME for ready to use therapeutic food }
        H80C(i) = notappl;         { last 12 months given: LOCAL NAME for ready to use supplemental food }
        H80D(i) = notappl;         { last 12 months given: CS }
        H80E(i) = notappl;         { last 12 months given: CS }
        H80F(i) = notappl;         { last 12 months given: CS }
        H80G(i) = notappl;         { last 12 months given: CS }

        { how long after fever began started taken drug }
        ML20A(i) = A633;

        { !! include health country specific variables here }

//      endif;    { Child alive }

      endif;      { Age selection }
    enddo;
  endif;

{ ----------------------------------------------------------------------------}
{ Height & Weight for children variables in REC44 }

  if V015 = 1 then
    i = 0;
    for k in REC21 do 
      if B19(k) < 12*hsecs & B5(k) = 1 then
	    i = i + 1;
        HWIDX(i) = k;
        found = 0;
        do j = 1 while !found & j <= soccurs(RECH6)
          if HC0(j) = B16(k) then
            found = 1;
            HW1(i) = HC1(j);    { Age in months }
            HW2(i) = HC2(j);    { Weight in kilograms (1 dec.) }
            HW3(i) = HC3(j);    { Height in centimeters (1 dec.) }
            HW13(i) = HC13(j);  { Reason not measured }
            HW15(i) = HC15(j);  { Height: lying or standing }
            HW16(i) = HC16(j);  { Day of birth of child }
            HW17(i) = HC17(j);  { Date measured (day) }
            HW18(i) = HC18(j);  { Date measured (month) }
            HW19(i) = HC19(j);  { Date measured (year) }

            if V042 = 1 then  { in anemia subsample }
              HW51(i)  = HC51(j);  { Line no. of parent/caretaker }
              HW52(i)  = HC52(j);  { Read consent statement }
              HW53(i)  = HC53(j);  { Hemoglobin level (g/dl - 1 decimal) }
              HW55(i)  = HC55(j);  { Result of measuring (Hemoglobin) }
              HW56(i)  = HC56(j);  { Hemoglobin level adjusted by altitude (g/dl - 1 decimal) }
              HW56A(i) = HC56A(j); { Hemoglobin level adjusted by altitude (g/dl - 1 decimal) (new WHO) }
              HW57(i)  = HC57(j);  { Anemia level }
              HW57A(i) = HC57A(j); { Anemia level (new WHO) }
              { !!! candidate to be removed from DHS-9 as it hasn't been used for a while }
              HW58(i)  = HC58(j);  { Agrees to referral } 
            endif;
            HW70(i) = HC70(j);     { Ht/A WHO Standard deviation }
            HW71(i) = HC71(j);     { Wt/A WHO Standard deviation }
            HW72(i) = HC72(j);     { Wt/Ht WHO Standard deviation }
            HW73(i) = HC73(j);     { BMI WHO Standard deviation }
          endif;
        enddo;
        if !found then
          HW13(i)= 7;            { reason not measured }
          if V042 = 1 then       { in anemia subsample}
            HW55(i) = 7;         { Result of measuring Hemoglobin }
          endif;
        endif;
      endif;
    enddo;

  endif;          { end V015 = 1 }

{ ----------------------------------------------------------------------------}
PROC AWSEC6B_EDT

  { code here to populate variables in REC42 and REC45 }
  { first - variables for REC42 }
  { the record should exist if there is at least one child 0-23 living with the mother }
  if V015 = 1 & count( REC21 where B19 < 24 & B9 = 0 ) then
    V400 = notappl;
    { feeding practices for children }
    { at least one child born in the last two years and living with respondent }
    { !! in some countries the data will be collected for the last three years, adjust accordingly }
	  for i in REC21 do
	    if B19 < 24 & B9 = 0 then
		  V400 = i;
		  break;
      endif;
    enddo;		
    V409   = YesNo( A636A );             { plain water }
    V409A  = notappl;                    { !! sugar water - candidate to be dropped from DHS-9 recode }
    V410   = YesNo( A636G );             { fruit juice, fruit flavored drinks }
    V410A  = YesNo( A636I );             { tea/coffee, herbal drinks }
    V410AS = YesNo( A636IA );            { tea/coffee, herbal drinks - sweetened }
    V411   = YesNo( A636C );             { any kind of milk }
    V411S  = YesNo( A636CA);             { Tinned, powdered or fresh milk was sweetened }
    V411A  = YesNo( A636B );             { formula }
    V412   = notappl;                    { !! just fresh milk  - candidate to be dropped from DHS-9 recode }
    V412A  = notappl;                    { !! any fortified baby food like cerlac, etc - candidate to be dropped from DHS-9 recode }
    V412B  = notappl;                    { other porridge/cereal }
    V412C  = YesNo( A636J );             { soup }
    V413   = YesNo( A636K );             { other liquids }
    if A636K = 1 & !pos("Z",A636Z) then V413 = 0; endif;     // necessary because of the way other liquids are collected
    V413S  = YesNo( A636KA );            { other liquids - sweetened }
    V413A  = NAtoZero(YesNo( A637AY ));  { yogurt as a drink - NAToZero necessary because yogurt as a drink is not asked to all women }	
    V413AS = YesNo( A637AYA );           { yogurt as a drink - sweetened }
    V413B  = YesNo( A636E );             { soymilk }
    V413BS = YesNo( A636EA );            { soymilk - sweetened }
    V413C  = YesNo( A636F );             { chocolate flavored drinks }
    V413D  = YesNo( A636H );             { sodas/malts/sports/energy drinks }
    V413E  = notappl;                    { !! CS liquid }
    V413F  = notappl;                    { !! CS liquid }
    V413G  = notappl;                    { !! CS liquid }
    V413H  = notappl;                    { !! CS liquid }
    V413I  = notappl;                    { !! CS liquid }
    V414A  = YesNo( A637F );             { any other vegetables }
    V414B  = YesNo( A637K );             { sausages, hot dogs, frankfurters, ham, bacon, salami }
    V414C  = YesNo( A637O );             { nuts, seeds }
    V414D  = YesNo( A637Q );             { any insects }
    V414E  = YesNo( A637B );             { bread/rice/noodles }
    V414F  = YesNo( A637D );             { plantains, white potatoes, yams, manioc, cassava }
    V414G  = YesNo( A637M );             { eggs }
    V414H  = YesNo( A637L );             { beef, pork, lamb }
    V414I  = YesNo( A637C );             { pumpkin, carrots, squash }
    V414J  = YesNo( A637E );             { dark green, leafy vegetables }
    V414K  = YesNo( A637G );             { mangoes, papayas }
    V414L  = YesNo( A637H );             { other fruits }
    V414M  = YesNo( A637J );             { liver, kidney, organ meats }
    V414N  = YesNo( A637I );             { fresh/dried fish/shellfish }
    V414O  = YesNo( A637N );             { food made from beans, peas, lentils }
    V414P  = YesNo( A637P );             { hard/soft cheese }
    V414Q  = notappl;                    { oil, fats, butter }
    V414R  = YesNo( A637R );             { sugary foods, chocolate, sweets, candies }
    V414S  = YesNo( A637V );             { any other solid, semi-solid }
    if A637V = 1 & !pos("Z",A637Z) then V414S = 0; endif;     // necessary because of the way other foods are collected 	
    V414T  = YesNo( A637T );             { chips, crisps, french fries, fried dough, instant noodles }
    V414U  = YesNo( A637U );             { red palm oil }
    V414V  = YesNo( A637A );             { yogurt not as a drink }
    V414W  = YesNo( A637S );             { common sentinel sweet food }
    V414WA = notappl;                    { !! CS food }
    V414WB = notappl;                    { !! CS food }
    V414WC = notappl;                    { !! CS food }
    V414WD = notappl;                    { !! CS food }
    V414WE = notappl;                    { !! CS food }
    { times gave child tinned/powdered/fresh milk }
    V469E  = A636CN;
    { times gave child infant formula }
    V469F  = A636BN;
    { times gave child yogurt not as a drink }
    V469X  = A637AN;

    { Disposal of youngest child's stools when not using toilet }
    recode A642 -> V465;
           1:5  -> A642;
            6   -> 9;      { left in the open/not disposed of }
                -> A642;
    endrecode;

	{ Last 6 months, health care provider advised what to feed to child }
    V486   = YesNo( A641 ); 	
  endif;


  { second - variables in REC45, record should exist for all women with completed interviews }
  { !!!!! make sure that AWSEC6B exist for all women as a good number of variables created   }
  {       here is for all women. If feeding practices for women (A643A-A643Y) are not        }
  {       collected as part of the survey, record AWSEC6B may not be present                 }
  if V015 = 1 then

    V417 = sOccurs(REC41);           { entries in pregnancy and postnatal roster }
    if V417 <> pregs3 then
      errmsg( 4170, V417, psecs, pregs3 )
    endif;
    V418 = sOccurs(REC43);           { entries in immunization roster }
    if V418 <> births3  then
      errmsg( 4180, V418, vsecs, births3 )
    endif;
    V418A = sOccurs(REC4A);          { entries in child health roster }
    if V418A <> births35 then
      errmsg( 4185, V418A, hsecs, births35 )
    endif;
    V419 = sOccurs(REC44);           { entries in height & weight section }
    if V419 <> births35 then
      errmsg( 4190, V419, hsecs, births35 )
    endif;

    { Last birth caesarean section }
    idxlastb = 0;                         // index to last birth
    if count( REC41 where M80 = 1 ) then
	  for i in REC41 do
	    if M80 = 1 then
          V401 = M17(i);
		  idxlastb = i;
		  break;
        endif;
      enddo;		
    else
      V401 = notappl;
    endif;
    { Currently breastfeeding }
    V404 = ( count(REC41 where M4 = 95) > 0 );
    { Currently amenorrheic }
    V405 = 0;
    if sOccurs(REC41) & !V213 & M6(1) = 96 then
      V405 = 1
    endif;
    { Currently abstaining }
    V406 = 0;
    if sOccurs(REC41) & M8(1) = 96 then
      V406 = 1
    endif;
    { Times breastfed during night }
    V407 = notappl;
    { Times breastfed during day }
    V408 = notappl;
    { Drank from bottle with nipple }
    if births35 & idxlastb then
      V415 = M38(idxlastb);
    else
      V415 = notappl
    endif;
    { Heard of oral rehydration }
    V416 = notappl;            // knowledge of ORS not in DHS-8  
    { When child put to breast }
    if births35 & idxlastb & M4(idxlastb) <> 94 then
      V426 = M34(idxlastb)
    else
      V426 = notappl
    endif;
    do i = 1 while i <= soccurs(RECH5)
      if HA0(i) = V003 then
        V420  = HA21(i);        { Measurer's code }
        V421  = HA21A(i);       { Assistant measurer's code }
        V437  = HA2(i);         { weight }
        V438  = HA3(i);         { height }
        V445  = HA40(i);        { body mass index }
		V446A = HA70(i);        { SD height for age }
		V446D = HA73(i);        { SD BMI for age }
        V447  = HA13(i);        { result of measurement }
        V447A = HA1(i);         { women's age from HH }
        if V042 = 1 then  { in anemia subsample }
          V452A = HA50(i);      { under age 18 }
          V452B = HA51(i);      { parent/caretaker line no. }
          V452C = HA52(i);      { inform consent }
          V453  = HA53(i);      { hemobglobin level }
          V454  = HA54(i);      { currently pregnant from HH }
          V455  = HA55(i);      { result measure from hemoglobin }
          V456  = HA56(i);      { hemoglobin adjusted by altitude }
          V456A = HA56A(i);     { hemoglobin adjusted by altitude (new WHO) }
          V457  = HA57(i);      { anemia level }
          V457A = HA57A(i);     { anemia level (new WHO) }
          { !!! candidate to be removed from DHS-9 as it hasn't been used for a while }
          V458  = HA58(i);      { agrees to referral }
        endif;
        V473A   = HA61(i);      { read consent HIV }
        V473B   = HA63(i);      { result measuring HIV }
        break;
      endif;
    enddo;
    if i > soccurs(RECH5) then  { woman not found }
      V447 = 7;
      if V042 = 1 then  { in anemia subsample }
        V455 = 7;
      endif;
    endif;
    { Have bednet for sleeping (household report) }
    V459 = HV227;
    { Children under 5 slept under bednet last night (HH report) }
    V460 = HV228;

    { !!!! V461 will be created in procedure AWSECSBC for malaria.     }
    { If no malaria module and mosquito nets data collected as part of }
	{ household questionnaire, then variables V461 and ML101 should be }
    { created here by moving the code defined in AWSECSBC for them     }
    { !!! candidate to be removed from DHS-9 as it was drop in DHS-5 }
    V462  = notappl;   { washing hands before preparing last meal }

    { smokes cigarettes }
    recode A1106 -> V463A;
             3   -> 0;
            1:2  -> 1;
                 -> A1106;
    endrecode;
    recode A1108 -> temp;
            1:2  -> 1;
             3   -> 2;
                 -> A1108;
    endrecode;
    V463B  = alfa2num( temp, A1109, "B" );  { pipe }
    V463C  = alfa2num( temp, A1109, "G" );  { chewing tobacco }
    V463D  = alfa2num( temp, A1109, "F" );  { snuff by nose }
    V463E  = alfa2num( temp, A1109, "A" );  { kreteks }
    V463F  = alfa2num( temp, A1109, "C" );  { cigars, cheroots, or cigarrillos }
    V463G  = alfa2num( temp, A1109, "D" );  { water pipe }
    V463H  = alfa2num( temp, A1109, "E" );  { snuff by mouth }
    V463I  = alfa2num( temp, A1109, "H" );  { betel quid with tobacco }
    V463J  = notappl;                       { !! CS }
    V463K  = notappl;                       { !! CS }
    V463L  = notappl;                       { !! CS }
    V463X  = alfa2num( temp, A1109, "X" );  { other }
    V463Z  = ( A1106 in 3,missing & temp <> 1 );    { smokes nothing }
    if A1106 = missing & temp = missing then
      V463Z = missing
    endif;
    { Frequency smokes cigarettes }
    V463AA  = Fr3toZro( A1106 );
    { Frequency smokes or uses other type of tobacco }
    V463AB  = Fr3toZro( A1108 );
    { Number of cigarettes in the last 24 hours }
    V464 = A1107;

    { !!! candidate to be removed from DHS-9 as it hasn't been used since DHS-5 }
    V466   = notappl;     { !! decision to take child for treatment if ill }

    { !!! V467A, V467E, V467G, V467H, and V467I candidates to be removed from DHS-9 as they haven't been used since DHS-5 }
    { factors preventing women from getting medical advice }
    V467A = notappl;  { !! know where to go }
    V467B = A1113A;   { permission to go }
    V467C = A1113B;   { getting money }
    V467D = A1113C;   { distance }
    V467E = notappl;  { taking transport }
    V467F = A1113D;   { go alone }
    V467G = notappl;  { no female provider }
    V467H = notappl;  { no provider }
    V467I = notappl;  { no drugs }
    V467J = notappl;  { !! CS }
    V467K = notappl;  { !! CS }
    V467L = notappl;  { !! CS }
    V467M = notappl;  { !! CS }

    V468  = 1;  { feeding questions for last birth }

    { revived in DHS-8 and asked to all women }
    V471A  = notappl;                    { any kind of milk }
    V471B  = notappl;                    { tea/coffee }
    V471C  = YesNo( A643X );             { other liquids }
    V471CS = YesNo( A643XA );            { other liquids - sweetened }
    V471D  = YesNo( A643U );             { sodas/malts/sports/energy drinks }
    V471E  = YesNo( A643T );             { fruit juice, fruit-flavored drinks }
    V471F  = notappl;                    { !! CS liquid }
    V471G  = notappl;                    { !! CS liquid }
    V471H  = notappl;                    { !! CS liquid }
    V471I  = notappl;                    { !! CS liquid }
    V472A  = YesNo( A643E );             { any other vegetables }
    V472B  = YesNo( A643J );             { sausages, hot dogs, frankfurters, ham, bacon, salami }
    V472C  = YesNo( A643N );             { nuts, seeds }
    V472D  = YesNo( A643P );             { any insects }
    V472E  = YesNo( A643A );             { bread/rice/noodles }
    V472I  = YesNo( A643B );             { pumpkin, carrots, squash }
    V472F  = YesNo( A643C );             { plantains, white potatoes, yams, manioc, cassava }
    V472J  = YesNo( A643D );             { dark green, leafy vegetables }
    V472K  = YesNo( A643F );             { mangoes, papayas }
    V472L  = YesNo( A643G );             { other fruits }
    V472M  = YesNo( A643I );             { liver, kidney, organ meats }
    V472H  = YesNo( A643K );             { beef, pork, lamb }
    V472G  = YesNo( A643L );             { eggs }
    V472N  = YesNo( A643H );             { fresh/dried fish/shellfish }
    V472O  = YesNo( A643M );             { food made from beans, peas, lentils }
    V472P  = YesNo( A643O );             { cheese, yogurt, milk products }
    V472Q  = notappl;                    { oil, fats, butter }
    V472R  = YesNo( A643Q );             { sugary foods, chocolate, sweets, candies }
    V472S  = YesNo( A643Y );             { any other food }
    V472T  = YesNo( A643S );             { chips, crisps, french fries, fried dough, instant noodles }
    V472U  = YesNo( A643W );             { red palm oil }
    V472V  = YesNo( A643V );             { sweetened tea, coffee, herbal drinks }
    V472W  = YesNo( A643R );             { sentinel sweet foods }
    V472WA = notappl;                    { !! CS food }
    V472WB = notappl;                    { !! CS food }
    V472WC = notappl;                    { !! CS food }
    V472WD = notappl;                    { !! CS food }
    V472WE = notappl;                    { !! CS food }
    
    { number of injections in last 12 months }
    V477  = notappl;
    { number of injections administered by a health worker }
    V478  = notappl;
    { place of injection by health worker }
    V479  = notappl;
    { syringe and needle from new, unopened package }
    V480  = notappl;

    { health insurance related variables }
    { covered by a health insurance }
    V481  = YesNo( A1114 );
    V481A = alfa2num( A1114, A1115, "A" );  { mutual/community health insurance }
    V481B = alfa2num( A1114, A1115, "B" );  { through employer }
    V481C = alfa2num( A1114, A1115, "C" );  { social security }
    V481D = alfa2num( A1114, A1115, "D" );  { other private }
    V481E = notappl;                        { !! CS }
    V481F = notappl;                        { !! CS }
    V481G = notappl;                        { !! CS }
    V481H = notappl;                        { !! CS }
    V481X = alfa2num( A1114, A1115, "X" );  { other }

    { child arrangements if unable }
    { !!! candidates to be removed from DHS-9 as they haven't been used since DHS-6 }
    {Arrange care of biological children under age 18 }
    V482A = notappl;
    { Primary caregiver of children under age 18 }
    V482B = notappl;
    { Arrange care of non-biological children < 18 }
    V482C = notappl;
	
	{ Minutes to nearest healthcare facility }
	V483A = A1101;
	{ Mode of transportation to nearest healthcare facility }
	recode A1102 -> V483B;
	        1:4  -> A1102 + 10;  // motorized from 11-19
			5:8  -> A1102 + 16;  // not motorized from 21-29
			     -> A1102;
    endrecode;	
    { Breasts examined for cancer by health care provider }
    V484A  = YesNo( A1103 );
	{ Ever tested for cervical cancer by health care provider }
    V484B  = YesNo( A1105 );
	
	{ Number of days respondent drank alcoholic drinks in the past month }
	recode A1110 -> V485A;
	         2   -> 96;       // never had consumed alcohol
			 1   -> A1111;
			     -> A1110;
    endrecode;
	{ Number of alcoholic drinks per day }
    V485B  = A1112; 	

  endif;    { end V015 = 1 for REC45 }

{ ----------------------------------------------------------------------------}
PROC AWSEC07_EDT
  { Marriage, still under record AWSEC07 }
  if V015 = 1 then
    { marital status }
    recode A701 :: A702 -> V501;
            1:2 ::      -> A701;
                ::   3  -> 0;
                ::  1:2 -> A703+2;
                ::      -> missing;
    endrecode;
    { Currently/formerly/never marr. }
    recode V501 -> V502;
              0 -> 0;
            1,2 -> 1;
          3,4,5 -> 2;
        missing -> missing;
    endrecode;

    { married more than once }
    V503 = A714;
    { living with husband }
    V504 = A709;
    { number of wives }
    if A711 = 2 then
      V505 = 0
    elseif A711 = missing then
      V505 = missing
    elseif A711 = 8 then
      V505 = 98
    elseif A712 = 98 then
      V505 = A712;
    else
      V505 = A712 - 1;   { core6 asks for number of wives including respondent }
    endif;
    { Wife rank number }
    if V505 = 0 then
      V506 = notappl
    elseif V505 in 98,missing & special(A713) then
      V506 = V505
    else
      V506 = A713
    endif;

    { month of first cohabitation }
    V507 = (A715C - 1) % 12 + 1;
    { Year of first cohabitation }
    V508 = int((A715C - 1) / 12) + 1900;
    { Date of first cohabitation (CMC) }
    V509 = A715C;
    { Completeness of date information in V509 }
    V510 = A715F;         { !! check coding }
    { Age at first marriage }
    if V501 <> 0 then
      V511 = int( (V509 - V011) / 12 )
    endif;

    { month of current cohabitation }
    V507A = (A719C - 1) % 12 + 1;
    { Year of current cohabitation }
    V508A = int((A719C - 1) / 12) + 1900;
    { Date of current cohabitation (CMC) }
    V509A = A719C;
    { Completeness of date information in V509A }
    V510A = A719F;         { !! check coding }
    { Age at current cohabitation }
    if V503 = 2 then
      V511A = int( (V509A - V011) / 12 )
    endif;
	
    { Years since first marriage }
    if V501 <> 0 then
      V512 = int( (V008 - V509) / 12 )
    endif;
    { Marital duration (grouped) }
    if V512 = notappl then
      V513 = 0
    else
      recode V512 -> V513;
             0: 4 -> 1;
             5: 9 -> 2;
            10:14 -> 3;
            15:19 -> 4;
            20:24 -> 5;
            25:29 -> 6;
            30:49 -> 7;
      endrecode;
    endif;

    { marriage to first birth interval }
    V221 = notappl;
    if V501 <> 0 then  { ever married }
      if V224 then
        V221 = B3(V224) - V509;
        if V221 < 0 then
          V221 = 996
        endif
      endif;
    endif;	  

    { Years since first union at sterilization }
    if V501 <> 0 then  { ever married }
      if V312 in 6:7 then
        V321 = int( (V317-V509) / 60 ) + 1;
        if V321 < 1 | V509 > V317 then
          V321 = 0
        elseif V321 > 6 then
          V321 = 6
        endif
      endif;
    else
      if V312 in 6:7 then
        V321 = 0
      endif;
    endif;           { end ever married }

    { Years since current union at sterilization }
    if V501 in 1,2 & V503 = 2 then  { ever married }
      if V312 in 6:7 then
        V321A = int( (V317-V509A) / 60 ) + 1;
        if V321A < 1 | V509A > V317 then
          V321A = 0
        elseif V321A > 6 then
          V321A = 6
        endif
      endif;
    else
      if V312 in 6:7 then
        V321A = 0
      endif;
    endif;           { end ever married }

    { sexual activity variables }
    { Age at first intercourse }
    V525 = A722;       { it is assumed that code 0 is never had sex }
    if A722 = 95 then V525 = 96 endif;   { at first union }
    if A722 = refused then V525 = missing endif; 
    { Time since last intercourse }
    if V525 <> 0 then
      V527 = unitnumb( A723U, A723N );
      if V527 in notappl then V527 = missing endif;  { to cover for some missings in age at first sex that skipped these questions }
    endif;
    { Time in days since last intercourse(g) }
    recode V527  -> V528;
         notappl -> notappl;
         199,299 -> missing;
         399,499 -> missing;
         100:130 -> V527 - 100;
         131:198 -> 31;
         200:204 -> (V527 - 200) * 7;
         205:499 -> 31;
         990:999 -> V527 - 900;
         missing -> missing;
    endrecode;
    { Time in months since last intercourse(imputed) }
    if A723F = 0 then     { !! check coding }
      if A722 = 0 | A723N = notappl then
        V529 = notappl
      elseif A723U = 9 | A723N in missing,refused then
        V529 = missing
      elseif A723N > 90 then
        V529 = 900 + A723N
      else
        recode A723U -> V529;
                   1 -> int(A723N/30);
                   2 -> int(A723N/4.3);
                   3 -> A723N;
                   4 -> A723N*12;
                   9 -> 900 + A723N;
        endrecode
      endif
    elseif A723F = 9 then
      V529 = 996
    else
      V529 = 997
    endif;
    { Flag for V529 }
    if V525 <> 0 then
      V530 = A723F          { !! check coding }
    endif;
    { Age at first intercourse (imp) }
    if V525 = 96 then
      V531 = V511
    else
      V531 = V525
    endif;
    if A722F = 3 then     { Reduce by one year - assumes reported age at birth }
      V531 = V531 - 1
    elseif !A722F in 0,6 then
      V531 = 97
    endif;
    { Flag for V531 }
    V532 = A722F;         { !! check coding }
    { Have ever been married }
    V535 = Fr3toZro( A702 );
    { Recent sexual activity }
    recode A723U ::  A723N  ->  LastSex;
                 :: missing ->  missing;
             1   ::         ->  int( A723N / 7 );
             2   ::         ->  A723N;
             3   ::         ->  A723N * 4.3;
             4   ::         ->  A723N * 52;
                 ::         ->  missing;
    endrecode;
    if A722 = 0 then
      V536 = 0;
    elseif lastsex = missing then
      V536 = missing
    elseif lastsex <= 3 then    { was 4 }
      V536 = 1;
    elseif noccurs(REC41) then
      if M8(1) = 96 then      { still PP abstaining }
        V536 = 2;
      else
        V536 = 3;
      endif;
    else
      V536 = 3;
    endif ;
    { Months of abstinence }
    if V536 = 2 then
      V537 = M9(1);             { postpartum }
    elseif V536 = 3 then
      recode V529 -> V537;      { non postpartum : time since last sex }
          60:500  -> 60;
         995:998  -> V529-900;
             999  -> missing;
                  -> V529;
      endrecode;
    else
      V537 = notappl;
    endif;
    { !!! variables V538 to V540 candidates to be removed from DHS-9, they were only used in DHS-5 } 	
    { How previous marriage or union ended }
    V538  = notappl;
    { Who received most of late husbands property }
    V539  = notappl;
    { Respondent received any of late husband's assets or valuables }
    V540  = notappl;
    { Intends to postpone intercourse until marriage }
    V541  = notappl;
    { Has a marriage certificate for last marriage }
	V542 = YesNo( A706A );
	{ marriage certificate document }
	if A706A <> notappl then
      V543A = alfa2num( A706A, A706B, "A" );  { marriage certificate from church, mosque, religious institution }
      V543B = alfa2num( A706A, A706B, "B" );  { marriage certificate from civil authority }
      V543C = alfa2num( A706A, A706B, "C" );  { other document from religious institution }
      V543D = alfa2num( A706A, A706B, "D" );  { other document from civil authority }
      V543E = notappl;                        { !!! CS document }
      V543F = notappl;                        { !!! CS document }
      V543G = notappl;                        { !!! CS document }
      V543X = alfa2num( A706A, A706B, "X" );  { other document }
    endif;	  
    { Current marriage ever registered with civil authority }
	V544 = YesNo( A707 );
	
    { !! include nuptiality country specific variables here }
    { some country specific variables in this section are part of the AIDS module }
    { check for these variables in the AIDS country specific section              }

  endif;         { end V015 = 1 }

{ ----------------------------------------------------------------------------}

PROC AWSEC08_EDT
  if V015 = 1 then
    { fertility preferences }
    if V312 in 6:7 then
      V602 = 4
    elseif V213 = 1 then
      recode A803 -> V602;
                1 -> 1;       { have another }
                2 -> 3;       { no more }
                8 -> 2;       { undecided/DK }
                  -> missing;
      endrecode;
    else
      recode A804 -> V602;
                1 -> 1;       { have another }
                2 -> 3;       { no more }
                3 -> 5;       { says can't get pregnant }
                8 -> 2;       { undecided/DK }
                  -> missing;
      endrecode;
    endif;
    { special adjustments }
    if A805U = 9 & A805N = 94 then    { !! }  { Says can't get pregnant }
      V602 = 5
    elseif A804 = notappl & A722 = 0 then
      V602 = 6
    endif;
    { Preferred waiting time }
    if V602 = 1 then
      V603 = unitnumb( A805U, A805N );
      if V603 = 993 then V603 = 994                     { Soon/now }
      elseif V603 = 994 then V603 = default             { Can't get pregnant }
      elseif V603 = 995 then V603 = 993                 { After marriage }
      endif
    endif;
    { Preferred waiting time (grpd) }
    recode   V603  -> V604;
           notappl -> notappl;
           missing -> missing;
       199,299,999 -> missing;
       198,298,998 -> 8;
               994 -> 0;                      { Soon/Now }
             >=990 -> 7;                      { Non::numeric }
           100:171 -> int( (V603-100)/12 );
           172:197 -> 6;
           200:205 -> V603-200;
           206:297 -> 6;
                   -> default;
    endrecode;
    { Desire for more children }
    recode V602 :: V604 -> V605;
              1 ::  0:1 -> 1;
              1 ::  2:6 -> 2;
              1 ::      -> 3;
              2 ::      -> 4;
              3 ::      -> 5;
              4 ::      -> 6;
              5 ::      -> 7;
              6 ::      -> 8;
        missing ::      -> missing;
        notappl ::      -> notappl;
    endrecode;

    { ideal number of children }
    V613 = A813;
    { ideal number of children }
    recode V613 -> V614;
            0:6 -> V613;
          <= 90 -> 6;
                -> 7;          { non numeric response }
    endrecode;
    { Time for future birth }
    V616 = unitnumb( A805U, A805N );
    if V616 = 993 then V616 = 994               { Soon/Now }
    elseif V616 = 994 then V616 = 995           { Can't get pregnant }
    elseif V616 = 995 then V616 = 993           { After marriage }
    endif;
    { Husband's desire for children }
    V621 = A822;

    { unmet need variables }
    pregnant = V213;
    amenor   = V405;
    xusing   = ( V312 <> 0 );
    whenwant = notappl;
    fail     = 0;
    infert   = 0;

    if pregnant then                    { Determines if current pregnancy}
      recode V225 -> whenwant;          { or last birth was wanted       }
              1:3 -> V225;
                  -> 2;
      endrecode;
    elseif sOccurs(REC41) then
      recode M10(1) -> whenwant;
              1:3   -> M10(1);
                    -> 2;
      endrecode;
    endif;

    i = V018;
    if amenor then
      { find last birth in calendar }
      do i = V018 while i <= vcallen & !pos(VCAL(1)[i:1], "B")
      enddo;
      i = i + 1;
    endif;
    if pregnant | amenor then             { Determines failure of method }
      { loop until the month before current/last pregnancy }
      while i <= vcallen & pos(VCAL(1)[i:1], "P") do
        i = i + 1;
      enddo;
      { check if "became pregnant while using" as discontinuation cause in calendar column 2 VCAL(2) }
      if i <= vcallen & pos(VCAL(1)[i:1],vcalmeth) & pos(VCAL(2)[i:1], "1") then
        fail = 1;
      endif;
    endif;

    if !pregnant & !amenor then         { Determines infertility }
      recode A236U ::  A236N  -> lper;
                   :: missing -> 0;               { Assumes less than 6 months }
                   ::  94:96  -> 99;              { Assumes more than 6 months }
                   ::   >90   -> 0;
                 1 ::         -> int(A236N/30);
                 2 ::         -> int(A236N/4.3);
                 3 ::         -> A236N;
                 4 ::         -> A236N*12;
                   ::         -> 0;
      endrecode;
      if lper >= 6 then infert = 1 endif;
    endif;

    { Pregnancy in the last 5 years }
	numeric preg5y = count(REC22 where P19 < 60);
	
    { !!! this code to be used in case that calendar wasn't used by country or that }
    {     either no column 3 (marital history) was used and/or column 1 didn't      }
    {     collect information on use of methods                                     }
    { !!! use V302 instead of V302A if ever used asked in the contraceptive table   }
    { infert = married once, 5+ years ago, no pregnancies, not pregnant and never used }
    if V503 = 1 & V512 >= 5 & !preg5y & !pregnant & (V302 = 0 | V302A = 0) then
      infert = 1
    endif;

    { !!! note that this definition requires the use of calendar columns 1 & 3:   }
    {     column 1 to know if no methods were used in the past 5 years            }
    {     column 3 to know if continuously married during the past 5 years        }
    {     If either column is not present or if methods weren't collected in      }
    {     column 1, use the definition given after the comment { !!! } below      }
    {
    x = 60;
    if V019 < x then x = V019 endif;                { short calendar }
    do i = V018 while i < V018+x & pos(VCAL(3)[i:1],"X") &      { cont. married }
                      pos(VCAL(1)[i:1],"BPT0")              { not using }
    enddo;
    if i >= V018+x then
      { continuously married and not using for five years }
      if !preg5y & !pregnant then
        infert = 1;
      endif;
    endif;
    }
    { !!! }

    infert2 = infert;

    { !!! use V302 instead of V302A if ever used asked in the contraceptive table }
    { infert2 = married 5+ years ago, no pregnancies, not pregnant and never used }
    if            V512 >= 5 & !preg5y & !pregnant & (V302 = 0 | V302A = 0) then
      infert2 = 1
    endif;
    { !!! }

    if V602 = 5 | V376 = 23 | V3A08D = 1 then  { Can't get pregnant or menopausal }
      infert2 = 1
    endif;
    { Exposure }
    recode pregnant :: amenor :: infert -> V623;
              1     ::        ::        -> 1;  { Pregnant }
                    ::   1    ::        -> 2;  { Amenorrheic }
                    ::        ::   1    -> 3;  { Infertile }
                    ::        ::        -> 0;  { Fecund }
    endrecode;
    { Exposure (definition 2) }
    recode pregnant :: amenor :: infert2 -> V625;
              1     ::        ::         -> 1;  { Pregnant }
                    ::   1    ::         -> 2;  { Amenorrheic }
                    ::        ::    1    -> 3;  { Infertile }
                    ::        ::         -> 0;  { Fecund }
    endrecode;

    recode V502 :: V528    -> sexst;
              1 ::         -> 1;      { Currently married or }
                ::  <31    -> 1;      { Sex in last month or }
                ::   95    -> 1;      { Sex in last 4 weeks (special code) }
                :: notappl -> 0;      { Never had sex }
                ::         -> 2;      { Not currently married, and }
                                     { not had sex in last month  }
    endrecode;

    { Unmet need  }
    { variable "fail" may not exist, if no discontinuation column in calendar }
    recode xusing :: sexst :: V623 :: fail :: whenwant :: V605 -> V624;
             1    ::       ::      ::      ::          ::  5:7 -> 4;   { Users - limit }
             1    ::       ::      ::      ::          ::      -> 3;   { Users - space }
                  ::       ::  1,2 ::  1   ::    3     ::      -> 6;   { Fail - limit }
                  ::       ::  1,2 ::  1   ::          ::      -> 5;   { Fail - space }
                  ::  1    ::  1,2 ::      ::    2     ::      -> 1;   { P/A Need - space }
                  ::  1    ::  1,2 ::      ::    3     ::      -> 2;   { P/A Need - limit }
                  ::       ::    3 ::      ::          ::      -> 9;   { Infecund }
                  ::  1    ::    0 ::      ::          ::  2:4 -> 1;   { Need - space }
                  ::  1    ::    0 ::      ::          ::  5   -> 2;   { Need - limit }
                  ::  0    ::      ::      ::          ::      -> 0;   { Never had sex }
                  ::  2    ::      ::      ::          ::      -> 8;   { No sex last month}
                  ::       ::  1,2 ::      ::    1     ::      -> 7;   { P/A No need }
                  ::       ::      ::      ::          ::  1   -> 7;   { No need }
                  ::       ::      ::      ::          ::      -> missing;
    endrecode;

    { Unmet need (definition 2) }
    { whether it'll be a problem if pregnant in next few weeks not in DHS-VI and forward }
    recode xusing :: sexst :: V625 :: fail :: whenwant :: V605  -> V626;
             1    ::       ::      ::      ::          ::  5:7  -> 4;   { Users - limit }
             1    ::       ::      ::      ::          ::       -> 3;   { Users - space }
                  ::       ::  1,2 ::  1   ::    3     ::  1:3  -> 5;   { Fail - space }
                  ::       ::  1,2 ::  1   ::    3     ::       -> 6;   { Fail - limit }
                  ::       ::  1,2 ::  1   ::          ::       -> 5;   { Fail - space }
                  ::  1    ::  1,2 ::      ::    2     ::       -> 1;   { P/A Need - space }
                  ::  1    ::  1,2 ::      ::    3     ::  1:3  -> 1;   { P/A Need - space }
                  ::  1    ::  1,2 ::      ::    3     ::       -> 2;   { P/A Need - limit }
                  ::       ::    3 ::      ::          ::       -> 9;   { Infecund }
                  ::  1    ::    0 ::      ::          ::  2    -> 1;   { Need - space }
                  ::  1    ::    0 ::      ::          ::  3:4  -> 1;   { Need - space }
                  ::  1    ::    0 ::      ::          ::  5    -> 2;   { Need - limit }
                  ::  0    ::      ::      ::          ::       -> 0;   { Never had sex }
                  ::  2    ::      ::      ::          ::       -> 8;   { No sex last month }
                  ::       ::  1,2 ::      ::    1     ::       -> 7;   { P/A No need }
                  ::       ::      ::      ::          ::  1    -> 7;   { No need }
                  ::       ::      ::      ::          ::       -> missing;
    endrecode;

    { Unmet need (definition 3) }
    { Definition of V625A and V626A for the revised unmet need definition - Bradley/Croft/Fishel }
    { Check that all variables used in the calculation below exist - if not the indicator may not be calculatable
      Also check for any special codes on the variables below that are not in the standard questionnaire !!! }
    { unmet need variables }
    pregnant = V213;
    amenor   = V405;
    xusing   = ( V312 <> 0 );
    whenwant = notappl;

    cutoff   = 24;
    amenor24 = ( V405 & P19(1) < cutoff ); { amenorrhea up to cutoff (P19(1) is time between last pregnancy and interview - months)}

    { Computation of last period }
    recode V215 :: preg5y :: amenor -> lper3;
        missing ::        ::        -> 0;       { Considered fecund }
            993 ::        ::        -> 9999;    { Hysterectomy - considered infecund (separate from 994 in some surveys) }
            994 ::        ::        -> 9999;    { In menopause/hysterectomy - considered infecund }
            996 ::   >0   ::        -> (-1);    { Never menstruated, but had a birth in the last five years - considered fecund }
            996 ::        ::        -> 9999;    { Never menstruated - considered infecund }
            995 ::   >0   ::        -> (-2);    { Before last birth, but had birth in last 5 years - considered fecund - flagged cases on V227 if not amenorrheic}
            995 ::        ::        -> 9997;    { Considered infecund if last birth > than cutoff, otherwise should be caught as amenorrheic (although some are not - see V227 for flag) }
           >990 ::        ::        -> 0;       { Special values not considered as infecund }
        100:490 ::        ::    1   -> (-3);    { Amenorrheic 24-59 months - time since last birth duration given - considered fecund }
        100:190 ::        ::        -> int((V215-100)/30);     { days   }
        200:290 ::        ::        -> int((V215-200)/4.3);    { weeks  }
        300:390 ::        ::        -> V215-300;               { months }
        400:490 ::        ::        -> (V215-400)*12;          { years  }
                ::        ::        -> (-4);    { Other special values not considered as infecund }
    endrecode;
    { fixes for handling inconsistencies - only affects cases where not reported amenorrheic, reported time since last period and this is before last pregnancy, and pregnancy in the last 5 years }
    if !amenor24 & ( soccurs(REC41) = 0 | M6(1) in 97,99,missing ) & preg5y > 0 & ( lper3 in 1:990 & lper3 > P19(1) | V215 = 995 )  then
      amenor = 1;
      if P19(1) < cutoff then amenor24 = 1 endif;
      if V215 = 995 then
        errmsg("Not reported as amenorrheic on M6 but last period before last pregnancy and V215 = 995 - treating this case as amenorrheic") summary;
      else
        errmsg("Not reported as amenorrheic on M6 but last period before last pregnancy (V215=%d P19(1)=%d)",V215,P19(1));
      endif;
    endif;

    infec1   = 0; { married 5+ years ago, no children in past 5 years, not pregnant, and never used }
    infec3   = 0; { "Can't get pregnant" on future intentions or "menopausal/hysterectomy" on {DHSVI} reason not currently using a contraceptive method/{DHSII-DHSV} reason not intending to use a contraceptive method in the future }
    infec4   = 0; { Time since last birth >= 6 months or menopausal/hysterectomy or never menstruated or last period before last birth }

    { Whether/when the current pregnancy or the last birth was wanted }
    x = notappl;
    if pregnant then         { Determines if current pregnancy wanted ... }
      x = V225;
    elseif amenor24 then     { ... or last pregnancy wanted }
      x = M10(1);
    endif;
    recode  x  -> whenwant;
       notappl -> notappl;
           1:3 -> x;
           4,8 -> 8;     { Cases of don't know or "up to God treated as code 8 here }
               -> 9;     { Other codes treated as missing (instead of to space (2) as in the old version) }
    endrecode;

    { infec1 = married 5+ years ago, no pregnancy in past 5 years, not pregnant, and never used contraception }
    if V502 = 1 & V512 >= 5 & !preg5y & !pregnant & ({ V302 = 0 } V302A = 0 ) then { !!! comment out V302 or V302A depending on which exists !!! }
      infec1 = 1
    endif;

    { infec3 = Not pregnant and not amenorrheic (up to cutoff) and says
               a) she can't get pregnant on future desires, or
               b) she is menopausal or had hysterectomy on reason not using contraception (was reason not intending to use in the future in DHSII-V) }
    if !pregnant & !amenor24 then
      if V602   = 5 |       { Can't get pregnant }
         V3A08D = 1         { or menopausal/hysterectomy - DHSVI: reason not currently using a contraceptive method }
 {       V376   = 23      } {                            - DHSIII-DHSV: reason not intending to use a contraceptive method in the future }  { not active - use this line if V3A08D does not exist !!! }
      then
        infec3 = 1
      endif;
    endif;

    { infec4 = Not pregnant and not amenorrheic (up to cutoff) and
               a) she is menopausal or had hysterectomy on "time since last birth" (V215 = 994 [or 993]), or
               b) she never menstruated on "time since last birth" (V215 = 996), or
               c) last period was before last birth and last birth was more than 60 months ago, or
               d) not amenorrheic 24-59 months and last period was 6+ months ago }
    if !pregnant & !amenor24 then      { Determines infecundity based on last period }
      if     lper3 >= 9990        then infec4 = 1        { infec4a }
      elseif lper3 >= 6 & !amenor then infec4 = 1 endif; { infec4b }

      { Logic below is for checking the time since last period variable - please review with Trevor }
      if V502=1 then
        if     lper3 = (-1) then errmsg("lper3=(-1)") summary;
        elseif lper3 = (-2) then errmsg("P19(1)=%d cutoff=%d V215=%d V227=%d M6=%d lper3=%d",P19(1),cutoff,V215,V227,M6(1),lper3) summary;
        elseif lper3 = (-3) then errmsg("lper3=(-3)") summary;
        elseif lper3 = (-4) then errmsg("lper3=(-4) V215=%d",V215);
        elseif lper3 >= 6   then errmsg("lper3>=6"  ) summary;
        elseif lper3 = 9999 then errmsg("lper3=9999") summary;
        elseif lper3 = 9998 then errmsg("lper3=9998") summary;
        elseif lper3 = 9997 then
          if {idxlastb &} sOccurs(REC41) then 
            errmsg("lper3=%d P19(1)=%d cutoff=%d V215=%d V227=%d M6=%d",lper3,P19(1),cutoff,V215,V227,M6(1));
          else
            errmsg("lper=9997") summary;
          endif;
        endif;
      endif;

    endif; { Not pregnant and not amenorrheic }

    { combine infecundity groups }
    infec = (infec1 | infec3 | infec4);

    { Exposure (revised definition - Bradley/Croft/Fishel) }
    recode pregnant :: amenor24 :: infec -> V625A;    { Pregnant, Amenorrheic, Infecund, or Fecund }
              1     ::          ::       -> 1;  { Pregnant }
                    ::   1      ::       -> 2;  { Amenorrheic }
                    ::          ::    1  -> 3;  { Infecund }
                    ::          ::       -> 0;  { Fecund }
    endrecode;

    recode V502 :: V528    -> sexst;  { Sexually active status }
              1 ::         -> 1;      { Currently married or }
                ::  <31    -> 1;      { Sex in last month or }
                ::   95    -> 1;      { Sex in last 4 weeks (special code) }
                :: notappl -> 0;      { Never had sex }
                ::         -> 2;      { Not currently married, and not had sex in last month }
    endrecode;

    { Unmet need (revised definition - Bradley/Croft/Fishel) }
    recode xusing :: sexst :: V625A :: whenwant :: V605 -> V626A;
              1   ::       ::       ::          ::  5:7 -> 4;   { Users - limit }
              1   ::       ::       ::          ::      -> 3;   { Users - space }
                  ::       ::  1,2  ::    2     ::      -> 1;   { P/A Need - space }
                  ::       ::  1,2  ::    3     ::      -> 2;   { P/A Need - limit }
                  ::       ::  1,2  ::    8     ::      -> 1;   { P/A Need - space - if 'not sure' on whenwant (some surveys) }
                  ::       ::  1,2  ::    9     ::      -> 99;  { Missing }
                  ::       ::  1,2  ::    1     ::      -> 7;   { P/A No need }
                  ::  1    ::    0  ::          ::  2   -> 1;   { Need - space }
                  ::  1    ::    0  ::          ::  3:4 -> 1;   { Need - space }
                  ::  1    ::    0  ::          ::  5   -> 2;   { Need - limit }
                  ::  1    ::    0  ::          ::  1   -> 7;   { No need }
                  ::       ::    3  ::          ::      -> 9;   { Infecund }
                  ::  0    ::       ::          ::      -> 0;   { Never had sex }
                  ::  2    ::       ::          ::      -> 8;   { No sex last month }
                  ::       ::       ::          ::  1   -> 7;   { No need }
                  ::       ::       ::          ::      -> 999;
    endrecode;
    if V626A in 99,999 then errmsg("V626A=%d V602=%d V605=%d",V626A,V602,V605); V626A=missing endif;

    { ideal number of children by gender }
    if A814A = notappl then
      { Ideal number of boys }
      V627 = V613;
      { Ideal number of girls }
      V628 = V613;
      { Ideal number of either sex }
      V629 = V613;
    else
      V627 = A814A;
      V628 = A814B;
      V629 = A814C;
    endif;
    { !!! candidate to be removed from DHS-9, it was removed starting with DHS-5 } 	
    { Problem if became pregnant }
    V631 = notappl;    { !! a problem if pregnant in the next few weeks }

    { Decision maker for using contraception }
    V632  = A818;
    { Decision maker for not using contraception }
    V632A = notappl;

    { !!! variables V633a and V633C to V633G candidates to be removed from DHS-9, they were removed starting with DHS-6 } 	
    { respondent reasons for not having sex }
    V633A = notappl;             { husband has STD }
    V633B = YesNo( A1047 );      { husband has other women }
    V633C = notappl;             { recent birth }
    V633D = notappl;             { tired, mood }
    V633E = notappl;             { !! CS }
    V633F = notappl;             { !! CS }
    V633G = notappl;             { !! CS }

    { !!! candidate to be removed from DHS-9, it was only used in DHS-5 } 	
    { Husband knows that respondent is using contraception }
    V634 = notappl;
	{ Respondent opinion compared to husband's on use of contraception }
    V635 = A819;
	{ Husband or family member pressured respondent to become pregnant }
    V636 = YesNo( A820 );

    { !! include fertility preferences country specific variables here }

  endif;       { end V015 = 1 }

{ ----------------------------------------------------------------------------}

PROC AWSEC09_EDT
  { husband/partner background and woman's work }
  if V015 = 1 then
    { partner education }
    if A903 <> notappl then
      V701 = LevEduc( A903, A904 );
    endif;
    { Highest year of education }
    V702 = GraEduc( A904, A905 );

    { Husband/partner work in last 7 days/12 months }
    recode A906 :: A907 -> V704A;
             1  ::      -> 1;      { Worked last 7 days }
                ::   1  -> 2;      { Worked last 12 months }
             2  ::   2  -> 0;      { Didn't work last 12 months }
             8  ::      -> 8;      { Don't know }
                ::   8  -> 8;      { Don't know }
                ::      -> A906;
    endrecode;
    { partner occupation }
    recode V704A  -> V704;
              0   -> 0;           { not working, didn't work last 12 months }
              8   -> 99998;       { don't know }
          missing -> missing;
                  -> A908;
    endrecode;
    { !! Partner's occupation (grpd) }
    recode  V704  -> V705;
             0    ->  0;       { Not currently working or not since 12 months ago }
                  ->  1;       { Professional/technical/managerial                         }
                  ->  2;       { Clerical                                                  }
                  ->  7;       { Services                                                  }
                  ->  3;       { Sales                                                     }
                  ->  4;       { Agricultural - self employed                              }
                  ->  5;       { Agricultural - employee                                   }
                  ->  6;       { Household and domestic                                    }
                  ->  8;       { Skilled manual                                            }
                  ->  9;       { Unskilled manual                                          }
           99998  -> 98;	   { Don't know                                                }
          notappl -> notappl;
          missing -> missing;
                  -> default;  { !! - Add in country specific recoding }
    endrecode;

    { woman current work }
    if A909 = 1 | A910 = 1 then
      V714 = 1
    else
      V714 = YesNo( A911 );
    endif;
    { Have a job from which respondent was absent }
    V714A = YesNo( A911 );

    { Husbands education-single yrs }
    V715 = SingEduc( V701, V702, xprm, xsec );

    { respondent occupation }
    recode  A913  -> V716;
          notappl -> 0;
          missing -> missing;
                  -> 99998;      { Don't know }
                  -> A913;
    endrecode;
    { !! respondent'S occupation (grpd) }
    recode V716  -> V717;
             0   ->  0;       { Not currently working or not since 12 months ago }
                 ->  1;       { Professional/technical/managerial                         }
                 ->  2;       { Clerical                                                  }
                 ->  7;       { Services                                                  }
                 ->  3;       { Sales                                                     }
                 ->  4;       { Agricultural - self employed                              }
                 ->  5;       { Agricultural - employee                                   }
                 ->  6;       { Household and domestic                                    }
                 ->  8;       { Skilled manual                                            }
                 ->  9;       { Unskilled manual                                          }
           99998 -> 98;	      { Don't know                                                }
         missing -> missing;
                 -> default;  { !! - Add in country specific recoding }
    endrecode;

    { Work for family, others, self }
    V719 = A914;
    { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
    { Works at home or away }
    V721 = notappl;

    { partner education attainment }
    V729 = AttnEduc( V701, V702 );
    { partner age }
    V730 = A902;

    { Worked in last 12 months }
    if A911 = 1 then
      V731 = 3              { have a job but didn't work last 7 days }
    elseif V714 = 1 then
      V731 = 2              { currently working }
    else
      V731 = YesNo( A912 ); { whether worked last 12 months }
    endif;

    { employment all year/seasonal }
    V732 = A915;

    { who decides how to spend respondent earnings }
    recode  A919 ->  V739;
              1  ->   1;    { respondent alone }
              2  ->   4;    { husband/partner alone }
              3  ->   2;    { respondent & partner }
              6  ->   5;    { someone else }
                 ->  A919;
    endrecode;

    { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
    { type of land where respondent works }
    V740 = notappl;

    { type of earnings }
    recode A916 -> V741;
              4 -> 0;
                -> A916;
    endrecode;

    { decision making process }
    { Final say on own health care }
    recode  A922 ->  V743A;
              1  ->   1;       { 1 Respondent                            }
              2  ->   4;       { 2 Husband, partner                      }
              3  ->   2;       { 3 Respondent & husband, partner jointly }
              4  ->   5;       { 4 Someone else                          }
            { 5  ->   3;       !! 5 Respondent & someone else jointly    }
              6  ->   6;       { 6 Other                                 }
                 ->  A922;
    endrecode;
    {  Final say on making large household purchases }
    recode  A923 ->  V743B;
              1  ->   1;       { 1 Respondent                            }
              2  ->   4;       { 2 Husband, partner                      }
              3  ->   2;       { 3 Respondent & husband, partner jointly }
              4  ->   5;       { 4 Someone else                          }
            { 5  ->   3;       !! 5 Respondent & someone else jointly    }
              6  ->   6;       { 6 Other                                 }
                 ->  A923;
    endrecode;
    { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
    { Final say on making household purchases for daily needs }
    V743C = notappl;
    { Final say on visits to family or relatives }
    recode  A924 ->  V743D;
              1  ->   1;       { 1 Respondent                            }
              2  ->   4;       { 2 Husband, partner                      }
              3  ->   2;       { 3 Respondent & husband, partner jointly }
              4  ->   5;       { 4 Someone else                          }
            { 5  ->   3;       !! 5 Respondent & someone else jointly    }
              6  ->   6;       { 6 Other                                 }
                 ->  A924;
    endrecode;
    { !!! candidate to be removed from DHS-9, it was removed since DHS-5 } 	
    { Final say on food to be cooked every day }
    V743E = notappl;
    { Final say on deciding what to do with money husband earns }
    recode  A921 ->  V743F;    { how husband earnings are spent }
              1  ->   1;       { 1 Respondent                            }
              2  ->   4;       { 2 Husband, partner                      }
              3  ->   2;       { 3 Respondent & husband, partner jointly }
              4  ->   7;       { 4 husband/partner has no earning        }
            { 5  ->   3;       !! 5 Respondent & someone else jointly    }
              6  ->   6;       { 6 Other                                 }
                 ->  A921;
    endrecode;

    { wife beaten justified }
    V744A = YesNo( A932A );  { goes out }
    V744B = YesNo( A932B );  { neglect children }
    V744C = YesNo( A932C );  { argues }
    V744D = YesNo( A932D );  { refuses sex }
    V744E = YesNo( A932E );  { burns food }
    { Owns a house alone or jointly }
    V745A = A925;
    if A925 = 6 then V745A = 0 endif;
    { Title deed on house own by respondent }
    recode A926 :: A927 -> V745C;
             1  ::   1  -> 1;      { Has a title deed and respondent on title }
             1  ::   2  -> 2;      { Has a title deed but respondent not on title }
             1  ::      -> 3;      { Has a title DK if respondent on title }
             2  ::      -> 0;      { Does not have a title deed }
                ::      -> A926;
    endrecode;
    { Owns land alone or jointly }
    V745B = A928;
    if A928 = 6 then V745B = 0 endif;
    { Title deed on land own by respondent }
    recode A929 :: A930 -> V745D;
             1  ::   1  -> 1;      { Has a title deed and respondent on title }
             1  ::   2  -> 2;      { Has a title deed but respondent not on title }
             1  ::      -> 3;      { Has a title DK if respondent on title }
             2  ::      -> 0;      { Does not have a title deed }
                ::      -> A929;
    endrecode;
    { Earns more than partner }
    V746  = A920;

    { !! include husband's background and woman work country specific variables here }

  endif;             { end V015 = 1 }

{ ----------------------------------------------------------------------------}

PROC AWSEC10_EDT
  { AIDS and STDs }
  { knowledge of STIs }
  if V015 = 1 then
    V750 = ( A1001 = 1 | A1040 = 1 );
    if V750 <> 1 then
      if special( A1001 ) then
        V750 = A1001;
      elseif special( A1040 ) then
        V750 = A1040;
      endif ;
    endif ;

    { knowledge of AIDS }
    V751 = YesNo( A1001 );

    { prompted responses to prevent AIDS }
    V754BP = notappl;       
    V754CP = notappl;
    V754DP = notappl;
    V754JP = notappl;
    V754WP = notappl;
    V756   = notappl;
	if V012 in 15:24 & V751 = 1 then
      V754BP = notappl;               { not having sex at all }
      V754CP = YesNo( A1005 );        { always use condoms during sex }
      V754DP = YesNo( A1003 );        { one uninfected partner who has no other partners }
      V754JP = YesNo( A1004 );        { mosquito bites }
      V754WP = YesNo( A1006 );        { sharing food with persons with AIDS }
      { possible for a healthy looking person to have AIDS }
      V756 = YesNo( A1007 );
	  { following instructions resolve problems that could have been caused by imputation }
	  if V754CP = notappl then
        V754CP = missing;
        V754DP = missing;
        V754JP = missing;
        V754WP = missing;
        V756   = missing;
      endif;		
    endif;	  

    { variables coming from marriage and sexual activity section }
    { V761x, V767x, V768x, V821x, V832x, V833x, V834x, V835x }
	{ last sexual partner }
	if V525 <> 0 & V527 < 400 then        { had sex last year }
      { Last intercourse used condom }
      V761  = ( A727 = 1 | poschar("GH",A726) );
      { Relationship with last sex partner }
      recode A730 -> V767A;
               1  -> 1;      { husband }
               2  -> 7;      { live-in partner }
               3  -> 2;      { boy friend not living w/respondent }
               4  -> 4;      { casual acquaintance }
               5  -> 6;      { prostitute }
               6  -> 96;     { other }
                  -> A730;
      endrecode;
      { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
      { Length of time knows last partner }
      V768A = notappl;
      { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
      { Last sexual partner younger, the same age or older }
      V821A = notappl;
      { Used condom every time had sex with last sex partner (last 12 months) }
      V833A = notappl;
      { Age of last sexual partner }
      V834A = notappl;
      { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
      { Alcohol consumption last time had sex }
      V835A = notappl;
      { How long ago first had sex with last partner }
      V852A = notappl;
      { Times in last 12 months had sex with last partner }
      V853A = notappl;
    endif;	  
    
    { second to last sexual partner }
    if A731 = 1 then
      { Last intercourse used condom }
      V761B  = YesNo( A732 );
      { Relationship with last sex partner }
      recode A733 -> V767B;
               1  -> 1;      { husband }
               2  -> 7;      { live-in partner }
               3  -> 2;      { boy friend not living w/respondent }
               4  -> 4;      { casual acquaintance }
               5  -> 6;      { prostitute }
               6  -> 96;     { other }
                  -> A733;
      endrecode;
      { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
      { Length of time knows last partner }
      V768B = notappl;
      { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
      { Second to last sexual partner younger, the same age or older }
      V821B = notappl;
      { Time since last intercourse with next to last sexual partner }
      V832B = notappl;
      { Used condom every time had sex with last sex partner (last 12 months) }
      V833B = notappl;
      { Age of last sexual partner }
      V834B = notappl;
      { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
      { Alcohol consumption last time had sex }
      V835B = notappl;
      { How long ago first had sex with 2nd to last partner }
      V852B = notappl;
      { Times in last 12 months had sex with 2nd to last partner }
      V853B = notappl;
    endif;

    { third to last sexual partner }
    if A734 = 1 then
      { Last intercourse used condom }
      V761C = YesNo( A735 );
      { Relationship with last sex partner }
      recode A736 -> V767C;
               1  -> 1;      { husband }
               2  -> 7;      { live-in partner }
               3  -> 2;      { boy friend not living w/respondent }
               4  -> 4;      { casual acquaintance }
               5  -> 6;      { prostitute }
               6  -> 96;     { other }
                  -> A736;
      endrecode;
      { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
      { Length of time knows last partner }
      V768C = notappl;
      { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
      { third to last sexual partner younger, the same age or older }
      V821C = notappl;
      { Time since last intercourse with next to last sexual partner }
      V832C = notappl;
      { Used condom every time had sex with last sex partner (last 12 months) }
      V833C = notappl;
      { Age of last sexual partner }
      V834C = notappl;
      { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
      { Alcohol consumption last time had sex }
      V835C = notappl;
      { How long ago first had sex with 3rd to last partner }
      V852C = notappl;
      { Times in last 12 months had sex with 3rd to last partner }
      V853C = notappl;
    endif;

    { Brand of condoms used for last sex }
    V762A = A728;
    { source for male condoms for last sexual intercourse }
    V762   = A729;


    { STI in the last 12 months }
    if A722 = 0 then   { Never had sex.  Need to check because of skip from A1040 }
      V763A = 0;
      V763B = 0;
      V763C = 0;
      V763D = notappl;                        { !! CS }
      V763E = notappl;                        { !! CS }
      V763F = notappl;                        { !! CS }
      V763G = notappl;                        { !! CS }
    else
      V763A = NAtoZero( YesNo(A1043) );       { disease through sexual contact (STD) }
      V763B = YesNo( A1045 );                 { genital sore or ulcer }
      V763C = YesNo( A1044 );                 { abnormal discharge }
      V763D = notappl;                        { !! CS }
      V763E = notappl;                        { !! CS }
      V763F = notappl;                        { !! CS }
      V763G = notappl;                        { !! CS }
    endif ;

    { sexual partners in last 12 months }
	nsexp = (A723U in 1:3) + (A731 = 1) + (A734 = 1 ); 
    if A722 = 0 | A723U = 4 then  { never had sex or last time more than 1 year ago }
      V766B = 0;
    elseif A723U = 9 | A723N in missing,refused then
      V766B = missing;
    elseif nsexp <= 2 then      { one or two sex partners }
      V766B  = nsexp
    else
      V766B  = 98;              { unknown }
    endif;
    { No. other than husband had sex in last 12 months }
    V766A = nsexp;              { New logic here allows for up to three different spouses in one year }
    if nsexp > 0 then
      if nsexp >= 1 & A730 in 1,2 then         { last sex with spouse, live-in partner }
        V766A = V766A - 1;
      endif;
      if nsexp >= 2 & A733 in 1,2 then         { second to last sex with spouse, live-in partner }
        V766A = V766A - 1;
      endif;
      if nsexp >= 3 & A736 in 1,2 then         { third to last sex with spouse, live-in partner }
        V766A = V766A - 1;
      endif;
    endif ;

    { sources of advice/treatment for STI }
    V770  = notappl;
    V770A = notappl;   { public hospital }
    V770B = notappl;   { !! CS public sector }
    V770C = notappl;   { !! CS public sector }
    V770D = notappl;   { !! CS public sector }
    V770E = notappl;   { !! CS public sector }
    V770F = notappl;   { !! CS public sector }
    V770G = notappl;   { !! CS public sector }
    V770H = notappl;   { !! CS public sector }
    V770I = notappl;   { !! CS public sector }
    V770J = notappl;   { !! CS public other }
    V770K = notappl;   { private hospital/clinic/doctor }
    V770L = notappl;   { !! CS private sector }
    V770M = notappl;   { !! CS private sector }
    V770N = notappl;   { !! CS private sector }
    V770O = notappl;   { !! CS private sector }
    V770P = notappl;   { !! CS private sector }
    V770Q = notappl;   { !! CS private sector }
    V770R = notappl;   { !! CS private sector }
    V770S = notappl;   { !! CS private other }
    V770T = notappl;   { !! CS other }
    V770U = notappl;   { !! CS other }
    V770V = notappl;   { !! CS other }
    V770W = notappl;   { !! CS other }
    V770X = notappl;   { other }
    
    { transmission of AIDS from mother to child }
    V774A = notappl;   { during pregnancy }
    V774B = notappl;   { during delivery }
    V774C = notappl;   { by breastfeeding }

    { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
    { knows someone suspected to have AIDS }
    V775  = notappl;

    { would want to remain secret if family member infected }
    V777 = notappl;
    { Would be ashamed if someone in the family had HIV }
    V777A  = notappl;
    { would be willing to care for relative with AIDS }
    V778 = notappl;
    { female teacher with AIDS should be allowed to continue teaching }
    V779 = notappl;
    { should children be taught about condoms }
    V780 = notappl;

    { ever been tested for AIDS }
    if A1015 = 1 | A1019 = 1 | A1024 = 1 then
      V781 = 1
    elseif A1015 = missing | A1019 = missing | A1024 = missing then
      V781 = missing
    else
      V781 = 0
    endif;

    { knowledge of places for AIDS testing }
    V783 = notappl;
	
	{ place to get HIV testing }
    V784A = notappl;   { public hospital }
    V784B = notappl;   { !! CS public sector }
    V784C = notappl;   { !! CS public sector }
    V784D = notappl;   { !! CS public sector }
    V784E = notappl;   { !! CS public sector }
    V784F = notappl;   { !! CS public sector }
    V784G = notappl;   { !! CS public sector }
    V784H = notappl;   { !! CS public sector }
    V784I = notappl;   { !! CS public sector }
    V784J = notappl;   { !! CS public other }
    V784K = notappl;   { private hospital/clinic/doctor }
    V784L = notappl;   { !! CS private sector }
    V784M = notappl;   { !! CS private sector }
    V784N = notappl;   { !! CS private sector }
    V784O = notappl;   { !! CS private sector }
    V784P = notappl;   { !! CS private sector }
    V784Q = notappl;   { !! CS private sector }
    V784R = notappl;   { !! CS private sector }
    V784S = notappl;   { !! CS private sector }
    V784T = notappl;   { !! CS other }
    V784U = notappl;   { !! CS other }
    V784V = notappl;   { !! CS other }
    V784X = notappl;   { other }

    { heard about other STIs }
    V785  = YesNo( A1040 );

    { Last 12 months had sex in return for gifts, cash or other }
    V791A  = notappl;
	{ Used a method at last sexual intercourse }
    V792  = YesNo( A725 );
	{ method used }
	if A725 = 1 then
      V792A = alfa2num( 1, A726, "A" );     { female sterilization }
      V792B = alfa2num( 1, A726, "B" );     { male sterilization }
      V792C = alfa2num( 1, A726, "C" );     { IUD }
      V792D = alfa2num( 1, A726, "D" );     { injectables }
      V792E = alfa2num( 1, A726, "E" );     { implants }
      V792F = alfa2num( 1, A726, "F" );     { pill }
      V792G = alfa2num( 1, A726, "G" );     { condom }
      V792H = alfa2num( 1, A726, "H" );     { female condom }
      V792I = alfa2num( 1, A726, "I" );     { emergency contraception }
      V792J = alfa2num( 1, A726, "J" );     { standard days method }
      V792K = alfa2num( 1, A726, "K" );     { lactational amenorrhea }
      V792L = alfa2num( 1, A726, "L" );     { rhythm }
      V792M = alfa2num( 1, A726, "M" );     { withdrawal }
      V792N = notappl;                      { !!! CS method }
      V792O = notappl;                      { !!! CS method }
      V792P = notappl;                      { !!! CS method }
      V792X = alfa2num( 1, A726, "X" );     { other modern method }
      V792Y = alfa2num( 1, A726, "Y" );     { other traditional method }
    endif;	  

    { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
    { condom use at first sex }
    V820   = notappl;
    { wife justified to ask husband to use condom if he has STI }
    V822   = YesNo( A1046 );
    { get AIDS by wichcraft or supernatural means }
    V823   = notappl;
    { Drugs to avoid HIV transmission to baby during pregnancy }
    V824   = yesno( A1009 );
    { would buy vegetables from shopkeeper with AIDS }
    V825   = yesno( A1034 );

    { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
    { last time tested for HIV }
    V826   = notappl;
    { Months ago most recent HIV test, now calculated based on dates }
    V826A  = notappl;
    if A1022 = 1 | A1024 = 1 then
	  if A1025M in 1:12 & A1025Y in 1980:2027 then
        V826A = V008 - cmcode(A1025M,A1025Y);
		if V826A >= 96 then V826A = 96 endif;
      else
        V826A = 98;	  
	  endif;
    elseif A1022 = 2 then
	  if A1023M in 1:12 & A1023Y in 1980:2027 then
        V826A = V008 - cmcode(A1023M,A1023Y);
		if V826A >= 96 then V826A = 96 endif;
      else
        V826A = 98;	  
	  endif;
    endif;
    { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
    { last HIV test was offered or required }
    V827   = notappl;

    { did get results from last test }
    V828   = yesno( A1027 );    { from last test }
    if V828 = notappl & A1020 <> notappl then
      V828  = yesno( A1020 );   { or since time went for delivery and before baby was born }
    endif;
    if V828 = notappl & A1017 <> notappl then
      V828  = yesno( A1017 );   { or from antenatal if no other test given }
    endif;

    { place where last test took place }
    if A1026 <> notappl then
      V829  =  A1026;             { ever tested or more recent test }
    elseif A1019 = 1 & idxlastb then
      recode A435(idxlastb) -> V829;       { or at delivery and no antenatal care }
                            -> A435(idxlastb) - 10; { !!! recode codes in question A435 as codes in A1026 and A1016 }
      endrecode;
    elseif A1015 = 1 then
      V829  =  A1016;             { or from antenatal care }
    endif;

    { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
    { age of first sexual partner }
    V830  = notappl;
    { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
    { age difference with first sexual partner }
    V831 = notappl;

    { lifetime sexual partners }
    V836  = A737;
    { Heard of ARVs to treat HIV }
    V837  = YesNo( A1008 );

    { advice during antenatal care visit }
    V838A  = notappl;   { AIDS from mother }
    V838B  = notappl;   { things to do }
    V838C  = notappl;   { tested for HIV }

    { test offered as part of antenatal visit }
    V839  = notappl;
    { offered HIV test between the time went to delivery and before baby was born }
    V839A = notappl;
    { Tested for HIV as part of antenatal visit }
    V840  = YesNo( A1015 );
    { Tested for HIV between the time went to delivery and before baby was born }
    V840A = YesNo( A1019 );
    { Got results of HIV test as part of antenatal visit }
    V841  = YesNo( A1017 );
    { Got results of HIV test when tested before baby was born }
    V841A = YesNo( A1020 );
    { Place were AIDS test was taken as part of antenatal visit }
    V842  = A1016;
    { Tested for AIDS since test as part of antenatal visit }
    V843  = YesNo( A1022 );

    { sex negotiation with partner }
    { Can respondent refuse sex }
    V850A  = YesNo( A1049 );
    { Can ask partner to use condom }
    V850B  = YesNo( A1050 );

    { Received counseling after tested for AIDS during antenatal care }
    V855   = notappl;
    { Knowledge and use of HIV test kits }
    recode A1032 :: A1033 -> V856;
             2   ::       -> 0;      { Never heard of HIV test kits }
             1   ::   1   -> 1;      { Have been tested with HIV test kits }
             1   ::   2   -> 2;      { Knows test kits but never tested with them }
             1   ::       -> 3;      { Knows test kits un-known if tested }
                 ::       -> A1032;
    endrecode;
    { Children with HIV should be allowed to attend school with children without HIV }
    V857A  = YesNo( A1035 );
    { People hesitate to take HIV test because reaction of other people if positive }
    V857B  = notappl;
    { People talk badly about people with or believed to have HIV }
    V857C  = notappl;
    { People with or believed to have HIV lose respect from other people }
    V857D  = notappl;
    { Would be afraid to get HIV from contact with saliva from infected person }
    V858   = notappl;
    { Knowledge and attitude to PrEP to prevent getting HIV }
	recode A1010 :: A1011 -> V859;
	         2   ::       -> 0;
	         1   ::   1   -> 1;
	         1   ::   2   -> 2;
	         1   ::   8   -> 3;
	             ::       -> A1010;
    endrecode;				 
    { Date of most recent HIV test: Month, Year, CMC }
    if A1022 = 1 | A1024 = 1 then
	  V860M = A1025M;
	  V860Y = A1025Y;
	  if A1025M in 1:12 & A1025Y in 1980:2027 then
        V860C = cmcode(A1025M,A1025Y)
      else		
        V860C = 9998
	  endif;
    elseif A1022 = 2 then
	  V860M = A1023M;
	  V860Y = A1023Y;
	  if A1023M in 1:12 & A1023Y in 1980:2027 then
        V860C = cmcode(A1023M,A1023Y)
      else		
        V860C = 9998
	  endif;
    endif;
    { Result of HIV test }
	V861  = A1028;
    { Date received first HIV test positve: Month, Year, CMC }
	if A1028 = 1 then
	  V862M = A1029M;
	  V862Y = A1029Y;  if A1029M = 95 then V862Y = 9995 endif;
	  if A1029M in 1:12 & A1029Y in 1980:2027 then
        V862C = cmcode(A1029M,A1029Y)
      elseif A1029M = 95 then 
	    V862C = V860C		
      else		
        V862C = 9998
	  endif;
	endif;
    { Currently taking ARVs }
	V863  = YesNo( A1030 );
    { Number of HIV tests }
	V864  = A1031;
    { Disclosed HIV status to others }
	V865  = YesNo( A1037 );
    { Respondent feels ashamed of HIV status }
	V866  = YesNo( A1038 );
    { Things happened because HIV positive status: }
	V867A = YesNo( A1039A );    { people talk badly }
	V867B = YesNo( A1039B );    { someone else disclosed status }
	V867C = YesNo( A1039C );    { verbally insulted/harassed/threatened }
	V867D = YesNo( A1039D );    { healthcare workers talked badly }
	V867E = YesNo( A1039E );    { healthcare workers verbally abused }
	V867F = notappl;            { !!! CS }
	V867G = notappl;            { !!! CS }
  endif ;      { end V015 = 1 }

  { ----------------------------------------------------------------------------}
  { characteristics of interview }
  if V015 = 1 then
    { time interview started }
    V801 = A101H * 100 + A101M;
    if A101H = missing | A101H >= 97 | A101M = missing | A101M >= 97 then
      V801 = missing
    endif;
    { time interview finalized }
    V802 = A1116H * 100 + A1116M;
    if A1116H = missing | A1116H >= 97 | A1116M = missing | A1116M >= 97 then
      V802 = missing
    endif;
    { duration of interview }
    if AVISITS = 1 then
      if V801 = missing | V802 = missing then
        V803 = missing
      else
        V803 = (A1116H * 60 + A1116M) - (A101H * 60 + A101M);
        if V803 > 95 then V803 = 95 endif
      endif
    else
      V803 = 96
    endif;
    if V803 = default | V803 < 0 then
      errmsg( 8030, V803, A101H, A101M, A1116H, A1116M );
      V803 = 97
    endif;
    { Number of visits }
    V804 = AVISITS;
    { Interviewer identification }
    V805 = AINTNUM;
    { !!! candidate to be removed from DHS-9, if no paper surveys anticipated } 	
    { Keyer identification }
    V806 = notappl;

    { prescense of others at the end of section 8 }
    V811 = Fr3ToZro( A931A );   { children < 10 }
    V812 = Fr3ToZro( A931B );   { husband }
    V813 = Fr3ToZro( A931C );   { other males }
    V814 = Fr3ToZro( A931D );   { other females }

    { prescense of others during sexual activity questions }
    V815A = YesNo( A738A );      { children < 10 }
    V815B = YesNo( A738B );      { male adults   }
    V815C = YesNo( A738C );      { female adults }

  endif;      { end V015 = 1 }

{ ----------------------------------------------------------------------------}

PROC AWSECHPV_EDT
  { Human papilloma virus - module }
  if V015 = 1 then
    HPV03  = YesNo(AHPV03);	                { Ever received a vaccination against HPV }
    HPV04  = YesNo(AHPV04);	                { Ever received an HPV vaccination card }
    HPV05  = AHPV05;     	                { Number of HPV vaccine doses }
    HPV06  = AHPV06;     	                { Place where most recent HPV vaccination was received } 
  endif;
  
PROC AWSECMH_EDT
  { mental health - module }
  if V015 = 1 then
    MTH1   = AMTHGAD1;                      { Last 2 weeks: feeling nervous, anxious, on edge } 
    MTH2   = AMTHGAD2;                      { Last 2 weeks: not able to stop/control worrying }
    MTH3   = AMTHGAD3;                      { Last 2 weeks: worrying about things }
    MTH4   = AMTHGAD4;                      { Last 2 weeks: trouble relaxing }
    MTH5   = AMTHGAD5;                      { Last 2 weeks: restless and hard to sit still }
    MTH6   = AMTHGAD6;                      { Last 2 weeks: become easily annoyed/irritable }
    MTH7   = AMTHGAD7;                      { Last 2 weeks: feeling afraid as something awful might happen }
    MTH8   = AMTHPHQ1;                      { Last 2 weeks: little interest/pleasure in doing things }
    MTH9   = AMTHPHQ2;                      { Last 2 weeks: feeling down, depressed or hopeless }
    MTH10  = AMTHPHQ3;                      { Last 2 weeks: trouble falling asleep or sleeping too much } 
    MTH11  = AMTHPHQ4;                      { Last 2 weeks: feeling tired or having little energy }
    MTH12  = AMTHPHQ5;                      { Last 2 weeks: poor appetite or overeating }
    MTH13  = AMTHPHQ6;                      { Last 2 weeks: feeling bad about yourself, you are a failure or let yourself or family down }
    MTH14  = AMTHPHQ7;                      { Last 2 weeks: trouble concentrating in reading or watching TV }
    MTH15  = AMTHPHQ8;                      { Last 2 weeks: moving/speaking slowly or moving around a lot more than usual }
    MTH16  = AMTHPHQ9;                      { Last 2 weeks: thoughts of better off dead or hurting yourself }
    MTH17  = YesNo(AMTH2);                  { Ever tried to seek help for the things you experienced }
    if AMTH2 = 1 then 	
      MTH18A = Alfa2num(1, AMTH3, "A");     { doctor/medical personnel }
      MTH18B = Alfa2num(1, AMTH3, "B");     { social service organization }
      MTH18C = Alfa2num(1, AMTH3, "C");     { social worker }
      MTH18D = Alfa2num(1, AMTH3, "D");     { community health worker/fieldworker }
      MTH18E = Alfa2num(1, AMTH3, "E");     { religious leader }
      MTH18F = Alfa2num(1, AMTH3, "F");     { current/former spouse/partner }
      MTH18G = Alfa2num(1, AMTH3, "G");     { other family member }
      MTH18H = Alfa2num(1, AMTH3, "H");     { friend }
      MTH18I = Alfa2num(1, AMTH3, "I");     { neighbor }
      MTH18J = notappl;                     { CS } 
      MTH18K = notappl;                     { CS }  
      MTH18L = notappl;                     { CS }  
      MTH18M = notappl;                     { CS }  
      MTH18N = notappl;                     { CS }  
      MTH18O = notappl;                     { CS }  
      MTH18P = notappl;                     { CS }  
      MTH18X = Alfa2num(1, AMTH3, "X");     { other }
    endif;	  
    MTH19  = YesNo(AMTH4A);                 { Ever been told by a doctor/health care worker you have: depression }
    MTH20  = YesNo(AMTH4B);                 { Ever been told by a doctor/health care worker you have: anxiety }
    MTH21  = YesNo(AMTH5);                  { Last 2 weeks took medication prescribed by doctor/health worker for depression/anxiety }
    MTH22  = AMTH6;                         { PHQ score }                      
    if (AMTH6 >= 10 | AMTHPHQ9 in 1:3) then { Referral based on PHQ score } 
       MTH23  = 1; //Referral card provided 
    else 
       MTH23  = 2; //No referral, other 
    endif;
	{ GAD score }
    MTH24 = Score(MTH1) + Score(MTH2) + Score(MTH3) + Score(MTH4) + 
            Score(MTH5) + Score(MTH6) + Score(MTH7);
	
  endif;  

{ ----------------------------------------------------------------------------}

PROC AWSECCHD_EDT
  { chronic disease - module }
  if V015 = 1 then
    { Ever had blood pressure measured by doctor other healthcare worker }
    CHD01  = YesNo( ACHD01 );
    { Ever been told that you have high blood pressure or hypertension }
    CHD02  = YesNo( ACHD02 );
    { In past 12 months have been told that you have high blood pressure or hypertension }
    CHD03  = YesNo( ACHD03 );
    { Have been prescribed medication to control high blood pressure }
    CHD04  = YesNo( ACHD04 );
    { Are you taken medication to control your blood pressure }
    CHD05  = YesNo( ACHD05 );
    { Ever had blood sugar measured by doctor other healthcare worker }
    CHD06  = YesNo( ACHD06 );
    { Ever been told that you have high blood sugar or diabetes }
    CHD07  = YesNo( ACHD07 );
    { In past 12 months have been told that you have high blood sugar or diabetes }
    CHD08  = YesNo( ACHD08 );
    { Have been prescribed medication to control high blood sugar }
    CHD09  = YesNo( ACHD09 );
    { Are you taken medication to control your blood sugar }
    CHD10  = YesNo( ACHD10 );
    { Ever been told by a doctor or other healthcare worker that you have heart disease }
    CHD11  = YesNo( ACHD11 );
    { Are you receiving any treatment for your heart disease or chronic heart condition }
    CHD12  = YesNo( ACHD12 );
    { Ever been told by a doctor or other healthcare worker that you have lung disease }
    CHD13  = YesNo( ACHD13 );
    { Are you receiving any treatment for your lung disease }
    CHD14  = YesNo( ACHD14 );
    { Ever been told by a doctor or other healthcare worker that you have cancer or a tumor }
    CHD15  = YesNo( ACHD15 );
    { Are you receiving any treatment for cancer or tumor }
    CHD16  = YesNo( ACHD16 );
    { Ever been told by a doctor or other healthcare worker that you have depression }
    CHD17  = YesNo( ACHD17A );
    { Ever been told by a doctor or other healthcare worker that you have anxiety }
    CHD18  = YesNo( ACHD17B );
    { Are you receiving any treatment for depression or anxiety }
    CHD19  = YesNo( ACHD19 );
    { Ever been told by a doctor or other healthcare worker that you have arthritis }
    CHD20  = YesNo( ACHD20 );
    { Are you receiving any treatment for arthritis }
    CHD21  = YesNo( ACHD21 );
    { Ever been told by a doctor or other healthcare worker that you have other chronic disease }
    CHD22  = YesNo( ACHD22 );
    { Are you receiving any treatment for other chronic disease }
    CHD23  = YesNo( ACHD23 );
    { Ever heard of cervical cancer }
    CHD24  = YesNo( ACHD24 );
    { Ever heard of any test for cervical cancer }
    CHD25  = YesNo( ACHD25 );
    { Ever been tested by a doctor or other healthcare worker for cervical cancer }
    CHD27  = YesNo( ACHD27 );
    { Years since last cervical cancer test }
    CHD28  = ACHD28;
    { Result of last cervical cancer }
    CHD29  = ACHD29;
    { Did receive treatment for cervix }
    CHD30  = YesNo( ACHD30 );
    { Did receive treatment the same or different day the results were received }
    CHD31  = ACHD31;
    { Did have any follow up visits after treatment }
    CHD32  = YesNo( ACHD32 );
    { Did have any follow up visits because of test results }
    CHD33  = YesNo( ACHD33 );
  endif;	

{ ----------------------------------------------------------------------------}

PROC AWSECM2_EDT
  { !!! candidates to be removed from DHS-9: MMC3, MMC4 as they haven't been used since DHS-4 } 	
  { single variables for maternal mortality  }
  if V015 = 1 then
    MMC1 = AMM07;                       { REC83 Occurrences }
    if MMC1 <> soccurs(AWSECM3) then
      errmsg( 8400, MMC1, soccurs(AWSECM3) )
    endif;
    MMC2 = AMM11;                         { Number of Preceding Births }
    MMC3 = notappl;                       { Sister's reporting, may exist in country }
    MMC5 = 12;                             { !! Cut Off Age }
  endif;           { end V015 = 1 }

{ ----------------------------------------------------------------------------}

PROC AWSECM3_EDT
  if V015 = 1 then
    { !!! candidates to be removed from DHS-9: MM5, MM10, MM11, MM13, MM15 as they haven't been used since DHS-4 } 	
    { Maternal Mortality - optional section }
    for i in AWSECM3_EDT do
      if AMM13 <> 0 then
        MMIDX(i) = i;                    { Index to mortality Mortality Sec. }
        MM1(i) = AMM14;                  { Sex of Sibling }
        if special( MM1(i) ) then
          missex = missex + 1;
        endif;

        { Survival Status of Sibling }
        MM2(i) = YesNo( AMM15 );
        if special(AMM15) then
          misliv = misliv + 1;
        endif;

        MM3(i) = AMM16;                  { Actual Age of Sibling }
        MM4(i) = AMM16C;                 { CMC Date of Birth of Sibling }
        MM5(i) = notappl;                { Marital Status, may exist for country }
        MM6(i) = AMM17;                  { Number of Years Ago Sibling Died }
        MM7(i) = AMM18;                  { Age of Sibling at Death }
        MM15(i)= notappl;                { Year of Death of Sibling, may exist for country }
        MM8(i) = AMM17C;                 { CMC Date of Death of Sibling }

        { AMM19 - Died During Pregnancy }
        { AMM20 - Died During Delivery  }
        { AMM21 - Died 2 Months After Delivery }
        recode AMM19 :: AMM20 :: AMM21 ::    AMM22        -> xmm9;
             notappl ::       ::       ::                 -> notappl;
                 1   ::       ::       ::                 -> 2;
                     ::   1   ::       ::                 -> 3;
                     ::       ::   1   :: 0:41,98,missing -> 5;	{ Don't know and missing are assumed to be within the first 42 days }
                     ::       ::   1   ::                 -> 6;
                 2   ::   2   ::   2   ::                 -> 1;
                     ::       ::       ::                 -> missing;
        endrecode;
        MM9(i) = xmm9;                   { Sibling's Death & Pregnancy }

        MM10(i) = notappl;               { Death Related to Pregnancy, may exist in country }
        MM11(i) = notappl;               { Sibling Cause of Death, may exist in country }
        recode AMM21 :: AMM22   -> xmm12;
                  1  :: missing -> 199;
                  1  :: 98      -> 198;
                  1  ::         -> 100+AMM22;
                     ::         -> notappl;
        endrecode;
        MM12(i) = xmm12;                 { Time Between Delivery & Death, may exist in country }
        MM13(i) = notappl;               { Place of Death, may exist in country }
        MM14(i) = notappl;               { Number of Pregnancies }
        recode AMM23 :: AMM24   -> xmm16;
             notappl :: notappl -> notappl;
                   2 :: 2       -> 0;
                   1 ::         -> 1;
                     :: 1       -> 2;
                     ::         -> missing;
        endrecode;
        MM16(i) = xmm16;          { Death due to violence or accident }

        { !! include maternal mortality country specific variables here }

      endif;
    enddo;

  endif;           { end V015 = 1 }

{ ----------------------------------------------------------------------------}

PROC AWSECDV_EDT
  if V044 = 1 & V015 = 1 then         {Result & module selection }
    { domestic violence module }
    D005 = ADWEIGHT;                  { domestic violence weight }
    { Ever had an intimate relationship with a man }
	recode DV04 :: DV05 -> D100;
	        2   ::  2   -> 0;      // never
 	        1   ::      -> 1;      // currently in a relationship
	            ::  1   -> 2;      // formerly in a relationship      
	            ::      -> DV04;
    endrecode;				
  			
    if V501 <> 0 | D100 in 1:2 then    { Ever married or had intimate relationship with a man }
      
	  { jealous if talk to other men }    
      D101A = DVRecode(DV06A1, DV06A2);
	  { accuses of being unfaithful }     
      D101B = DVRecode(DV06B1, DV06B2);
	  { not permit to meet with female friends }     
      D101C = DVRecode(DV06C1, DV06C2);
	  { limit contact with respondent's family }     
      D101D = DVRecode(DV06D1, DV06D2);
	  { insist in knowing where respondent is }     
      D101E = DVRecode(DV06E1, DV06E2);
	  { not trust respondent with money }
      D101F = notappl;         
      D101G = notappl;         { !! CS }
      D101H = notappl;         { !! CS }
      D101I = notappl;         { !! CS }
      D101J = notappl;         { !! CS }

      { Number of control issues }
      D102 = ( D101A in 1:4 ) +  ( D101B in 1:4 ) + ( D101C in 1:4 ) + ( D101D in 1:4 ) + ( D101E in 1:4 ) +
             ( D101F in 1:4 ) +  ( D101G in 1:4 ) + ( D101H in 1:4 ) + ( D101I in 1:4 ) + ( D101J in 1:4 );

      { Emotional violence }
	  { humilliate in front of others }
      D103A = DVRecode(DV07A1, DV07A2);
	  { harm you or someone you care about }
      D103B = DVRecode(DV07B1, DV07B2);
      { insult or make feel bad }	  
      D103C = DVRecode(DV07C1, DV07C2);
      D103D = notappl;           { !! CS }
      D103E = notappl;           { !! CS }
      D103F = notappl;           { !! CS }

      { Ever any emotional violence }
      if DV07A1 = 1 | DV07B1 = 1 | DV07C1 = 1 then   { !!! add other CS }
        D104 = 1;
      elseif DV07A1 = missing | DV07B1 = missing | DV07C1 = missing then
        D104 = missing
      else
        D104=0
      endif;

      { Physical violence }
	  { push, shake, throw something }
      D105A = DVRecode(DV08A1, DV08A2);
      { slap }	  
      D105B = DVRecode(DV08B1, DV08B2);
	  { punch with fist }
      D105C = DVRecode(DV08D1, DV08D2);
	  { kick or drag }
      D105D = DVRecode(DV08E1, DV08E2);
	  { chocke or burn }
      D105E = DVRecode(DV08F1, DV08F2);
	  { threaten with knife or other weapon }
      D105F = DVRecode(DV08G1, DV08G2);
      { forced sex when not wanted }	  
      D105H = DVRecode(DV08H1, DV08H2);
      { unwanted sexual acts }	  
      D105I = DVRecode(DV08J1, DV08J2);
	  { twist arm, pull hair }
      D105J = DVRecode(DV08C1, DV08C2);
	  { physically forced to perform sexual acts }
      D105K = DVRecode(DV08I1, DV08I2);
      D105G  = notappl;          { !! CS }
      D105L  = notappl;          { !! CS }
      D105M  = notappl;          { !! CS }
      D105N  = notappl;          { !! CS }

      { !!! include CS questions according to the type of violence }
      { violence not severe }
      if DV08A1 = 1 | DV08B1 = 1 | DV08C1 = 1 | DV08D1 = 1 then
        D106 = 1;
      elseif DV08A1 = missing | DV08B1 = missing | DV08C1 = missing | DV08D1 = missing then
        D106 = missing;
      else
        D106 = 0
      endif;
      { severe violence }
      if DV08E1 = 1 | DV08F1 = 1 | DV08G1 = 1 then
        D107 = 1;
      elseif DV08E1 = missing | DV08F1 = missing | DV08G1 = missing then
        D107 = missing
      else
         D107 = 0
      endif;
      { sexual violence }
      if DV08H1 = 1 | DV08I1 = 1 | DV08J1 = 1 then
        D108 = 1
      elseif DV08H1 = missing | DV08I1 = missing | DV08J1 = missing then
        D108 = missing
      else
         D108 = 0
      endif;

      { First time it happened }
      D109  = notappl;
      { Age when first forced to have sexual acts by husband or partner }
      D109A = DV18;
	  
      { result of husband acts }
      D110A = YesNo( DV10A );   { cuts, bruises, aches }
      D110B = YesNo( DV10B );   { injuries, sprains, dislocations }
      D110C = notappl;          { !! CS went to health facility as result of husbands acts }
      D110D = YesNo( DV10C );   { wounds, broken bones/teeth/, other }
      D110E = notappl;          { !! CS }
      D110F = notappl;          { !! CS }
      D110G = notappl;          { !! CS }
      D110H = notappl;          { !! CS }
      { any result of husband acts }
      if D110A = 1 | D110B = 1 | D110C = 1 | D110D = 1 |
         D110E = 1 | D110F = 1 | D110G = 1 | D110H = 1 then
        D111 = 1;
      elseif D110A = missing | D110B = missing | D110C = missing |
             D110D = missing | D110E = missing | D110F = missing |
             D110G = missing | D110H = missing then
        D111 = missing;
      else
        D111 = 0;
      endif;

      { Ever phys hurt husband when he was not hurting you }
      D112  = YesNo( DV11 );
      { How often physically hurt husband in last 12 months }
      D112A = Fr3toZro( DV12 );
      { Partner drinks alcohol }
      D113  = YesNo( DV13 );
      { Times partner gets drunk }
      D114  = Fr3toZro( DV14 );
    endif;  { end ever married }

    { physical abuse by others than husband }
    xdv16 = DV22;
    if DV22 = 3 then xdv16 = missing endif;      { !!! to force refused to answer into missing in D115x }
    D115B  = alfa2num( xdv16, DV23, "A" );       { mother }
    D115C  = alfa2num( xdv16, DV23, "B" );       { father/step father }
    D115D  = alfa2num( xdv16, DV23, "D" );       { daughter/son }
    D115E  = notappl;                            { !! son alone }
    D115F  = alfa2num( xdv16, DV23, "C" );       { sister/brother }
    D115G  = alfa2num( xdv16, DV23, "E" );       { Other relative }
    D115H  = notappl;                            { !! other female family }
    D115I  = notappl;                            { !! other male family }
    D115J  = notappl;                            { !! former partner }
    D115K  = alfa2num( xdv16, DV23, "F" );       { current boyfriend }
    D115L  = alfa2num( xdv16, DV23, "G" );       { former boyfriend }
    D115M  = notappl;                            { !! step mother alone }
    D115N  = notappl;                            { !! step father alone }
    D115O  = alfa2num( xdv16, DV23, "H" );       { mother-in-law }
    D115P  = alfa2num( xdv16, DV23, "I" );       { father-in-law }
    D115Q  = alfa2num( xdv16, DV23, "J" );       { other in-law }
    D115R  = notappl;                            { !! other female/male in-law }
    D115S  = notappl;                            { !! female friend }
    D115T  = notappl;                            { !! male friend }
    D115U  = notappl;                            { !! neighbor }
    D115V  = alfa2num( xdv16, DV23, "K" );       { teacher }
    D115W  = alfa2num( xdv16, DV23, "M" );       { employer }
    D115X  = alfa2num( xdv16, DV23, "X" );       { other }
    D115XA = notappl;                            { !! stranger }
    D115XB = notappl;                            { !! other female in-law/family }
    D115XC = notappl;                            { !! other male in-law/family }
    D115XD = alfa2num( xdv16, DV23, "L" );       { schoolmate/classmate }
    D115XE = alfa2num( xdv16, DV23, "N" );       { police/soldier }
    D115XF = notappl;                            { !! religious leader }
    D115XG = notappl;                            { !! lawyer }
    D115XH = notappl;                            { !! doctor }
    D115XI = notappl;                            { !! CS }
    D115XJ = notappl;                            { !! CS }
    D115XK = notappl;                            { !! CS }
    { Exceptions to ALFA2NUM logic }
    { Ever physically hurt by: no one other than spouse }
    D115Y  = 1;
    if DV22 = 1 then
      D115Y = 0;
    elseif DV22 = 3 then
      D115Y = 6;
    elseif DV22 = missing | pos( "?", DV23 ) then
      D115Y = missing;
    endif ;

    { !!! candidate to be removed from DHS-9, it was removed since DHS-5 } 	
    { person who hurts more often }
    D116  = notappl;
    { how often physically abused last 12 months }
    D117A = Fr3toZro( DV24 );
    if DV20 <> notappl then       { ever been pregnant }
      { physical abuse while pregnant }
      D118A  = alfa2num( DV20, DV21, "A" );       { husband/partner }
      D118B  = alfa2num( DV20, DV21, "B" );       { mother }
      D118C  = alfa2num( DV20, DV21, "C" );       { father/step father }
      D118D  = alfa2num( DV20, DV21, "E" );       { daughter/son }
      D118E  = notappl;                           { !! son alone }
      D118F  = alfa2num( DV20, DV21, "D" );       { sister/brother }
      D118G  = alfa2num( DV20, DV21, "F" );       { Other relative }
      D118H  = notappl;                           { !! other female family }
      D118I  = notappl;                           { !! other male family }
      D118J  = alfa2num( DV20, DV21, "G" );       { former partner }
      D118K  = alfa2num( DV20, DV21, "H" );       { current boyfriend }
      D118L  = alfa2num( DV20, DV21, "I" );       { former boyfriend }
      D118M  = notappl;                           { !! step mother alone }
      D118N  = notappl;                           { !! step father alone }
      D118O  = alfa2num( DV20, DV21, "J" );       { mother-in-law }
      D118P  = alfa2num( DV20, DV21, "K" );       { father-in-law }
      D118Q  = alfa2num( DV20, DV21, "L" );       { other in-law }
      D118R  = notappl;                           { !! other female/male in-law }
      D118S  = notappl;                           { !! female friend }
      D118T  = notappl;                           { !! male friend }
      D118U  = notappl;                           { !! neighbor }
      D118V  = alfa2num( DV20, DV21, "M" );       { teacher }
      D118W  = alfa2num( DV20, DV21, "O" );       { employer }
      D118X  = alfa2num( DV20, DV21, "X" );       { other }
      D118XA = notappl;                           { !! stranger }
      D118XB = notappl;                           { !! other female in-law/family }
      D118XC = notappl;                           { !! other male in-law/family }
      D118XD = alfa2num( DV20, DV21, "N" );       { schoolmate/classmate }
      D118XE = alfa2num( DV20, DV21, "P" );       { police/soldier }
      D118XF = notappl;                           { !! religious leader }
      D118XG = notappl;                           { !! lawyer }
      D118XH = notappl;                           { !! doctor }
      D118XI = notappl;                           { !! CS }
      D118XJ = notappl;                           { !! CS }
      D118XK = notappl;                           { !! CS }
      { Exceptions to ALFA2NUM logic }
      { Hurt during pregnancy by: no one }
      D118Y  = 1;
      if DV20 = 1 then
        D118Y = 0;
      elseif DV20 = missing | pos( "?", DV21 ) then
        D118Y = missing;
      endif ;
    endif;      { end of ever been pregnant }

    { !!! candidate to be removed from DHS-9, all variables set to notappl (except CS) were removed since DHS-5 } 	
    { help sought to stop violence }
    if DV32 <> notappl then
      D119A  = notappl;                           { !! CS husband }
      D119B  = notappl;                           { !! CS mother }
      D119C  = notappl;                           { !! CS father }
      D119D  = notappl;                           { !! CS daughter }
      D119E  = notappl;                           { !! CS son }
      D119F  = notappl;                           { !! CS sister }
      D119G  = notappl;                           { !! CS brother }
      D119H  = alfa2num( DV32, DV33, "A" );       { own family }
      D119I  = alfa2num( DV32, DV33, "B" );       { husband/partner family }
      D119J  = alfa2num( DV32, DV33, "C" );       { current/former husband/partner }
      D119K  = alfa2num( DV32, DV33, "D" );       { current/former boy friend }
      D119L  = notappl;                           { !! CS former boyfriend alone }
      D119M  = notappl;                           { !! CS step-mother }
      D119N  = notappl;                           { !! CS step-father }
      D119O  = notappl;                           { !! CS mother-in-law }
      D119P  = notappl;                           { !! CS father-in-law }
      D119Q  = notappl;                           { !! CS other female-in-law }
      D119R  = notappl;                           { !! CS other male-in-law }
      D119S  = notappl;                           { !! CS female friend }
      D119T  = notappl;                           { !! CS male friend }
      D119U  = alfa2num( DV32, DV33, "F" );       { neighbor }
      D119V  = notappl;                           { !! CS teacher }
      D119W  = notappl;                           { !! CS employer }
      D119X  = alfa2num( DV32, DV33, "X" );       { other }
      D119XA = notappl;                           { !! CS stranger }
      D119XB = alfa2num( DV32, DV33, "K" );       { social service organization }
      D119XC = notappl;                           { !! CS }
      D119XD = alfa2num( DV32, DV33, "E" );       { friend }
      D119XE = alfa2num( DV32, DV33, "I" );       { police }
      D119XF = alfa2num( DV32, DV33, "G" );       { religious leader }
      D119XG = alfa2num( DV32, DV33, "J" );       { lawyer }
      D119XH = alfa2num( DV32, DV33, "H" );       { doctor/medical personnel }
      D119XI = notappl;                           { !! CS }
      D119XJ = notappl;                           { !! CS }
      D119XK = notappl;                           { !! CS }
      { Sought help from: no one }
      D119Y  = 1;
      if DV32 = 1 then
        D119Y = 0;
      elseif DV32 = missing | pos( "?", DV33 ) then
        D119Y = missing;
      endif;
    endif;

    { !!! candidate to be removed from DHS-9, it was were removed since DHS-5 } 	
    { main reason never sought help }
    D120  = notappl;
    { father ever beat your mother }
    D121  = YesNo( DV35 );
    { interview interrupted because of presence of: }
    D122A = Fr3toZro( DV36A );   { husband }
    D122B = Fr3toZro( DV36B );   { other male adult }
    D122C = Fr3toZro( DV36C );   { other female adult }

    { !!! candidate to be removed from DHS-9, it was removed since DHS-6 } 	
    { first time had sex was against will }
    D123  = notappl;
    { Anyone other than partner forced respondent to have sex last 12 m }
    D124  = YesNo( DV30 );
    if DV30 = 3 then D124 = 6 endif;     { refused to answer }
    { Anyone forced respondent to perform sexual acts }
    if DV26 <> notappl then
      D125  = YesNo( DV26 );
    else
      D125  = YesNo( DV27 );
    endif;
    if D125 = 3 then D125 = 6 endif;     { refused to answer }
    { Age when first forced to have sexual intercourse }
    D126  = DV28;
    { Person who forced respondent to first sexual activity }
    D127  = notappl;      // !!!! use if single answers

    { person who forced to have sexual intercoruse/acts }
    if length( strip(DV29) ) then
      D127A  = alfa2num( 1, DV29, "A" );       { father/step-father }
      D127B  = alfa2num( 1, DV29, "B" );       { brother/step-brother }
      D127C  = alfa2num( 1, DV29, "C" );       { other relative }
      D127D  = alfa2num( 1, DV29, "D" );       { current boyfriend }
      D127E  = alfa2num( 1, DV29, "E" );       { former boyfriend }
      D127F  = alfa2num( 1, DV29, "F" );       { in-law }
      D127G  = alfa2num( 1, DV29, "G" );       { own friend/acquaintance }
      D127H  = alfa2num( 1, DV29, "H" );       { family friend }
      D127I  = alfa2num( 1, DV29, "I" );       { teacher }
      D127J  = alfa2num( 1, DV29, "J" );       { schoolmate/classmate }
      D127K  = alfa2num( 1, DV29, "K" );       { employer/someone at work }
      D127L  = alfa2num( 1, DV29, "L" );       { police/soldier }
      D127M  = alfa2num( 1, DV29, "M" );       { priest/religious leader }
      D127N  = alfa2num( 1, DV29, "N" );       { stranger }
      D127O  = notappl;                       { !! CS }
      D127P  = notappl;                       { !! CS }
      D127Q  = notappl;                       { !! CS }
      D127R  = notappl;                       { !! CS }
      D127X  = alfa2num( 1, DV29, "X" );       { other }
    endif;
	
    { Have ever told any one else about violence }
    D128  = YesNo( DV34 );

    { Respondent afraid of husband/partner most of the time, sometimes, or never }
    D129  = Fr3toZro( DV15 );

    if DV16A1 = 6 then
	  D130A = 6;
	  D130B = 6;
	  D130C = 6;
	else
      { Previous husband: ever hit, slap, kick, or hurt respondent }
      D130A = DVRecode(DV16A1, DV16A2);
      { Previous husband: physically forced to have sex or to perform sexual acts }
      D130B = DVRecode(DV16B1, DV16B2);
      { Previous husband: humiliate, threaten to hurt, insult or make feel bad }
      D130C = DVRecode(DV16C1, DV16C2);
    endif;	  

  endif;

PROC AWSECG1_EDT
  { female genital cutting }
  if V015 = 1 then               {result = 1 }
    { ever heard }
    G100  = YesNo( GC01 );
    { ever heard probed }
    G101  = YesNo( GC02 );
    if G100 = 1 | G101 = 1 then         { ever heard of circumcision }
      { ever been circumcised }
      G102  = YesNo( GC03 );
      { flesh removed from genital area }
      G103  = YesNo( GC04 );
      { genital nicked without removing flesh }
      G104  = YesNo( GC05 );
      { genital sewn closed }
      G105  = YesNo( GC06 );
      { age at circumcision }
      G106  =  GC07;
      { who performed circumcision }
      recode GC08 -> G107;        // make sure coding is correct, sometimes code start in 1 
            11:19 -> GC08 + 10;   // traditional 
            21:29 -> GC08 - 10;   // health professional 
                  -> GC08;
      endrecode;
      { number of other daughters circumcised }
      G108  =  count( AWSECG2_EDT where GC12 = 1 );

      { !!! candidates to be removed from DHS-9, they were removed since DHS-6 } 	
      { benefits of circumcision }
      G117A  = notappl;                        { cleanliness/hygiene }
      G117B  = notappl;                        { social acceptance }
      G117C  = notappl;                        { better marriage prospects }
      G117D  = notappl;                        { preserve virginity }
      G117E  = notappl;                        { more pleasure for man }
      G117F  = notappl;                        { religious approval }
      G117G  = notappl;                        { !! CS }
      G117H  = notappl;                        { !! CS }
      G117I  = notappl;                        { !! CS }
      G117J  = notappl;                        { !! CS }
      G117X  = notappl;                        { other }
      G117Y  = notappl;                        { no benefits }

      { believe practice is required by religion }
      recode GC17 -> G118;
	           2  -> 0;
			   1  -> 1;
               3  -> 2;
                  -> GC17;
      endrecode;				  
      { should practice be continued }
      G119  =  GC18;

      { ----------------------------------------------------------------------}
      for i in AWSECG2_EDT do
        idx  = seek( PORD = GC11(i) );        // get index based on pregnancy order 
        GIDX(i)  = PIDXB(idx);                { daughter's line number in birth history }
        G121(i)  = YesNo( GC12(i) );          { is daughter circumcised }
        G122(i)  = GC13(i);                   { daughter's age at circumcision }
        G123(i)  = YesNo( GC14(i) );          { was daughter genital area sewn closed }
        { who perform daughter's circumcision }
        recode GC15(i) -> G124(i);        // make sure coding is correct, sometimes code start in 1 
                11:19  -> GC15(i) + 10;   // traditional 
                21:29  -> GC15(i) - 10;   // health professional 
                       -> GC15(i);
        endrecode;
      enddo;

    endif;    { end ever heard of circumcision }

  endif;      { end V015 = 1 }

PROC AWSECECD_EDT
  { RECEDC exists if there is at least one child 24:59 months old living with the mother }
  if V015 = 1 & count(REC21 where B19 in 24:59 & B9 = 0) then
    { early chidl development module }
	for i in $ do
	  idx  = seek( PORD = AECDCA );    // get index based on pregnancy order 
	  idxb = PIDXB(idx);               // index to birth history
      if idxb & B19(idxb) in 24:59 & B9(idxb) = 0 then
        { index to birth history }
        IDXECD(i) = idxb;		  
        { index to pregnancy history }
        IDXECDP(i) = idx;	  
        { Can walk on an uneven surface }    	  
	    ECD21(i) = YesNo( AECD1 );  
        { Can jump with both feet leaving the ground }	  
        ECD22(i) = YesNo( AECD2 );
        { Can dress: put on pants and a shirt, without help }	  
	    ECD23(i) = YesNo( AECD3 );
        { Can fasten and unfasten buttons without help }	  
	    ECD24(i) = YesNo( AECD4 );
        { Can say 10 or more words, like mama or ball }	  
	    ECD25(i) = YesNo( AECD5 );
        { Can speak using sentences of 3 or more words that go together }	  
	    ECD26(i) = YesNo( AECD6 );
        { Can speak using sentences of 5 or more words that go together }	  
	    ECD27(i) = YesNo( AECD7 );
        { Can correctly use any of the words: 'I', 'you', 'she', or 'he' }	  
	    ECD28(i) = YesNo( AECD8 );
        { Can consistently name an object well known, if shown }	  
	    ECD29(i) = YesNo( AECD9 );
        { Can recognize at least 5 letters of the alphabet }	  
	    ECD30(i) = YesNo( AECD10 );
        { Can child write (his/her) name }	  
	    ECD31(i) = YesNo( AECD11 );
        { Can recognize all numbers from 1 to 5 }	  
	    ECD32(i) = YesNo( AECD12 );
        { If asked to give you 3 objects, does child give the correct amount }	  
	    ECD33(i) = YesNo( AECD13 );
        { Can child count 10 objects without mistakes }	  
	    ECD34(i) = YesNo( AECD14 );
        { Can color or play with building blocks without asking for help or giving up }	  
	    ECD35(i) = YesNo( AECD15 );
        { Does child ask about familiar people other than parents when not there }	  
	    ECD36(i) = YesNo( AECD16 );
        { Does child offer to help someone who seems to need help }	  
	    ECD37(i) = YesNo( AECD17 );
        { Does child get along well with other children }	  
	    ECD38(i) = YesNo( AECD18 );
        { How often does child seem to be very sad or depressed }	  
	    ECD39(i) = AECD19;
        { Compared with other children, how much does child kick, bite, or hit other children or adults }	  
	    ECD40(i) = AECD20;
      else
	    errmsg( 8500, AECDCA );
      endif;		
	enddo;  
  else	
    x = totocc(AWSECECD);
    if x then 
      errmsg( 8501, x )
    endif;	  
  endif;

{ ----------------------------------------------------------------------------}
PROC AWSECSBC_EDT
  if V015 = 1 then

    { MALARIA knowledge and beliefs }
    { REC11 - Malaria women variable ML101 }
    ML101 = HML12(V003);
    recode   ML101 -> V461;  { variable V461 set up here if malaria module }
               0   -> 0;
              1:3  -> 1;
                   -> ML101;
    endrecode;
	
    { Last six months heard/seen malaria messages }
    ML501  = YesNo( AML501 );

    { Malaria messages were heard/seen }
    ML501A  = alfa2num( AML501, AML502, "A" );    { radio }     
    ML501B  = alfa2num( AML501, AML502, "B" );    { television }     
    ML501C  = alfa2num( AML501, AML502, "C" );    { poster/billboard }     
    ML501D  = alfa2num( AML501, AML502, "D" );    { newspaper/magazine }     
    ML501E  = alfa2num( AML501, AML502, "E" );    { leaflet/brochure }   
    ML501F  = alfa2num( AML501, AML502, "F" );    { healthcare provider }     
    ML501G  = alfa2num( AML501, AML502, "G" );    { community health worker }  
    ML501H  = alfa2num( AML501, AML502, "H" );    { social media }     
    ML501I  = notappl;                            { !!! CS }     
    ML501J  = notappl;                            { !!! CS }     
    ML501K  = notappl;                            { !!! CS }     
    ML501X  = alfa2num( AML501, AML502, "X" );    { other }     
    ML501Z  = alfa2num( AML501, AML502, "Z" );    { don't remember }        

    { Are there ways to avoid getting malaria }
    ML503  = YesNo( AML503 );

    { Malaria can be prevented by }
    ML503A  = alfa2num( AML503, AML504, "A" );     { sleep under a mosquito net }  
    ML503B  = alfa2num( AML503, AML504, "B" );     { sleep under an insecticide-treated mosquito net } 
    ML503C  = alfa2num( AML503, AML504, "C" );     { use mosquito repellent } 
    ML503D  = alfa2num( AML503, AML504, "D" );     { take preventive medications } 
    ML503E  = alfa2num( AML503, AML504, "E" );     { spray house with insecticide }  
    ML503F  = alfa2num( AML503, AML504, "F" );     { fill in stagnant waters } 
    ML503G  = alfa2num( AML503, AML504, "G" );     { keep surroundings clean } 
    ML503H  = alfa2num( AML503, AML504, "H" );     { put mosquito screen on windows }
    ML503I  = notappl;                             { !!! CS }
    ML503J  = notappl;                             { !!! CS }
    ML503K  = notappl;                             { !!! CS } 
    ML503L  = notappl;                             { !!! CS } 
    ML503M  = notappl;                             { !!! CS } 
    ML503N  = notappl;                             { !!! CS } 
    ML503X  = alfa2num( AML503, AML504, "X" );     { other } 
    ML503Z  = alfa2num( AML503, AML504, "Z" );     { don't know } 

    { Agree/disagree with: people in community get malaria in rainy season }
    ML505  = YesNo( AML505 );
    { Agree/disagree with: when child has fever worry it is malaria }
    ML506  = YesNo( AML506 );
    { Agree/disagree with: getting malaria not a problem as can be treated }
    ML507  = YesNo( AML507 );
    { Agree/disagree with: only weak children can die from malaria }
    ML508  = YesNo( AML508 );
    { Agree/disagree with: sleep under net when there are lots of mosquitoes }
    ML509  = YesNo( AML509 );
    { Agree/disagree with: sleep under net when there are few mosquitoes }
    ML510  = YesNo( AML510 );
    { Agree/disagree with: don't like sleep in a net when is too warm }
    ML511  = YesNo( AML511 );
    { Agree/disagree with: if child has fever good to give medicine available at home }
    ML512  = YesNo( AML512 );
    { Agree/disagree with: people take children to health provider same day develop fever }
    ML513  = YesNo( AML513 );
    { Agree/disagree with: people who have nets usually sleep under every night }
    ML514  = YesNo( AML514 );

  endif;	

{ ----------------------------------------------------------------------------}

PROC AWSECFIS_EDT
  { Fistula - module }
  if V015 = 1 then
    FI1   = YesNo(AFI1);	              { Currently experience leakage of urine or stool from vagina during the day and night }
    FI2   = YesNo(AFI2);	              { Have ever experienced a problem of leakage of urine or stool from vagina }
    FI3   = YesNo(AFI3);	              { Have ever heard of the problem of leakage of urine or stool from vagina }
    FI4   = AFI4;     	                  { Did the leakage problem start after a delivery of a baby or a stillbirth }
    FI5   = AFI5;     	                  { Did the leakage problem start after a normal labor and delivery, or after a difficult labor and delivery }
    FI6   = AFI6;     	                  { What do you think caused the leakage problem }
    FI7   = AFI7;     	                  { How many days after what caused the problem did the leakage start }
    FI8   = YesNo(AFI8);	              { Have you sought treatment for this condition }
	if AFI8 = 2 then
      FI9A  = alfa2num( 1, AFI9, "A" );  { Don't know can be fixed } 
      FI9B  = alfa2num( 1, AFI9, "B" );  { Don't know where to go } 
      FI9C  = alfa2num( 1, AFI9, "C" );  { Too expensive } 
      FI9D  = alfa2num( 1, AFI9, "D" );  { Too far } 
      FI9E  = alfa2num( 1, AFI9, "E" );  { Poor quality of care } 
      FI9F  = alfa2num( 1, AFI9, "F" );  { Could not get permission } 
      FI9G  = alfa2num( 1, AFI9, "G" );  { Embarrassment } 
      FI9H  = alfa2num( 1, AFI9, "H" );  { Problem disappeared } 
	  FI9I  = notappl;                      { CS }
      FI9J  = notappl;                      { CS }
      FI9K  = notappl;                      { CS }
	  FI9L  = notappl;                      { CS }
      FI9X  = alfa2num( 1, AFI9, "X" );  { other } 
    endif;	  
    FI10  = AFI10;     	                  { Person whom treatment was last sought }
    FI11  = YesNo(AFI11);	              { Did have an operation to fix the leakage problem }
    FI12  = AFI12;     	                  { Did the treatment stop or reduce the leakage completely }

  endif;

{ ----------------------------------------------------------------------------}

