{Application 'SELECTHH' logic file generated by CSPro }
PROC GLOBAL

  FILE GPSAverage;
  FILE Sampling;

  numeric i, xok, pct30, allhh, rounding;
  numeric fract, selurb, selrur, tobesel, tothh, trackhh, counthh, totclust;
  numeric factanem, beganem, factmen, begmen, hhnum, segs;
  numeric valgps = 0, templat = 0, templon = 0, tempalt = 0;
  numeric xlatitude, xlongitude, xaltitude;
  alpha(1) latpole;
  alpha(1) lngpole;

  string line1;

  array clustfound(5000);    { used to identify clusters for which no households were listed }
  array gpsfound(5000);      { used to identify clusters for which no GPS were taken }

  { function to check the number of households and if the selection was already done for the cluster }
  function validate()
    xok = 1;
    { check with sample file }
    if YURBRUR = 1 & tothh < selurb | YURBRUR = 2 & tothh < selrur then
      HTML_Paragraph( MakeText(tr("Cluster %04d, Households available for selection %d less than required (urban=%d rural=%d)"), LCLUSTER, tothh, selurb, selrur) );
      xok = 0;
    endif;
    pct30 = int( YTOTHH * 0.30 );
    if !tothh in YTOTHH-pct30:YTOTHH+pct30 then
      HTML_Paragraph( MakeText(tr("Cluster %04d, Number of households listed %d not within 30% of households in the sample file %d"), LCLUSTER, tothh, YTOTHH) );
      xok = 0;
    endif;
    { check if households haave already been selected for cluster }
    XCLUSTER = LCLUSTER;
    if loadcase( SAMPSEL, XCLUSTER ) then
      HTML_Paragraph( MakeText(tr("Households were already selected for cluster %04d"), XCLUSTER) );
      xok = 0;
    endif;
    validate = xok;
  end

PROC HHLISTING_FF
preproc
  { get language from calling menu }
  SetLanguage( GetLanguage() );

  allhh     = 0;        { count all households selected for the sample }
  totclust  = 1000;     { !!! constant needs to be adjusted to the actual number of clusters in the survey }
  factanem  = 2;        { !!! this correspond to 50% to be selected for anemia or one every other household }
  factmen   = 3;        { !!! this correspond approximately to 30% to be selected for male survey or one every three households }
  selurb    = 22;       { !!! number of households to be selected in urban clusters }
  selrur    = 22;       { !!! number of households to be selected in rural clusters }

  { initialize array of clusters/GPS found to zero }
  do i = 1 while i <= 5000
    clustfound(i) = 0;
    gpsfound(i)   = 0;
  enddo;

  { this file should be given to the sampling specialist to properly adjust the probabilities of selection for clusters }
  setfile( Sampling, ".\HHSelection.csv", create );
  filewrite( Sampling, '"CLUSTER","HH in Cluster","Segments","Segment selected","HH in Segment","HH listed","HH selected"' );
  { set file with GPS data. Placed here in case coordinates taken at HH level }
  setfile( GPSAverage, ".\GPSData.csv", create );
  filewrite( GPSAverage, '"CLUSTER","LATITUDE","POLE","LONGITUDE","POLE","ALTITUDE"'  );

  { set the name for the HTML file }
  HTML_InitAlign();
  HTMLname = "SelectHH.HTML";
  if FileExist( HTMLname ) then
    FileDelete( HTMLname )
  endif;
  setfile( HTMLFile, HTMLname, create );

  { initialize the report headings }
  zstring1 = MakeText( tr("Outstanding Issues for Household Selection - Date: %s"), edit("9999/99/99", SysDate("YYYYMMDD")));
  HTML_Header( CellAlign, zstring1 );  // generates a general HTML header

postproc
  {+GPS}
  { !!! to be used when coordinates are taken at cluster level }
  { average for latitude, longitude and altitude based on number of readings at cluster level }
  while loadcase( GPS_DCT ) do

    { identify if a cluster is duplicated otherwise update array of clusters found }
    if gpsfound(GCLUSTER) = 1 then
      HTML_Paragraph( MakeText(tr("GPS for cluster %04d were listed by two different enumerators"), GCLUSTER) );
      HTML_ParagraphS( tr("A decision has to be made as to which one is correct") );
    else
      gpsfound(GCLUSTER) = 1
    endif;
    for i in GPS_DCT.GPSSEC
      if GACCURACY < 10 & GSATELLIT > 2 then
        valgps  = valgps + 1;
        templat = templat + GLATITUDE;
        templon = templon + GLONGITUDE;
        tempalt = tempalt + GALTITUDE;
      endif;
    enddo;
    if valgps > 0 then
      xlatitude  = templat / valgps;
      xlongitude = templon / valgps;
      xaltitude  = tempalt / valgps;
      filewrite( GPSAverage, "%5d,%12.6f,%s,%12.6f,%s,%5d", GCLUSTER, xlatitude, GLATPOLE(1), xlongitude, GLNGPOLE(1), xaltitude );
    else
      HTML_Paragraph( MakeText(tr("There are no valid GPS coordinates for cluster %04d"), GCLUSTER) );
    endif;
  enddo;
  {GPS+}

  { list clusters that were not found in the household listing file               }
  { note that the array assumes that cluster numbers are sequential starting in 1 }
  do i = 1 while i <= totclust
    if clustfound(i) = 0 | gpsfound(i) = 0 then
      recode clustfound(i) :: gpsfound(i) -> line1;
                 0         ::     0       -> tr("households listed and GPS coordinates");  
                 0         ::             -> tr("households listed");                      
                           ::             -> tr("GPS coordinates");                        
      endrecode;
      HTML_Paragraph( MakeText(tr("There were no %s available for cluster %04d"), line1, i) );
    endif;
  enddo;
  HTML_end();
  view( "file://" + pathname(application) +  HTMLName );

PROC HHLISTING_QUEST

  seed( LCLUSTER );
  tothh     = 0;        { total households in a cluster }
  hhnum     = 0;        { kepp track of selected households within a cluster }
  counthh   = 0;        { total household counter }

  YCLUSTER = LCLUSTER;
  if !loadcase( CLUSTERS, YCLUSTER ) then
    HTML_Paragraph( MakeText(tr("Cluster %04d not defined in sample file. Talk to survey manager to resolve the problem"), LCLUSTER) );
  else

    { identify if a cluster is duplicated otherwise update array of clusters found }
    if clustfound(YCLUSTER) = 1 then
      HTML_Paragraph( MakeText(tr("Households for cluster %04d were listed by two different enumerators"), YCLUSTER) );
      HTML_ParagraphS( tr("A decision has to be made as to which one is correct") );
    else
      clustfound(YCLUSTER) = 1
    endif;

    { first count all household listed }
    tothh = count( RECORD2_EDT where LINTRO in "1","2" & LTRUEHH = 1 );
    { check against clusters and wheter selection was already done }
    validate();
    tobesel = selurb;
    if YURBRUR = 2 then tobesel = selrur endif;
    if tothh <= tobesel then
      fract    = 1;
      rounding = 0;
      trackhh  = 1;
    else
      fract   = tothh / tobesel;
      rounding = 0.9;
      trackhh = random( 1, fract );
    endif;
    beganem = int( random( 1, factanem ) );
    begmen  = int( random( 1, factmen ) );
	{ initialize GPS to average coordinates }
	tempalt = 0;
	templat = 0;
	templon = 0;
	valgps  = 0;
    clear( SAMPSEL );
    for i in RECORD2 do
      if LTRUEHH = 1 & LINTRO in "1","2" then
        counthh = counthh + 1;
        if counthh = int(trackhh+rounding) then     { this is to simulate a ROUNDUP function }
          hhnum   = hhnum + 1;
          allhh   = allhh + 1;
          XNUMBER(hhnum)   = LNUMBER;
          XSTRUCT(hhnum)   = LSTRUCT;
          XNAME(hhnum)     = LNAME;
          XADDRESS(hhnum)  = LADDRESS;
          XINTCODE(hhnum)  = 0;
          XINTDATE(hhnum)  = 0;
          XRESULT(hhnum)   = 0;
          XMALE(hhnum)     = 2;                     { !!! set this variable as NA if no male selected in country }
          if (hhnum-begmen)%factmen = 0 then
            XMALE(hhnum) = 1;
          endif;
          XANEMIA(hhnum)   = 2;                     { !!! set this variable as NA if no anemia selected in country }
          if (hhnum-beganem)%factanem = 0 then
            XANEMIA(hhnum) = 1;
          endif;
          LSELECT  = 1;                             { update household listing declaring this household as selected }
          trackhh = trackhh + fract;
        endif;
        { accumulate household coordinates to average them at the cluster level }
        if LALTITUDE <> notappl & LLONGITUDE <> notappl & LLATITUDE <> notappl then
          valgps  = valgps + 1;
          templat = templat + LLATITUDE;
          templon = templon + LLONGITUDE;
          tempalt = tempalt + LALTITUDE;
		  if valgps = 1 then
		    latpole = LLATPOLE;
		    lngpole = LLNGPOLE;
		  endif;
        endif;
      endif;
    enddo;
    XCLUSTER = LCLUSTER;
    XTOTAL   = hhnum;
    writecase( SAMPSEL );
	{+GPS}
    { !!! Report coordinates when collected at household level }
    if valgps > 0 then
      xlatitude  = templat / valgps;
      xlongitude = templon / valgps;
      xaltitude  = tempalt / valgps;
      filewrite( GPSAverage, "%5d,%12.6f,%s,%12.6f,%s,%5d", LCLUSTER, xlatitude, latpole, xlongitude, lngpole, xaltitude );
    else
      HTML_Paragraph( MakeText(tr("There are no valid GPS coordinates for cluster %04d"), LCLUSTER) );
    endif;
	{GPS+}

    { process cluster segmentation if any }
    if LSEGNUM then
      SCLUSTER = LCLUSTER;
      if loadcase( SEGMENT_DCT, SCLUSTER ) then
        LTOTHH = STOTHH;
        segs = count( SEGMENT_DCT.SEGREC2 where SHHNUMB > 0 );   { ignores segments with 0 HH }
      else
        segs = 0;
      endif;
    else
      LTOTHH = LSEGHH;
      segs = 0; { if no segmentation }
    endif;
    filewrite( Sampling, "%04d,%d,%d,%d,%d,%d,%d", LCLUSTER, LTOTHH, segs, LSEGNUM, LSEGHH, counthh, hhnum );
  endif;
