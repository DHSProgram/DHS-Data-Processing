{Application 'IMPORT_FIES' logic file generated by CSPro}
PROC GLOBAL
array probs(8,2);
file fies_probs_csv, fies_dq_csv, fies_rasch_csv;
numeric comma1, comma2, comma3, comma4, comma5, len, i, n, RR;
string csv_str;
numeric rweight, rawscore;
array dq(8,5);
array string dqnames(8);

crosstab float(1) tFIES AHTYPE+AHREGION+AHWLTHI+total foodins
    exclude(rowzero,colzero,percents,totals,specval)
{+EN}	
    title( "Table 2.X Food insecurity", "",
           "Percentage of de jure population with moderate or severe food insecurity, ",
		   "and percentage with severe food insecurity, ",
		   "according to background characteristics, [Country, Survey Year]" )
     stub( "Background characteristic" );
{EN+}
{{FR}
    title( "Tableau 2.X Insécurité alimentaire", "",
           "Pourcentage de la population de droit en situation d'insécurité alimentaire modérée ou sévère ",
		   "et pourcentage en situation d'insécurité alimentaire sévère, ",
		   "selon certaines caractéristiques socio-économique, [Pays, Enquête, Année]" )
     stub( "Caractéristique sociodémographique" );
{FR}}	 
crosstab float(1) tFIESdq fiesitem+nhh_rr datarep+datacomp+infit+outfit+itemsev
    exclude(rowzero,colzero,percents,totals,specval)
{+EN}	
    title( "Table C.X Food insecurity data completeness, infit and outfit model statistics, and Rasch Reliability", "",
           "Among households, percentage reporting yes for each item, percentage that refused to answer or responded don't know, ",
		   "infit and infit standard error, and outfit statistics, and Rasch reliability (weighted), [Country Survey Year]")
    stub( "Item" );
{EN+}
{{FR}
    title( "Tableau C.X Complétude des données sur l'insécurité alimentaire, statistiques d'ajustement infit et outfit et la fiabilité de Rasch", "",
           "Parmi les ménages, pourcentage ayant répondu « oui » pour chaque élément, pourcentage ayant refusé de répondre ou ayant déclaré qu'ils ne savaient pas ;",
		   "statistique infit et son écart type, statistique outfit, et fiabilité du modèle de Rasch (pondéré), [Pays, Enquête, Année]")
    stub( "Élément" );
{FR}}

function getnumber(string numstr);
  numeric e, num, expon;
  e = poschar("Ee",numstr);
  if e then 
	num = tonumber(numstr[1:e-1]);
    expon = tonumber(numstr[e+1:length(numstr)-e]);
	num = num * 10^expon;
  else
	num = tonumber(numstr);
  endif;
  exit num;
end;

function nv(xvar)
  nv = !(xvar in 1,2);
end;

function read_probs();
  { Loop through the raw score sums from 0 to 8 to load the probabilities for moderate and severe }
  csv_str = "";
  fileread(fies_probs_csv, csv_str); // ignore the header from the CSV file
  do i = 0 while i <= 8 
    fileread(fies_probs_csv, csv_str);
	len = length(csv_str);
	comma1 = pos(",",csv_str);
	comma2 = pos(",",csv_str[comma1+1:len-comma1]);
	if csv_str[1:1] = '"' then
	  n = tonumber(csv_str[2:comma1-3]);
	else
	  n = tonumber(csv_str[1:comma1-1]);
	endif;
    if i = n then
	  probs(i,1) = getnumber(csv_str[comma1+1:comma2-1]);
	  probs(i,2) = getnumber(csv_str[comma1+comma2+1:len-comma1-comma2]);
	  display("i=%d mod=%10.8f sev=%10.8f",i,probs(i,1),probs(i,2));
	else
	  display("n=%d i=%d comma1=%d rec=%s",n,i,comma1,csv_str);
	  stop();
    endif;
  enddo;
 end;

function read_dq();
  { Loop through the items (from 1 to 8) to load the data quality indicators - infit, infit SE, and outfit }
  csv_str = "";
  fileread(fies_dq_csv, csv_str); // ignore the header from the CSV file
  do i = 1 while i <= 8 
    fileread(fies_dq_csv, csv_str);
	len = length(csv_str);

	comma1 = pos(",",csv_str);
	comma2 = pos(",",csv_str[comma1+1:len-comma1]) + comma1;
	comma3 = pos(",",csv_str[comma2+1:len-comma2]) + comma2;
	comma4 = pos(",",csv_str[comma3+1:len-comma3]) + comma3;
	comma5 = pos(",",csv_str[comma4+1:len-comma4]) + comma4;

	if csv_str[1:1] = '"' then
      dqnames(i) = csv_str[2:comma1-3];
	else
	  dqnames(i) = csv_str[1:comma1-1];
	endif;

    dq(i,1) = getnumber(csv_str[comma1+1:comma2-comma1]);
    dq(i,2) = getnumber(csv_str[comma2+1:comma3-comma2]);
    dq(i,3) = getnumber(csv_str[comma3+1:comma4-comma3]);
    dq(i,4) = getnumber(csv_str[comma4+1:comma5-comma4]);
    dq(i,5) = getnumber(csv_str[comma5+1:len-comma5]);

	display("i=%d %-8s infit=%10.8f se.infit=%10.8f outfit=%10.8f b=%11.8f se.b=%10.8f",i,dqnames(i),dq(i,1),dq(i,2),dq(i,3),dq(i,4),dq(i,5));
	// display("commas %d,%d,%d,%d,%d",comma1,comma2,comma3,comma4,comma5);
  enddo;
end;

function read_rr();
  { Read the Rasch reliability estimate }
  csv_str = "";
  fileread(fies_rasch_csv, csv_str); // ignore first record
  fileread(fies_rasch_csv, csv_str);
  comma1 = pos(",",csv_str);
  RR = getnumber(csv_str[comma1+1:length(csv_str)-comma1]);
  display("RR=%10.8f",RR);
end;

function tabitem(xvar,seq);
  { Tabulate item for yeses and non-response }
  fiesitem = seq;
  if nv(xvar) then // tally non-response for item
    datacomp = 1;
	datarep = notappl;
    xtab(tFIESdq, rweight);
  elseif xvar = 1 then // tally yes reponse for item
    datacomp = notappl;
	datarep = 1;
    xtab(tFIESdq, rweight);
  endif;
end;

PROC CCIQ81_FF
preproc
{{FR}
  setlanguage("FR");
{FR}}
  read_probs();
  read_dq();
  read_rr();
  
postproc
  tFIES[*,0] = 100 * tFIES[*,0] / tFIES[*,2]; // Moderate plus severe
  tFIES[*,1] = 100 * tFIES[*,1] / tFIES[*,2]; // Severe 

  numeric iurb = tblrow( tFIES, AHTYPE = 1); // Urban
  numeric irur = tblrow( tFIES, AHTYPE = 2); // Rural
  numeric itot = tblrow( tFIES );            // Total
  SDGIndicator( "2.1.2", tFIES(iurb,0), tFIES(irur,0), tFIES(itot,0) );
  
  do i = 0 while i <= 7
    tFIESdq(i,0) = 100 * tFIESdq(i,0) / tFIESdq(8,0); // Yes responses
    tFIESdq(i,1) = 100 * tFIESdq(i,1) / tFIESdq(8,1); // Non-response
    tFIESdq(i,2) = dq(i+1,1); // Infit
    tFIESdq(i,3) = dq(i+1,2); // Infit SE
    tFIESdq(i,4) = dq(i+1,3); // Outfit
    tFIESdq(i,5) = dq(i+1,4); // Item severity parameters
    tFIESdq(i,6) = dq(i+1,5); // Item severity standard error
  enddo;

  // set other entries to -
  tFIESdq(8,2) = default;
  tFIESdq(8,3) = default;
  tFIESdq(8,4) = default;
  tFIESdq(8,5) = default;
  tFIESdq(8,6) = default;
  tFIESdq(9,0) = RR;
  tFIESdq(9,1) = default;
  tFIESdq(9,2) = default;
  tFIESdq(9,3) = default;
  tFIESdq(9,4) = default;
  tFIESdq(9,5) = default;
  tFIESdq(9,6) = default;

PROC HOUSEHOLD
preproc
  AHFS_MOD = notappl;
  AHFS_SEV = notappl;
  if AHRESULT = 1 then // Complete interview
    rweight = AHWEIGHT/1000000;
 
    // tally yeses and non-response for each item
	nhh_rr = notappl;
	tabitem(AHFS1,1);
	tabitem(AHFS2,2);
	tabitem(AHFS3,3);
	tabitem(AHFS4,4);
	tabitem(AHFS5,5);
	tabitem(AHFS6,6);
	tabitem(AHFS7,7);
	tabitem(AHFS8,8);

	// total number of households - weighted
	fiesitem = 0; 
	datarep  = 0;
	datacomp = 1;
	nhh_rr = 0;
	xtab(tFIESdq, rweight);

	if nv(AHFS1)+nv(AHFS2)+nv(AHFS3)+nv(AHFS4)+nv(AHFS5)+nv(AHFS6)+nv(AHFS7)+nv(AHFS8) = 0 then // if no non-reponse items

	  datarep  = 1;
	  datacomp = 0;
	  nhh_rr = 0;
	  xtab(tFIESdq, rweight); // Tally total cases with no non-response

      rawscore = (AHFS1=1)+(AHFS2=1)+(AHFS3=1)+(AHFS4=1)+(AHFS5=1)+(AHFS6=1)+(AHFS7=1)+(AHFS8=1); // sum raw score
      AHFS_MOD = probs(rawscore,1);
	  AHFS_SEV = probs(rawscore,2);

	  numeric hhusual = count(AHSEC01_EDT where AH05 = 1); // Usual household members

	  { Now tabulate }
	  foodins = 1; xtab(tFIES, probs(rawscore,1)*rweight*hhusual); // moderate plus severe food insecurity
	  foodins = 2; xtab(tFIES, probs(rawscore,2)*rweight*hhusual); // severe food insecurity
	  foodins = 3; xtab(tFIES, rweight*hhusual); // total household members with no non-response  on food items
	endif;
  endif;
  
