{ Application 'SUPMENU' }
PROC GLOBAL

  FILE   piffile;                          { data entry PFF file for the application }
  FILE   fromckid;                         { to read file generated by CheckID       }
  FILE   filedups;                         { to read result of duplicates for households, individuals and biomarkers }
  FILE   logFile;                          { used to read the log from IFSS }

  string TheCommand, fname;
  string FilesToZip;
  string CSPro;                            { CSPro executables directory }
  string AppName;                          { application name and dictionary name }
  string wrkprj, wrkpii, superv, receive, data, pictures;    { directories }
  string fpath, entry, temp, final, Biomarker, zipclust;
  string dicts, work, utility, upgrades, wrkref, SampApps, SampData;
  string btwork, btupgr, btdata;           { bluetooth transmission: final portion of directory structure where files will be copied to receiving machine }
  string heading, SupName;
  string bkpsup;                           { SD card to backup data to supervisor and auxiliary file name }
  string findadd;
  string findmod;
  string chkfile;
  string xparaux, xremeas;
  string xparamet;                        { parameter to be passed to the data collection applications }
  string logCode;                         { used by IFSS to retrieve the result of data transferred }
  string IFSSlogFile = ".\log.txt";       { name of log file for IFSS }

  alpha(4) xintnum;                       { Interviewer }
  alpha(4) xsuperv;                       { Supervisor }
  alpha(8) xfilenum;                      { Number corresponding to data file names }
  alpha(4) xcluster;                      { Cluster number }
  string   xfile;                         { upgrade file number to be transferred to interviewers }
  string   xcase;                         { Case: Cluster number, household number, woman line number }
  string   xupgrade;                      { variable to read/write file fupgrade that remembers the number of upgrades arrived to the supervisor machine }
  string   upgrname;                      { upgrade names 9prefix) for interviewers.  supervisors are upgraded automatically by IFSS }
  string   xlang;                         { to check if there is another session running }

  numeric  i, j, k, x, action, option, ifok, found, SupCode, steam, IntCode, IntRole;
  numeric  hhdups, indups, biodups, totintvw, hhind, codebiomarker, SameSession;
  numeric MoreThanOne;                    { to control no concurrent sessions are running }
  
  list string listupgrades;

  array string TeamShare(30,3);           { store data for members of the same team }
                                          { 2nd dimension: 1-Code
										                   2-Names
											               3-Role                   }
  numeric TeamMemb = 0;                   { number of members of the same team } 														 
  valueset fieldworkers;

  array string Remeasurement(40,4);        { store children available for selection for remeasurment }

  array intvwcode(300);                   { to store interviewers - code }
  array intvwrole(300);                   {                       - role }
  array intvwteam(300);                   {                       - team }
  array intvwsex(300);                    {                       - sex  }
  array string intvwname(300);            {                       - name }

  { set up basic user bar }
  function userbase();
    userbar(clear);
    userbar( add button, "<",    do("PreviousField") );
    userbar( add button, ">",    do("NextField") );
    userbar( add button, ">>|",  do("AdvanceToEnd") );
    userbar( add button, "Lang", do("ChangeLanguage") );
  end;

  { set value sets based on language }
  function OnChangeLanguage()
    SetLanguage( getlanguage() );
    savesetting("Language", getlanguage());
  end;

  { check if a file exist and deletes it }
  function fdel( string thisfile )
    if FileExist( thisfile ) then
      FileDelete( thisfile )
    endif;
  end;

  { check if a directory is presnet in project }
  function ChkDir( string thisfile )
    if !DirExist( thisfile ) then
      errmsg( 008, thisfile );
	  stop(1);
    endif;
  end;

  { launches CSEntry stopping SupMenu }
  function runpffS();
    ExecPff( AppName + ".pff", maximized, stop );
  end;

  { launches CSEntry with SupMenu waiting in the background }
  function runpffW();
    ExecPff( AppName + ".pff", maximized, wait );
  end;

  { function used to launch CSPro Index utility }
  function RunIndex()
    { Using single quotes instead of double quotes as double quotes are needed in the string generated }
    TheCommand = '"' + cspro + '\CSIndex.exe" ' + superv + '\' + AppName + '.pff';
    ExecSystem( TheCommand, maximized, wait );
  end;

  { function used to launch CSPro sort utility }
  function RunSort();
    { Using single quotes instead of double quotes as double quotes are needed in the string generated }
    TheCommand = '"' + cspro + '\CSSort.exe" ' + superv + "\" + AppName + '.pff';
    ExecSystem( TheCommand, maximized, wait );
  end;

  { concatenates individual's files as interviewers are able to collect different }
  { individuals from the same household. It is better to concatenate from receive }
  { to guarantee that all individuals are always available.  The same is true for }
  { partial cases                                                                 }
  function concatind()
    fdel( work + "\AllInd.dat" );
    fdel( work + "\AllInd.dat.csidx" );
    FileConcat( work + "\AllInd.dat",                           { result file }
              receive + "\I" + xcluster + "????.dat" );         { individuals from all interviewers }
  end;

  { concatenates partial cases for individuals from all interviewers }
  function concatpari()
    fdel( work + "\AllInd.dat.sts" );
    FileConcat( work + "\AllInd.dat.sts",                      { result file }
              receive + "\I" + xcluster + "????.dat.sts" );     { partial files for individuals from all interviewers }
  end;

  { concatenates household files for all interviewers }
  function concathh()
    fdel( work + "\AllHH.dat" );
    FileConcat( work + "\AllHH.dat",                           { result file }
               receive + "\H" + xcluster + "????.dat" );        { household files from all interviewers }
  end;

  { concatenate biomarker data in case more than one biomarker specialist per team (very unsual but possible) }
  function concatBio()
    fdel( work + "\AllBio.dat" );
    FileConcat( work + "\AllBio.dat",                          { result file }
               receive + "\B" + xcluster + "????.dat" );        { biomarker data files from all biomarker specialists }
  end;

  { concatenates others files for all interviewers }
  function concatoth()
    fdel( work + "\AllOth.dat" );
    FileConcat( work + "\AllOth.dat",                           { result file }
               receive + "\O" + xcluster + "????.dat" );         { other files from all interviewers }
  end;

  { concatenates others files for all interviewers }
  function concatnotes()
    fdel( work + "\AllNotes.dat" );
    FileConcat( work + "\AllNotes.dat",                        { result file }
               receive + "\H" + xcluster + "????.dat.csnot",    { household notes from all interviewers }
               receive + "\I" + xcluster + "????.dat.csnot" );  { individual notes from all interviewers }
  end;

  { concatenates files collected by interviewers for sampling selection }
  function concatsamp()
    fdel( SampData + "\L" + xcluster + ".dat" );
    FileConcat( SampData + "\L" + xcluster + ".dat",            { result file }
               SampData + "\L" + xcluster + "????.dat" );      { files with households listed by interviewers }
  end;

  { since all applications are of data entry type the first lines are the same for all of them }
  function InitPFF()
    setfile( piffile, superv + "\" + AppName + ".pff", create );
    FileWrite( piffile, "[Run Information]" );
    FileWrite( piffile, "Version=CSPro 7.5" );
    FileWrite( piffile, "AppType=Entry" );
    FileWrite( piffile, "[DataEntryInit]" );
    FileWrite( piffile, "OperatorID=" + xsuperv );
  end;

  { prepares PIF file necessary to run CSIndex utility for households, individuals and biomarkers }
  function ALLindexPFF( xtype )
    setfile( piffile, superv + "\" + AppName + ".pff", create );
    FileWrite( piffile, "[Run Information]" );
    FileWrite( piffile, "Version=CSPro 7.5" );
    FileWrite( piffile, "AppType=Index" );
    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Listing="     + superv  + "\" + AppName + ".lst" );               { name of the file used by ChkHHDup application, don't change it }
    if xtype = 1 then
      FileWrite( piffile, "InputData=" + receive + "\H" + xcluster + "????.dat" );      { files from other interviewers }
      FileWrite( piffile, "InputDict=" + dicts   + "\"  + "ccHH80.dcf" );                      { !!!! change to survey's household dictionary }
    elseif xtype = 2 then
      FileWrite( piffile, "InputData=" + receive + "\I" + xcluster + "????.dat" );      { files from other interviewers }
      FileWrite( piffile, "InputDict=" + dicts   + "\"  + "ccIN80.dcf" );                      { !!!! change to survey's individual dictionary }
    elseif xtype = 3 then
      FileWrite( piffile, "InputData=" + receive + "\B" + xcluster + "????.dat" );      { files from other interviewers }
      FileWrite( piffile, "InputDict=" + dicts   + "\"  + "ccBIO80.dcf" );                     { !!!! change to survey's biomarker dictionary }
    endif;
    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "ViewListing=Never" );
    FileWrite( piffile, "Silent=Yes" );
    FileWrite( piffile, "DeletePrompt=Yes" );
    close( piffile );
  end;

  { check duplicates for households including files that may belong to other interviewers }
  function FindHHDups();
    numeric foundups = 0;
    AppName = "FIndexHH";
    ALLindexPFF( 1 );
    RunIndex();
    setfile( filedups, superv + "\" + AppName + ".lst" );
    while FileRead( filedups, Thecommand ) do
      if pos( "*** Case [", Thecommand ) = 1 then
        foundups = 1;
        break;
      endif;
    enddo;
    close( filedups );
    FindHHDups = ( foundups <> 0 );
  end;

  { prepares PFF file for application that parses household duplicates identified by utility CSIndex }
  function ChkHHDup()
    AppName = "ChkHHDup";
    InitPFF();
    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + entry + "\" + AppName + ".ent" );
    FileWrite( piffile, "Listing=.\"   + AppName   + ".lst" );
    FileWrite( piffile, "WriteData=.\" + AppName   + ".wrt" );
    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "INTERV=" + wrkref + "\Interv.dat" );
    FileWrite( piffile, "ccHH80=" + wrkref + "\hnull.dat" );                    { !!! change to survey's household dictionary }
    FileWrite( piffile, "[UserFiles]" );
    FileWrite( piffile, "FILEDUPS=" + superv + "\FIndexHH.lst" );        { the name of the file generated by the index application }
    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xcluster );
    FileWrite( piffile, "ViewListing=Never" );
    FileWrite( piffile, "ViewResults=No" );
    FileWrite( piffile, "ListingWidth=120" );
    FileWrite( piffile, "MessageWrap=No" );
    FileWrite( piffile, "ErrmsgOverride=No" );
    close( piffile );
  end;

  { check duplicates for individuals including files that may belong to other interviewers }
  function FindINDups();
    numeric foundups = 0;
    AppName = "FIndexIN";
    ALLindexPFF( 2 );
    RunIndex();
    setfile( filedups, superv + "\" + AppName + ".lst" );
    while FileRead( filedups, Thecommand ) do
      if pos( "*** Case [", Thecommand ) = 1 then
        foundups = 1;
        break;
      endif;
    enddo;
    close( filedups );
    FindINDups = ( foundups <> 0 );
  end;

  { prepares PFF file for application that parses duplicates identified by utility CSIndex }
  function ChkINDup()
    AppName = "ChkINDup";
    InitPFF();
    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + superv + "\" + AppName + ".ent" );
    FileWrite( piffile, "Listing=.\"   + AppName   + ".lst" );
    FileWrite( piffile, "WriteData=.\" + AppName   + ".wrt" );
    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "INTERV=" + wrkref + "\Interv.dat" );
    FileWrite( piffile, "ccIN80=" + wrkref + "\hnull.dat" );           { !!! change to survey's household dictionary }
    FileWrite( piffile, "[UserFiles]" );
    FileWrite( piffile, "FILEDUPS=" + superv + "\FIndexIN.lst" );    { the name of the file generated by the index application }
    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xcluster );
    FileWrite( piffile, "ViewListing=Never" );
    FileWrite( piffile, "ViewResults=No" );
    FileWrite( piffile, "ListingWidth=120" );
    FileWrite( piffile, "MessageWrap=No" );
    FileWrite( piffile, "ErrmsgOverride=No" );
    close( piffile );
  end;

  { check duplicates for biomarkers including files that may belong to other bipmarker specialist }
  function FindBIDups();
    numeric foundups = 0;
    AppName = "FIndexBI";
    ALLindexPFF( 3 );
    RunIndex();
    setfile( filedups, superv + "\" + AppName + ".lst" );
    while FileRead( filedups, Thecommand ) do
      if pos( "*** Case [", Thecommand ) = 1 then
        foundups = 1;
        break;
      endif;
    enddo;
    close( filedups );
    FindBIDups = ( foundups <> 0 );
  end;

  { prepares PFF file for application that parses duplicates identified by utility CSIndex }
  function ChkBIDup()
    AppName = "ChkBIDup";
    InitPFF();
    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + superv + "\" + AppName + ".ent" );
    FileWrite( piffile, "Listing=.\"   + AppName   + "lst" );
    FileWrite( piffile, "WriteData=.\" + AppName    + ".wrt" );
    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "INTERV=" + wrkref + "\Interv.dat" );
    FileWrite( piffile, "ccBI80=" + wrkref + "\hnull.dat" );         { !!! change to survey's biomarker dictionary }
    FileWrite( piffile, "[UserFiles]" );
    FileWrite( piffile, "FILEDUPS=" + superv + "\FIndexBI.lst" );    { the name of the file generated by the index application }
    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xcluster );
    FileWrite( piffile, "ViewListing=Never" );
    FileWrite( piffile, "ViewResults=No" );
    FileWrite( piffile, "ListingWidth=120" );
    FileWrite( piffile, "MessageWrap=No" );
    FileWrite( piffile, "ErrmsgOverride=No" );
    close( piffile );
  end;

  { construct the PFF file for check-id }
  function CheckID( whatdata )
    { whatdata 1-file received from interviewers - receive      }
    {          2-temporary collapsed files for cluster - temp   }
    {          3-final cluster file - final                     }
    {          4-file from interviewers with biomarker inserted }
    InitPFF();
    numeric chktotals = ( whatdata in 2,3 );
    FileWrite( piffile, "StartMode=ADD" );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + superv + "\" + AppName + ".ent" );
    FileWrite( piffile, "Listing="     + superv + "\" + AppName +  ".lst" );
    FileWrite( piffile, "WriteData="   + superv + "\" + AppName +  ".wrt" );

    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "CONTSUP="  + wrkref + "\Superv" + edit("9999",SupCode) + ".dat" );
    FileWrite( piffile, "SAMPSEL="  + wrkref + "\Sampsel.dat" );
    FileWrite( piffile, "Transmit=" + wrkref + "\TransmitH" + xsuperv + ".dat" );
    FileWrite( piffile, "RMEASURE=" + temp   + "\R" + xcluster + ".dat" );
    if whatdata = 1 then       { data by interviewers }
      FileWrite( piffile, "ccHH80=" + receive + "\H" + xfilenum + ".dat" );
      FileWrite( piffile, "ccIN80=" + work    + "\AllInd.dat" );
    elseif whatdata = 2 then   { data in working directory }
      FileWrite( piffile, "ccHH80=" + temp + "\H" + xcluster + ".dat" );
      FileWrite( piffile, "ccIN80=" + temp + "\I" + xcluster + ".dat" );
    elseif whatdata = 3 then   { data before sending cluster to central office }
      FileWrite( piffile, "ccHH80=" + final + "\H" + xcluster + ".dat" );
      FileWrite( piffile, "ccIN80=" + final + "\I" + xcluster + ".dat" );
    elseif whatdata = 4 then       { temporary data by interviewers with biomarkers added }
      FileWrite( piffile, "ccHH80=" + work + "\T" + xfilenum + ".dat" );
      FileWrite( piffile, "ccIN80=" + work + "\AllInd.dat" );
    endif;
    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xcluster + edit("9",chktotals) );
    FileWrite( piffile, "ViewListing=OnError" );
    FileWrite( piffile, "ViewResults=No" );
    close( piffile );
  end;

  { generates a list of nottes taken by interviewer in cluster }
  function ListNotes()
    InitPff();
    FileWrite( piffile, "StartMode=ADD" );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    { Files section }
    FileWrite( piffile, " " );
    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + entry + "\" + AppName + ".ent" );

    { External Files section }
    FileWrite( piffile, " " );
    FileWrite( piffile, "[UserFiles]" );
    FileWrite( piffile, "FILENOTE=" + work + "\AllNotes.dat" );

    FileWrite( piffile, "[Parameters]" );
    { parameters are: cluster and household number (may include others for sub-samples) }
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xcluster + "1" );
    FileWrite( piffile, "ViewListing=Never" );
    FileWrite( piffile, "ViewResults=No" );
    close( piffile );
  end;

  { construct PFF file to run application to select children for remeasurement }
  function RemeasSel( )
    InitPFF();
    FileWrite( piffile, "StartMode=ADD" );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + superv + "\" + AppName + ".ent" );
    FileWrite( piffile, "Listing="    + superv + "\" + AppName + ".lst" );
    FileWrite( piffile, "WriteData="  + superv + "\" + AppName + ".wrt" );

    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "CONTSUP="  + wrkref + "\Superv" + edit("9999",SupCode) + ".dat" );
    FileWrite( piffile, "SAMPSEL="  + wrkref + "\Sampsel.dat" );
    FileWrite( piffile, "ccHH80="   + temp   + "\H" + xcluster + ".dat" );
    FileWrite( piffile, "ccIN80="   + temp   + "\I" + xcluster + ".dat" );
    FileWrite( piffile, "RMEASURE=" + temp   + "\R" + xcluster + ".dat" );
    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xcluster );
    FileWrite( piffile, "ViewListing=OnError" );
    FileWrite( piffile, "ViewResults=No" );
    close( piffile );
  end;

  { send remeasurement data to health specialists when biomarkers collected on tablets }
  function SendRemeas()
    fpath = utility + "\btclientPC";
    setfile( piffile, fpath + "\transfer.xml", create );
    { XML construction for transferring upgrades }
    FileWrite( piffile, '<?xml version="1.0" encoding="utf-8" ?>' );
    FileWrite( piffile, "<transfer>" );
    FileWrite( piffile, "<caption>" + tr("Sending Children for Remeasurement") + "</caption>" );
    { restrict sending HH assignemnets to individuals in the same team excluding supervisor & biomarkers }
    do i = 1 while i <= TeamMemb
      if SupCode <> tonumber(TeamShare(i,1)) & TeamShare(i,3) = "3" then
        FileWrite( piffile, '<to name="' + TeamShare(i,2) + '" id="' + TeamShare(i,1) + '" />' );
      endif;
    enddo;
    { encryption key, auto send parameter and timeout in seconds after which polling for devices is terminated }
    FileWrite( piffile, "<key>1111111111111111</key>" );
    FileWrite( piffile, "<autosend>false</autosend>" );
    FileWrite( piffile, "<timeout>120</timeout>" );
    { file to be sent }
    fname = temp + "\R" + xcluster + ".dat";
    FileWrite( piffile, '<file source="' + fname + '" destdir="' + btdata + '" />');        { actual file name }
    FileWrite( piffile, "</transfer>" );
    close( piffile );
    TheCommand = fpath + "\btclientPC.exe ";
    ExecSystem( TheCommand, normal, wait );
  end;

  { supervisor receives remeasurement from health specialists when remeasurement collected on tablets }
  function ReceiveRemeas()
    fpath = utility + "\btserverPC";
    TheCommand = fpath + "\btserverPC.exe " + '"id=' + edit("9999",SupCode) + '" "name=' + SupName + '" "rootdir=' + wrkprj + '" "encrkey=1111111111111111"';
    ExecSystem( TheCommand, normal, wait );
  end;

  { construct the PFF file to run application to enter remeasurement }
  function RemeasEntry( capipaper )
    InitPFF();
    FileWrite( piffile, "StartMode=MODIFY;" + xremeas );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + superv + "\" + AppName + ".ent" );
    FileWrite( piffile, "InputData="   + temp   + "\R" + xcluster + ".dat" );
    FileWrite( piffile, "Listing="    + superv + "\" + AppName + ".lst" );
    FileWrite( piffile, "WriteData="  + superv + "\" + AppName + ".wrt" );

    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "FIELDWKQ="  + wrkref + "\Fieldworker.dat" );
    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + edit("9",capipaper) + edit("9999",codebiomarker) );
    FileWrite( piffile, "OnExit=.\SupMenu.pff" );
    FileWrite( piffile, "ViewListing=OnError" );
    FileWrite( piffile, "ViewResults=No" );
    close( piffile );
  end;

  { construct the PFF file to run application to list children remeasured }
  function RemeasLst( )
    InitPFF();
    FileWrite( piffile, "StartMode=ADD" );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + superv + "\" + AppName + ".ent" );
    FileWrite( piffile, "Listing="    + superv + "\" + AppName + ".lst" );
    FileWrite( piffile, "WriteData="  + superv + "\" + AppName + ".wrt" );

    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "RMEASURE="   + temp + "\R" + xcluster + ".dat" );
    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xcluster );
    FileWrite( piffile, "ViewListing=OnError" );
    FileWrite( piffile, "ViewResults=No" );
    close( piffile );
  end;
  
  { generates a list of eligible women or eligible  }
  function ListEligBIO()
    InitPff();
    FileWrite( piffile, "StartMode=ADD" );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    { Files section }
    FileWrite( piffile, " " );
    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + biomarker + "\" + AppName + ".ent" );
    FileWrite( piffile, "Listing=.\" + AppName + ".lst" );

    { External Files section }
    FileWrite( piffile, " " );
    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "ccHH80="   + work + "\AllHH.dat" );
    FileWrite( piffile, "ccBIO80="  + work + "\AllBio.dat" );
    FileWrite( piffile, "ELIGINDV=" + work + "\Eligibles.dat" );

    FileWrite( piffile, "[Parameters]" );
    { parameters are: cluster and household number (may include others for sub-samples) }
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xcluster + "0" );
    FileWrite( piffile, "ViewListing=Never" );
    FileWrite( piffile, "ViewResults=No" );
    close( piffile );
  end;

  { adds biomarker data to houshold data file }
  function AddBiomarker( xtype )
    InitPFF();
    FileWrite( piffile, "StartMode=ADD" );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + superv + "\" + AppName + ".ent" );
    FileWrite( piffile, "Listing="    + superv + "\" + AppName + ".lst" );
    FileWrite( piffile, "WriteData="  + superv + "\" + AppName + ".wrt" );

    FileWrite( piffile, "[ExternalFiles]" );
    if xtype = 1 then
      FileWrite( piffile, "ccHH80="  + work + "\T" + xfilenum + ".dat" );
      FileWrite( piffile, "ccBIO80=" + work + "\AllBio.dat" );
    elseif xtype = 2 then
      FileWrite( piffile, "ccHH80="  + temp + "\H"  + xcluster + ".dat" );
      FileWrite( piffile, "ccBIO80=" + temp + "\B"  + xcluster + ".dat" );
    endif;
    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "ViewListing=OnError" );
    FileWrite( piffile, "ViewResults=No" );
    close( piffile );
  end;

  { constructs PFF file to entry supervisor control file }
  function Sentry()
    InitPFF();
    FileWrite( piffile, "StartMode=MODIFY;" + edit("9999",WCLUSTER) );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + superv + "\" + AppName + ".ent" );
    FileWrite( piffile, "InputData="   + wrkref + "\Superv" + edit("9999",SupCode) + ".dat" );

    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "OnExit=.\SupMenu.pff" );
    close( piffile );
  end;

  { constructs PFF file to assign households to interviewers in the cluster }
  function AssignHH()
    InitPFF();
    FileWrite( piffile, "StartMode=MODIFY;" + edit("9999",WCLUSTER) );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + superv + "\" + AppName + ".ent" );
    FileWrite( piffile, "InputData="   + wrkref + "\Sampsel.dat" );

    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "CONTSUP="  + wrkref + "\Superv" + edit("9999",SupCode) + ".dat" );
    FileWrite( piffile, "INTERV="   + wrkref + "\Interv.dat" );
    FileWrite( piffile, "HHFORINT=" + work   + "\S" + xcluster + ".dat" );

    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + edit("99",steam) );
    FileWrite( piffile, "OnExit=.\SupMenu.pff" );
    close( piffile );
  end;

  { prepares PIF file tp list households in a cluster }
  function Segmentation()
    InitPff();

    FileWrite( piffile, "StartMode=ADD;" + xfilenum );
    FileWrite( piffile, "Lock=Modify, Verify" );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + SampApps + "\" + AppName + ".ent" );
    FileWrite( piffile, "Listing="    + SampData + "\S" + xfilenum + ".lst" );

    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "SEGMENT_DCT=" + sampData + "\S" + xfilenum + ".dat" );
    FileWrite( piffile, "HHLISTING="   + sampData + "\L" + xfilenum + ".dat" );

    FileWrite( piffile, "[Parameters]" );
    { customize parameters for different types of data entry modes }
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xfilenum );
    FileWrite( piffile, "OnExit=.\SupMenu.pff" );
    close( piffile );
  end;

  { prepares PIF file to capture GPS coordinates for the cluster }
  function CaptureGPS()
    InitPff();

    FileWrite( piffile, "StartMode=ADD;" );
    FileWrite( piffile, "Lock=Modify, Verify" );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + SampApps + "\" + AppName + ".ent" );
    FileWrite( piffile, "Listing="    + SampData + "\G" + xfilenum + ".lst" );

    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "GPS_DCT=" + SampData + "\G" + xfilenum + ".dat" );

    FileWrite( piffile, "[Parameters]" );
    { customize parameters for different types of data entry modes }
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xfilenum );
    FileWrite( piffile, "OnExit=.\SupMenu.pff" );
    close( piffile );
  end;

  { constructs PFF file to make household selection based on households listed }
  function selecthh( xtype )
    InitPFF();
    FileWrite( piffile, "StartMode=ADD" );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + superv + "\" + AppName + ".ent" );
    FileWrite( piffile, "Listing="     + superv + "\" + AppName + ".lst" );
    FileWrite( piffile, "WriteData="   + superv + "\" + AppName + ".wrt" );

    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "CLUSTERS="    + wrkref   + "\Clusters.dat" );
    FileWrite( piffile, "SAMPSEL="     + wrkref   + "\Sampsel.dat" );
    FileWrite( piffile, "HHLISTING="   + SampData + "\L"  + xcluster + ".dat" );
    FileWrite( piffile, "SEGMENT_DCT=" + SampData  + "\S" + xfilenum + ".dat" );

    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xcluster + edit("9",xtype) );
    close( piffile );
  end;

  { constructs PIF file for household and women data entry }
  function genpff( addmode, questype, savpart, revisit, change, hghtwght )
    InitPFF();
    if addmode then
      FileWrite( piffile, "StartMode=ADD" );
      FileWrite( piffile, "Lock=MODIFY,VERIFY" );
    else
      if savpart then
        FileWrite( piffile, "StartMode=ADD;" + xcase );
        FileWrite( piffile, "Lock=MODIFY,VERIFY" );
	 else
        FileWrite( piffile, "StartMode=MODIFY;" + xcase );
        FileWrite( piffile, "Lock=ADD,VERIFY" );		
      endif;
    endif;
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + entry + "\" + AppName + ".ent" );
    if questype = 1 then
      FileWrite( piffile, "InputData=" + work + "\AllHH.dat" );
    else
      FileWrite( piffile, "InputData=" + work + "\AllInd.dat" );
    endif;
    FileWrite( piffile, "Listing=" + superv + "\Allentry.lst" );

    FileWrite( piffile, "[ExternalFiles]" );
    if questype = 1 then
      FileWrite( piffile, "ccIN80="   + work   + "\AllInd.dat" );
      FileWrite( piffile, "FIELDWKQ=" + wrkref + "\Fieldworker.dat" );
      FileWrite( piffile, "HHFORINT=" + work   + "\S" + xcluster + ".dat" );
    else
      FileWrite( piffile, "ccHH80=" + work + "\AllHH.dat" );
    endif;
    FileWrite( piffile, "CLUSTERS=" + wrkref + "\Clusters.dat" );
    FileWrite( piffile, "OTHERS="   + work  + "\AllOth.dat" );

    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xparamet );
    FileWrite( piffile, "OnExit=.\SupMenu.pff" );
    close( piffile );
  end;

  { function used to run and execute the data entry applications }
  function csrun( addmode, questype, savpart, revisit, change, hghtwght )
  {
    Parameters - addmode,  the start mode of a data entry program
                 questype, 1-Household, 2-Women
                 savpart,  if the case was partially saved (1-partial add, 2-partial modify)
                 revisit,  if it is a revisit to an incomplete interview (result code <> 1)
                 change,   advance to the first after the control of visits
                 hghtwght, instructs to advance to the height/ weight section for the household
  }
    genpff( addmode, questype, savpart, revisit, change, hghtwght );
    RunPFFS();
  end;

  { generates the PIF file for the application used to display }
  { individuals available to be interviewed in a household     }
  function WrkElig( type )
    { type   1-households, 2-individual }
    InitPff();

    FileWrite( piffile, "StartMode=ADD" );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    { Files section }
    FileWrite( piffile, " " );
    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + entry + "\" + AppName + ".ent" );
    FileWrite( piffile, "Listing=" + superv + "\" + AppName + ".lst" );

    { External Files section }
    FileWrite( piffile, " " );
    FileWrite( piffile, "[ExternalFiles]" );
    FileWrite( piffile, "ccHH80="   + work + "\AllHH.dat" );
    FileWrite( piffile, "ELIGINDV=" + work + "\Eligibles.dat" );
    FileWrite( piffile, "ccIN80="   + work + "\AllInd.dat" );  { for households the actual women's file is not needed }

    { Parameters section }
    FileWrite( piffile, " " );
    FileWrite( piffile, "[Parameters]" );
    { parameters passed are: household number, household or individual questionnaire and interviewer sex }
    FileWrite( piffile, "Language=" + GetLanguage() );
	if type = 1 then
      FileWrite( piffile, "Parameter=0000" + edit("9",type) + "3" );
    else	  
      FileWrite( piffile, "Parameter=" + edit("9999",WNUMBER) + edit("9",type) + "3" );
    endif;	  
    FileWrite( piffile, "ViewListing=Never" );
    FileWrite( piffile, "ViewResults=No" );
    close( piffile );
  end;

  { prepares PIF file to enter transmittal sheet }
  function tentry( ttype )
    InitPff();

    FileWrite( piffile, "StartMode=ADD;" + xcluster );
    FileWrite( piffile, "Lock=Modify, Verify" );
    FileWrite( piffile, "Fullscreen=Yes" );
    FileWrite( piffile, "NoFileOpen=Yes" );

    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=" + superv + "\" + AppName + ".ent" );
    if  ttype = 1 then
      FileWrite( piffile, "InputData=" + wrkref + "\TransmitH" + xsuperv + ".dat" );
    else
      FileWrite( piffile, "InputData=" + wrkref + "\TransmitM" + xsuperv + ".dat" );
    endif;
    FileWrite( piffile, "Listing=" + superv + "\T" + xcluster + ".lst" );

    FileWrite( piffile, "[ExternalFiles]" );

    FileWrite( piffile, "[Parameters]" );
    { customize parameters for different types of data entry modes }
    FileWrite( piffile, "Language=" + GetLanguage() );
    FileWrite( piffile, "Parameter=" + xcluster );
    FileWrite( piffile, "OnExit=.\SupMenu.pff" );
    close( piffile );
  end;

  { check that there is at least one file of the type needed received for cluster }
  function AnyFiles( thisfile );
    string fletter = "HIB";   // H-Households, I-Individuals, B-Biomarkers
    found = 0;
    do i = 1 while i <= TeamMemb & !found
      if FileExist( receive + "\" + fletter[thisfile:1] + xcluster + TeamShare(i,1) + ".dat" ) then
        found = 1;
      endif;
    enddo;
    AnyFiles = found;
  end;

  { collapses data files from all interviewers for the same cluster }
  function collapse();
    { files: data and partials for households and women }
    FileConcat( temp + "\H" + xcluster + ".dat",                   { households }
               receive + "\H" + xcluster + "????.dat" );
    FileConcat( temp + "\H" + xcluster + ".dat.sts", 
	           receive + "\H" + xcluster + "????.dat.sts" );
    FileConcat( temp + "\I" + xcluster + ".dat",                   { individuals }
               receive + "\I" + xcluster + "????.dat" );
    FileConcat( temp + "\I" + xcluster + ".dat.sts",
               receive + "\I" + xcluster + "????.dat.sts" );
    FileConcat( temp + "\B" + xcluster + ".dat",                   { biomarkers }
               receive + "\B" + xcluster + "????.dat" );
    ParaData(Concat, temp + "\H" + xcluster + ".cslog",            { paradata for households }
               receive + "\H" + xcluster + "????.cslog" );
    ParaData(Concat, temp + "\I" + xcluster + ".cslog",            { paradata for individuals }
               receive + "\I" + xcluster + "????.cslog" );
  end;

  { sort used when biomarker collected on tablets to remove deleted records with '~' }
  function SortHH();
    AppName = "SortHH";
    setfile( piffile, superv + "\" + AppName + ".pff", create );
    FileWrite( piffile, "[Run Information]" );
    FileWrite( piffile, "Version=CSPro 6.3" );
    FileWrite( piffile, "AppType=Sort" );
    FileWrite( piffile, " " );
    FileWrite( piffile, "[Files]" );
    FileWrite( piffile, "Application=.\" + AppName + ".ssf" );
    FileWrite( piffile, "InputData="    + temp    + "\H" + xcluster + ".dat" );
    FileWrite( piffile, "OutputData="   + final   + "\H" + xcluster + ".dat" );
    FileWrite( piffile, "Listing=.\SortHH.ssf.lst" );
    FileWrite( piffile, " " );
    FileWrite( piffile, "[Parameters]" );
    FileWrite( piffile, "ViewListing=Never" );
    FileWrite( piffile, "ViewResults=No" );
    close( piffile );
    RunSort();
  end;

  { generate all files for cluster to send them later to the central office }
  function alldata();
    { copy main files from temp to final }
    {  Note that households are copied by SORTHH, therfore they are not included here }
	FileCopy( temp + "\I" + xcluster + ".dat", final );         { individuals }
    FileCopy( temp + "\B" + xcluster + ".dat", final );         { !!! when Biomarkers collected in tablets }
    FileCopy( temp + "\R" + xcluster + ".dat", final );         { remeasurement for children }
	FileCopy( temp + "\H" + xcluster + ".cslog", final );       { paradata households }
	FileCopy( temp + "\I" + xcluster + ".cslog", final );       { paradata individuals }
    { concatenate others }
    FileConcat( final + "\O" + xcluster + ".dat",
               receive + "\O" + xcluster+ "????.dat" );
    { concatenate note files }
    FileConcat( final + "\N" + xcluster + ".csnot",
               receive + "\?" + xcluster + "????.dat.csnot" );
    {  Copy pictures for the cluster, they are in temp menu when tansferred to supervisor }
	FileCopy( temp + "\P" + xcluster + "*.jpg", pictures );     { pictures }
  end;
  
  { files transfer by supervisor when they collect data }
  function SupTransfer()
    { check if either a household or a woman's file arrived at the supervisor machine }
    if FileExist( data + "\H" + xfilenum + ".dat" ) |
       FileExist( data + "\I" + xfilenum + ".dat" ) |
       FileExist( data + "\B" + xfilenum + ".dat" ) then      // when Biomarkers collected in tablets
      FileCopy( data + "\?" + xfilenum + ".*", temp );
    endif;
  end;	

  { interviewer transfer data to supervisor using bluetooth, will return true if successful }
  function getquest( exists )
    fpath = utility + "\btserverPC";
    { if data already in temp directory means that it was previously sent but }
    { supervisor was working with a different interviewer at the time. Since }
    { the data are there interviewers don't have to transfer them again      }
    if !exists & SupCode <> IntCode then
      TheCommand = fpath + "\btserverPC.exe " + '"id=' + edit("9999",SupCode) + '" "name=' + SupName + '" "rootdir=' + wrkprj + '" "encrkey=1111111111111111"';
      ExecSystem( TheCommand, normal, wait );
    elseif SupCode = IntCode then	  
	  SupTransfer();
    endif;
    ifok = 0;
    { check if either a household or a woman's file arrived at the supervisor machine }
    if FileExist( temp + "\H" + xfilenum + ".dat" ) |
       FileExist( temp + "\I" + xfilenum + ".dat" ) |
       FileExist( temp + "\B" + xfilenum + ".dat" ) then      // when Biomarkers collected in tablets
      { delete empty household/individual files to avoid blank lines }
      if FileEmpty( temp + "\H" + xfilenum + ".dat" ) then
        FileDelete( temp + "\H" + xfilenum + ".*" );
      endif;
      if FileEmpty( temp + "\I" + xfilenum + ".dat" ) then
        FileDelete( temp + "\I" + xfilenum + ".*" );
      endif;
      if FileEmpty( temp + "\B" + xfilenum + ".dat" ) then   // when Biomarkers collected in tablets
        FileDelete( temp + "\B" + xfilenum + ".*" );
      endif;
      { in some cases FileCopy didn't work when there were files in the target directory }
      FileDelete( receive + "\?" + xfilenum + ".*" );
      { copy files from temporary to receive directory }
      if FileCopy( temp + "\?" + xfilenum + ".*", receive ) then
        { delete household files from temporary directory }
        FileDelete( temp + "\H" + xfilenum + ".dat" );
        FileDelete( temp + "\H" + xfilenum + ".dat.csnot" );
        FileDelete( temp + "\H" + xfilenum + ".dat.sts" );
        FileDelete( temp + "\H" + xfilenum + ".cslog" );
        { delete individual files from temporary directory }
        FileDelete( temp + "\I" + xfilenum + ".dat" );
        FileDelete( temp + "\I" + xfilenum + ".dat.csnot" );
        FileDelete( temp + "\I" + xfilenum + ".dat.sts" );
        FileDelete( temp + "\I" + xfilenum + ".cslog" );
        { delete biomarker files from temporary directory }                        // when Biomarkers collected in tablets
        FileDelete( temp + "\B" + xfilenum + ".dat" );
        FileDelete( temp + "\B" + xfilenum + ".dat.csnot" );
        FileDelete( temp + "\B" + xfilenum + ".dat.sts" );
        FileDelete( temp + "\B" + xfilenum + ".cslog" );
        { delete other file from temporary directory }
        FileDelete( temp + "\O" + xfilenum + ".dat" );
        ifok = 1;
      else
        errmsg( 019, xfilenum );
      endif;
    else
      errmsg( 017, WCLUSTER, intcode );
    endif;
    getquest = ifok;
  end;

  { supervisor receives household selection from interviewers using bluetooth }
  function receivesamp()
    fpath = utility + "\btserverPC";
    TheCommand = fpath + "\btserverPC.exe " + '"id=' + edit("9999",SupCode) + '" "name=' + SupName + '" "rootdir=' + wrkprj + '" "encrkey=1111111111111111" "autoclose=false"';
    ExecSystem( TheCommand, normal, wait );
  end;

  { check if other interviewers sent data concurrently }
  function remainfile()
    do i = 1 while i <= TeamMemb 
      fname = xcluster + TeamShare(i,1) + ".dat";
      { check if household/woman file arrived at the supervisor machine for interviewer(i) }
      if FileExist( temp + "\H" + fname ) |
         FileExist( temp + "\I" + fname ) |
         FileExist( temp + "\B" + fname ) then               // when Biomarkers collected in tablets
        ICODE = tonumber(TeamShare(i,1));
        loadcase( INTERV, ICODE );
        errmsg( 018, WCLUSTER, ICODE, INAME );
      endif;
    enddo;
  end;

  { check version number available for next back-up.  It is a Round-robin system made of up to 10 versions  }
  function backupn()
    numeric n;
    do n = 0 while n <= 9 & FileExist(bkpsup + "\C" + xcluster + "_" + edit("9",n) + ".zip")
    enddo;
    { open space for next back-up }
    x = n + 1;
    if n = 9 then x = 0 endif;
    fname = bkpsup + "\C" + xcluster + "_" + edit("9",x) + ".zip";
    if FileExist( fname ) then
      FileDelete( fname );
    endif;
    backupn = n;
  end;

  { finds the drive letter where the flash memory is located }
  function searchdrive()
    found = 0;
    do i = 1 while i <= 5 & !found
      bkpsup = "DEFGH"[i:1] + ":\Backup";
      if DirExist(bkpsup) then
        found = 1;
      endif;
    enddo;
    searchdrive = found;
  end;

  { back-ups final data to supervisor flash memory }
  function backupf()
    numeric nextbkp;
    if !searchdrive() | !DirExist(bkpsup) then
      errmsg( 070, bkpsup );
      searchdrive();
    endif;
    if DirExist(bkpsup) then
      { round robin next back-up number }
      nextbkp = backupn();
      TheCommand = Utility + "\UpgradePc\7za.exe a -w" + work + " -i!" + final +  "\*" + xcluster + ".dat -pDHS" + xsuperv + " " + bkpsup + "\C" + xcluster + "_" + edit("9",nextbkp) + ".zip";
{     errmsg( "Command=%s", TheCommand );   }
      ExecSystem( TheCommand, maximized, wait );
      errmsg( 072, bkpsup );
    else
      errmsg( 071, bkpsup );
    endif;
  end;

  { check that files for households and women exist in a given directory }
  function files_in( string directory, string thisfile )
    ifok = 0;
    if FileExist( directory + "\H" + thisfile + ".dat" ) &
       FileExist( directory + "\I" + thisfile + ".dat" ) then
      ifok = 1;
    endif;
    files_in = ifok;
  end;

  { check that household file (thisfile) exists in a given directory }
  function files_hh( string directory, string thisfile )
    ifok = 0;
    if FileExist( directory + "\H" + thisfile + ".dat" ) &
      !FileEmpty( directory + "\H" + thisfile + ".dat" ) then
      ifok = 1;
    endif;
    files_hh = ifok;
  end;

  { back-ups data to hard drive and memory flash }
  function zipfiles()
    searchdrive();
    if DirExist(bkpsup) then
      { delete previously zipped file }
      if FileExist( zipclust + "\Z" + xcluster + ".ZIP" ) then
        FileDelete( zipclust + "\Z" + xcluster + ".ZIP" );
      endif;
      { delete index files }
      FileDelete( final + "\?" + xcluster + ".dat.csidx" );
      { Zip files to the SD card }
      fpath = utility + "\upgradePC\7za.exe";
      TheCommand = fpath + " a " + ZipClust + "\Z" + xcluster + ".zip " + final + "\?" + xcluster + ".*";
      ExecSystem( TheCommand, maximized, wait );
      TheCommand = fpath + " a " + ZipClust + "\Z" + xcluster + ".zip " + wrkref + "\SUPERV" + edit("9999",SupCode) + ".dat";
      ExecSystem( TheCommand, maximized, wait );
      TheCommand = fpath + " a " + ZipClust + "\Z" + xcluster + ".zip " + wrkref + "\TRANSM" + edit("9999",SupCode) + ".dat";
      ExecSystem( TheCommand, maximized, wait );
    else
      errmsg( 061 );
    endif;
  end;

  function ReadIfssLog( string logFileName )
    //results:
    //0       - log file not present - no login attempt made
    //1001    - login successful, finished send/receive
    //2000    - client closed before finishing send/receive
    //2001    - login unsuccessful: No internet connection
    //2002    - login unsuccessful: No project ID file present
    //2003    - login unsuccessful: User data unavailable
    //2004    - login unsuccessful: User name/password incorrect
    //2005    - login unsuccessful: Project not present on the server
    //default - Error reading file (wrong file supplied or something)
    x = 0;
    if FileExist(logFileName) then
      setfile( logFile, logFileName );
      open( logFile );
      FileRead( logFile, logCode );
      close( logFile) ;
      x = ToNumber(logCode);
    endif;
    ReadIfssLog = x;
  end;

  { function to send data to central office using IFSS }
  function SendData()
    errmsg( 100 );
    {deleting the lastmarker.ifss file}
    ExecSystem( utility + "\IfssClientPC\IfssClientPC.exe Resetlastmarker log=" + IFSSlogfile, normal, wait );
    if ReadIfssLog( IFSSLogfile ) = 1001 then
      errmsg( 101 );
    else
      errmsg( 102 );
    endif;
  end;

  { send upgrades from the supervisor machine to the interviewer using bluetooth }
  function sendupgr()
    fpath = utility + "\btclientPC";
    setfile( piffile, fpath + "\transfer.xml", create );
    { XML construction for transfering upgrades }
    FileWrite( piffile, '<?xml version="1.0" encoding="utf-8" ?>' );
    FileWrite( piffile, "<transfer>" );
    FileWrite( piffile, "<caption>" + tr("Sending Upgrades") + "</caption>" );
    { restrict sending upgrades to individuals in the same team excluding supervisor }
    do i = 1 while i <= TeamMemb
      if SupCode <> tonumber(TeamShare(i,1)) then
        FileWrite( piffile, '<to name="' + TeamShare(i,2) + '" id="' + TeamShare(i,1) + '" />' );
      endif;
    enddo;
    { encryption key, auto send parameter and timeout in seconds after which polling for devices is terminated }
    FileWrite( piffile, "<key>1111111111111111</key>" );
    FileWrite( piffile, "<autosend>false</autosend>" );
    FileWrite( piffile, "<timeout>120</timeout>" );
    { identify all files with name upgradex in supervisor upgrade directory }
    do i = 1 while i
      if i < 10 then
        xfile = edit( "9", i );
      elseif i < 100 then
        xfile = edit( "99", i );
      else
        xfile = edit( "999", i );
      endif;
      { UPGDHS in following instruction is the name of the file with the upgrades }
      fname = upgrades + "\" + upgrname + xfile + ".ZIP";
      if FileExist(fname) then
        { upgrade file version i }
        FileWrite( piffile, '<file source="' + fname + '" destdir="' + btupgr + '" />' );        { actual file name }
      else
        break;
      endif;
    enddo;
    FileWrite( piffile, "</transfer>" );
    close( piffile );
    TheCommand = fpath + "\btclientPC.exe ";
    ExecSystem( TheCommand, normal, wait );
  end;

  { send cluster household assignments to interviewers using bluetooth }
  function sendassign()
    fpath = utility + "\btclientPC";
    setfile( piffile, fpath + "\transfer.xml", create );
    { XML construction for transferring upgrades }
    FileWrite( piffile, '<?xml version="1.0" encoding="utf-8" ?>' );
    FileWrite( piffile, "<transfer>" );
    FileWrite( piffile, "<caption>" + tr("Sending Households Assigned") + "</caption>" );
    { restrict sending HH assignemnets to individuals in the same team excluding supervisor & biomarkers }
    do i = 1 while i <= TeamMemb
      if SupCode <> tonumber(TeamShare(i,1)) & TeamShare(i,3) <> "3" then
        FileWrite( piffile, '<to name="' + TeamShare(i,2) + '" id="' + TeamShare(i,1) + '" />' );
      endif;
    enddo;
    { encryption key, auto send parameter and timeout in seconds after which polling for devices is terminated }
    FileWrite( piffile, "<key>1111111111111111</key>" );
    FileWrite( piffile, "<autosend>false</autosend>" );
    FileWrite( piffile, "<timeout>120</timeout>" );
    { construct send the file }
    fname = work + "\S" + xcluster + ".dat";
    if FileExist(fname) then
      FileWrite( piffile, '<file source="' + fname + '" destdir="' + btwork + '" />' );        { actual file name }
      FileWrite( piffile, '<file source="' + fname + '.csidx" destdir="' + btwork + '" />' );    { index file }
    endif;
    FileWrite( piffile, "</transfer>" );
    close( piffile );
    TheCommand = fpath + "\btclientPC.exe ";
    ExecSystem( TheCommand, normal, wait );
  end;

  { get the last upgrade number based on the list of files obtained by ListUpgrades object }
  function GetUpgrNumber()
    numeric maxupgr = 0, currupgr = 0, minl = 9999, maxl = 0, l = 0;
	array lenfile(5);
    do i = 1 while i <= ListUpgrades.length()
      if length(ListUpgrades(i)) < minl then
        minl = length(ListUpgrades(i));
	  endif;
      if length(ListUpgrades(i)) > maxl then
        maxl = length(ListUpgrades(i));
	  endif;
    enddo;
    do i = minl while i <= maxl
	  l = l + 1;
	  lenfile(l) = i
	enddo;
	do l = 1 while l <= maxl - minl + 1
      do i = 1 while i <= ListUpgrades.length()
        if length(ListUpgrades(i)) = lenfile(l) then
          k = pos(toupper(upgrname), toupper(ListUpgrades(i))) + length(upgrname);	
          do j = k while ListUpgrades(i)[j:1] <> "." enddo;
          currupgr = tonumber( ListUpgrades(i)[k:j-k] );
//	      errmsg( "File=%s number=%d", ListUpgrades(i), currupgr ); 
        endif;
      enddo;
    enddo;	  
    GetUpgrNumber = currupgr;
  end;

  { keeps track of the last upgrade sent to both supervisors and interviewers }
  function trackupgrades()
    numeric LastUpgrade = 0, PrevUpgrade = 0;
    { get list of upgrades in in upgrade directory }
    { 1-obtain the latest upgrade arrived in directory upgrades }
	listupgrades.clear();
	DirList( listupgrades, upgrades, upgrname + "*.zip" );
    LastUpgrade = GetUpgrNumber();
    { 2-obtain the latest upgrade processed in directory utility\UpgradePC }
	listupgrades.clear();
	DirList( listupgrades, utility + "\UpgradePc", upgrname + "*.zip" );
    PrevUpgrade = GetUpgrNumber();
    trackupgrades = ( LastUpgrade > PrevUpgrade );
  end;

  { applying updates coming from IFSS into supervisor's machine in directory upgrades }
  function applyupgr()
    fpath = utility + "\upgradePC";
    setfile( piffile, fpath + "\path.txt", create );
    { root directory to start unzip }
    FileWrite( piffile, "PROJPATH:C:\" );
    { directory where upgrades are located in an SD card, in case that it is needed }
    FileWrite( piffile, "SDUPGRDDIR:" + upgrades + "\" );
    { directory where ZIP file is going to be copied from the supervisor machine }
    FileWrite( piffile, "BTUPGRDDIR:" + upgrades + "\" );
    close( piffile );
    TheCommand = fpath + "\upgradepc.exe bluetooth filemask=" + upgrname + " hidden";
    ExecSystem( TheCommand, normal, wait );
    { display a warning to exit the system so that upgrades take effeect }
    errmsg( 090 );
  end;

  { change file setting for household assignment for a cluster }
  function SetEligFile()
    x = 1;
    { file name for households assigned to interviewers is only known after the cluster is entered. It is set here }
    fname = work + "\Eligibles.dat";
    if !FileExist( fname ) then
      errmsg( 035, fname );
      x = 0;
    else
      if !setfile( ELIGINDV, fname ) then
        errmsg( 035, fname );
        x = 0;
      endif;
    endif;
    SetEligFile = x;
  end;

  { gets one household from household file }
  function getonehh()
    WINDIV   = notappl;
    WNAME    = " ";
    WNUMBER  = notappl;
    WADDRESS = " ";
    AppName = "WrkElig";
    { concatenate files to get access to all households }
    concathh();                { concatenate households }
    concatoth();               { concatenate others }
    ifok = 1;
    WrkElig( 1 );              { generates file with interviewer households in cluster }
    close( ELIGINDV );
    RunPFFW();

    SetEligFile();
    ifok = selcase( tr("Select a household from the list displayed"), ELIGINDV, "", 5 )
           include( ZOWNER, ZNUMBER, ZNAME, ZSTATUS, ZRESULT ) where ZQUEST = 1;
    if ifok then
      WNUMBER  = ZNUMBER;
      WADDRESS = ZADDRESS;
    else
      errmsg( 005 );
      ifok = 0;
    endif;
    getonehh = ifok;
  end;

  { gets one woman from household file }
  function getonewm()
    { concatenate files to get access to all women }
    concatind();               { concatenate women }
    WINDIV  = notappl;
    WNAME  = " ";
    AppName = "WrkElig";
    WrkElig( 2 );           { generates file with HH from all interviewers and others }
    close( ELIGINDV );
    RunPFFW();

    SetEligFile();
    if selcase( tr("Select an individual from the list displayed"), ELIGINDV, "", 5 ) 
	   include( ZOWNER, ZNUMBER, ZLINE, ZNAME, ZQTYPEA, ZSTATUS ) 
       where ZQUEST <> 1 & ZLINE <> notappl then
      WINDIV = ZLINE;
      WNAME  = ZNAME;
      ifok = 1;
    else
      ifok = 0;
    endif;
    getonewm = ifok;
  end;

PROC FL_MENU
PreProc

  CSPro = PathName( CSPro );

  { set font for value sets }
  setfont( All, "Arial", 18, bold );

  { work project }
  wrkprj = "C:\CC81";                          { work project in laptop }
  wrkpii = wrkprj + "\Pii";                    { subdirecory to store data with PII }
  { set up minimal user bar }
  userbase();
  userbar( show );
  { set the language at the start of the program, defaulting to English }
  setlanguage(loadsetting("Language", "EN"));
  SameSession = tonumber(loadsetting("SupSession", "99"));
  MoreThanOne = tonumber(loadsetting("Justone","0"));

  entry     = wrkprj + "\Entry";      { data entry programs }
  superv    = wrkprj + "\Superv";     { supervisor programs }
  dicts     = wrkprj + "\Dicts";      { survey's dictionaries }
  utility   = wrkprj + "\Utility";    { all utilities used by the system }
  SampApps  = wrkprj + "\SampApps";   { household listing applications }
  upgrades  = wrkprj + "\Upgrades";   { place where upgrades for interviewers are stored by IFSS }
  Biomarker = wrkprj + "\Biomarker";  { biomarker applications }
  wrkref    = wrkpii + "\Ref";        { reference directory for clusters, sample and teams files  }
  data      = wrkpii + "\Data";       { data when supervisor collects data as interviewer }
  receive   = wrkpii + "\Receive";    { data coming from interviewers }
  final     = wrkpii + "\Final";      { to store final files to send to central office }
  SampData  = wrkpii + "\SampData";   { directory where households listed by interviewers for sampling selection are stored }
  pictures  = wrkpii + "\Pictures";   { pictures to be sent to the central office }
  temp      = wrkpii + "\Temp";       { to store working data files }
  work      = wrkpii + "\Work";       { working area to store concatenated households }
  btupgr    = "\Upgrades\";           { last portion of directory where upgrades will be copied in the interviewer's machine }
  btwork    = "\Pii\Work\";           { last portion of directory where file with assigned households will be copied to interviewer's machine }
  btdata    = "\Pii\Data\";           { last portion of directory where file with remeasurements will be copied to health specialist's machine }
  bkpsup    = "E:\Backup";            { directory to backup data to supervisor's flash memory }
  zipclust  = "E:\Zipdata";           { zip files to be sent to central office }
  
  { check presence of mandatory directories }
  ChkDir( entry );
  ChkDir( superv );  
  ChkDir( dicts );   
  ChkDir( temp );    
  ChkDir( work );    
  ChkDir( utility );  
  ChkDir( SampApps );    // you may want to delete this directory if HH listing not done as part of the survey 
  ChkDir( upgrades ); 
  ChkDir( Biomarker );
  ChkDir( wrkref );  
  ChkDir( receive );
  ChkDir( final );
  ChkDir( SampData );    // you may want to delete this directory if HH listing not done as part of the survey 

  { file names for upgrades }
  upgrname = "UpgDHS";                          { upgrade name for interviewers DHS }

  { Check that there are not two concurrent sessions of CSPro loaded at the same time }
  if !SameSession then
    if MoreThanOne then
      errmsg( 150 );
      x = accept( tr("Reset"), tr("Yes"), tr("No") );
      if x = 2 then stop(1) endif;
    endif;
  endif;	
  SaveSetting( "Justone", "1" );

  setfile( fromckid, superv + "\Errors.txt" );  { file coming from CHECKID }

  { initialize array of interviewers }
  do i = 1 while i <= 20
    do j = 1 while j <= 3
      TeamShare(i,j) = "";
	enddo;
  enddo;

PROC MENU_LEVEL
PreProc
  open( INTERV );
  do j = 1 while loadcase( INTERV )    { load list of interviewers into memory }
    intvwcode(j) = ICODE;
    intvwname(j) = INAME;
    intvwteam(j) = ITEAM;
    intvwsex (j) = ISEX;
    intvwrole(j) = IROLE;
  enddo;
  totintvw = j-1;
  close( INTERV );
  if samesession <> 99 then
    advance to WFINAL;
  endif;

PostProc
  { PostProc of level 0 }
  stop(1);

PROC WSUPER
onfocus
  fieldworkers.clear();
  do j = 1 while j <= totintvw
    if intvwrole(j) = 2 then            { supervisor }
      fieldworkers.add( intvwname(j), intvwcode(j) );
    endif;
  enddo;
  SetValueSet( $, fieldworkers );
  
  $ = tonumber( loadsetting("Supervisor") );

postproc
  SaveSetting( "Supervisor", edit("9999",$) );
  do j = 1 while j <= totintvw & intvwcode(j) <> $ enddo;
  if j <= totintvw then
    steam   = intvwteam(j);
    SupCode = intvwcode(j);
    SupName = intvwname(j);
  endif;

  { populate array of fieldworkers that belong to the same team }
  j = 0;
  do i = 1 while i <= totintvw
    if intvwteam(i) = steam then
      j = j + 1;
      TeamShare(j,1) = edit("9999",intvwcode(i));
      TeamShare(j,2) = intvwname(i);
      TeamShare(j,3) = edit("9",intvwrole(i));
	  if intvwrole(i) = 3 then
	    codebiomarker = intvwcode(i);
	  endif;
    endif;
  enddo;
  TeamMemb = j;

  { the system will automatically check for upgrades required to both supervisors and interviewers }
  { - any upgrade sent to interviewers is also applied to supervisors                              }
  { - upgrades sent exclusively to supervisors will be installed automatically by IFSS             }
  if trackupgrades() then
    applyupgr();
    errmsg( 091 );
  endif;
  skip to WCLUSTER;

PROC WCLUSTER
onfocus
  $ = tonumber( loadsetting("Cluster") );

postproc
  if !loadcase( CLUSTERS, $ ) then
    errmsg( 001, WCLUSTER );
    reenter;
  endif;
  close( CLUSTERS );
  SaveSetting( "Cluster", edit("9999",$) );
  
  {errmsg( "Province=%s, Region=%s, District=%s, Commune=%s, ZD=%s", strip(YPROVINN), strip(YREGIONN), strip(YDISTRICTN), strip(YCOMUNEN), strip(YENUMERN) );}
  WURBRUR    = GetValueLabel( YURBRUR );
  WREGIONN   = YREGIONN;
  WSTATEN    = YSTATEN;
  WDISTRICTN = YDISTRICTN;
  WCITYN     = YCITYN;
  xcluster = edit( "9999", WCLUSTER );                    { cluster number }
  xintnum  = "0000";                                      { Interviewer code not needed }
  xsuperv  = edit( "9999", SupCode );                     { Supervisor }


  { check if supervisor files needed for biomarkers present in \Ref }
  { 1-Control file for supervisor }
  fname = wrkref + "\Superv" + xsuperv + ".dat";
  if !FileExist(fname) then
    FileCopy( wrkref + "\SupervXXXX.dat", fname );
  endif;
  { 1-HIV transmittal sheet }
  fname = wrkref + "\TransmitH" + xsuperv + ".dat";
  if !FileExist(fname) then
    FileCopy( wrkref + "\TransmitHXXXX.dat", fname );
  endif;
  { 1-Malaria transmittal sheet }
  fname = wrkref + "\TransmitM" + xsuperv + ".dat";
  if !FileExist(fname) then
    FileCopy( wrkref + "\TransmitMXXXX.dat", fname );
  endif;

  xparaux  = xintnum + xsuperv + "10100";         { Interviewer, supervisor, access by central office/supervisors, in modify mode }
  xparamet = xparaux;
  { xparamet postions as defined by the data collection applications  }
  {  1:4   - interviewer number                                       }
  {  5:4   - supervisor number                                        }
  {  9:1   - central office, supervisors also use the flag set to 1   }
  { 10:1   - revisit                                                  }
  { 11:1   - modify completed                                         }
  { 12:1   - if case has been saved partially                         }
  { 13:1   - enter height & weight data                               }
  { 14:4   - household number                                         }
  { 18:2   - woman's line number                                      }
  xfilenum = "";                  { assign initial file name as NULL  }

PROC WFINAL
onfocus
  fdel( work + "\Eligibles.dat" );
  fdel( work + "\Eligibles.dat.csidx" );
  WNUMBER  = notappl;
  WADDRESS = " ";
  WCORRECT = notappl;
  SaveSetting( "SupSession", "0" );

postproc
  if getlanguage() = "EN" then
    heading = "Supervisor Menu: Cluster " + xcluster + " Supervisor " + xsuperv;
    action = accept( heading,
             { 1}  "1 Activities to control sample",
             { 2}  "2 Get data from interviewer/biomarker",
             { 3}  "3 List data from interviewer/biomarker",
             { 4}  "4 Review HH/Individual questionnaires",
             { 5}  "-------------------------------------",
             { 6}  "6 Close/list cluster",
             { 7}  "7 Transfer data to central office",
             { 8}  "8 List cluster's notes",
             { 9}  "9 Send upgrades to interviewers",
             {10}  "A Enter transmittal sheets",
             {11}  "B Height and weight remeasurement",
             {12}  "C Change cluster number",
             {13}  "E Exit system" );
  elseif getlanguage() = "ES" then
    heading = "Menu de Supervisor: Segmento " + xcluster + " Supervisor " + xsuperv;
    action = accept( heading,
             { 1}  "1 Actividades de control de muestra",
             { 2}  "2 Recibir datos de entrevistadora/biomarcador",
             { 3}  "3 Listar datos de entrevistadora/biomarcador",
             { 4}  "4 Revisar Cuestionarios hogares/individuales",
             { 5}  "--------------------------------------------",
             { 6}  "6 Cerrar/Listar segmento",
             { 7}  "7 Enviar datos a la oficina central",
             { 8}  "8 Listar Notas en segmento",
             { 9}  "9 Enviar actulizaciones a entrevistadoras",
             {10}  "A Ingresar hojas de transmision",
             {11}  "B Remedicion para peso y talla ",
             {12}  "C Cambiar Numero de segmento",
             {13}  "E Salir del Sistema " );
  elseif getlanguage() = "FR" then
    heading = "Menu Superviseur: Grappe" + xcluster + " Superviseur " + xsuperv;
    action = accept( heading,
              { 1} "1 Activités sur le fichier contrôle de l'échantillon",
              { 2} "2 Recevoir les données de l’enquêteur(trice)/Biomarqueur",
              { 3} "3 Lister les données de l’enquêteur(trice)/Biomarqueur",
              { 4} "4 Revoir Questionnaires ménages/individuels",
              { 5} "-------------------------------------",
              { 6} "6 Fermer/Enumérer la grappe",
              { 7} "7 Transférer des données au bureau central",
              { 8} "8 Lister des notes de la grappe",
              { 9} "9 Envoyer les mises à jour aux enquêteurs",
              {10} "A Entrez la feuille de transmission du test",
              {11} "B Re-mesure de la taille et du poids ",
              {12} "C Changer de numéro de grappe",
              {13} "E Quitter le système" );
  endif;

  if !action | action = 13 then
    SaveSetting( "Justone", "0" );
    SaveSetting( "SupSession", "0" );
    stop(1)
  endif;
  SaveSetting( "SupSession", "1" );
  if action = 1 then       { sample activities }
    if getlanguage() = "EN" then
      option = accept( heading,
               { 1}  "1 Manipulate control file",
               { 2}  "2 Assign households for cluster",
               { 3}  "3 Send household assignment to interviewers",
               { 4}  "--------------------------------------------------",
               { 5}  "4 Implement cluster segmentation",
               { 6}  "5 Capture cluster coordinates",
               { 7}  "6 Receive households listed for sampling",
               { 8}  "7 Report households listed for sampling",
               { 9}  "8 Select households to be included in sample",
               {10}  "9 Return to main menu" );
    elseif getlanguage() = "ES" then
      option = accept( heading,
               { 1}  "1 Manipular el archivo de control",
               { 2}  "2 Asignar hogares en el segmento",
               { 3}  "3 Enviar asignacion a entrevistadoras",
               { 4}  "--------------------------------------------------",
               { 5}  "4 Implementar segmentacion en segmento",
               { 6}  "5 Capturar coordenadas en segmento",
               { 7}  "6 Recibir de hogares para seleccion de muestra",
               { 8}  "7 Reporte de hogares listados para la muestra",
               { 9}  "8 Seleccionar hogares a ser incluidos en la muestra",
               {10}  "9 Regresar al menu principal" );
    elseif getlanguage() = "FR" then
      option = accept( heading,
               { 1}  " 1 Manipuler le fichier contrôle",
               { 2}  " 2 Affecter les ménages pour une grappe",
               { 3}  " 3 Envoyer l'affectation des ménages aux enquêteurs/trices",
               { 4}  "--------------------------------------------------",
               { 5}  "4 Implémenter la segmentation de la grappe",
               { 6}  "5 Capturer les coordonnées de la grappe",
               { 7}  "6 Recevoir la liste des ménages pour l'échantillonnage",
               { 8}  "7 Rapport de la liste des ménages pour l'échantillonnage",
               { 9}  "8 Sélectionner des ménages à inclure dans l'échantillon",
               {10}  "9 Retourner au menu principal" );
    endif;
    if option = 1 then          { update supervisor control file }
      AppName = "Sentry";
      Sentry();
      RunPFFS();
    elseif option = 2 then      { assign households to interviewers }
      close( INTERV );
      AppName = "AssignHH";
      AssignHH();
      RunPFFS();
      open( INTERV );
    elseif option = 3 then      { transfer file with households assigned to interviewers }
      sendassign();
    elseif option = 5 then      { perform cluster segmentation }
      AppName = "Segmentation";
      Segmentation();
      runPFFS();
    elseif option = 6 then      { capture GPS coordinates }
      AppName = "CaptureGPS";
      CaptureGPS();
      runpffS();
    elseif option = 7 then      { receive households listed by interviewers to be used for sampling selection }
      receivesamp();
    elseif option in 7,8 then   { list/select households collected by interviewers to be used for sampling selection }
      concatsamp();             { first concatenate files }
      fname = SampData + "\L" + xcluster + ".dat";
      if FileExist(fname) & !FileEmpty(fname) then
        AppName = "SelectHH";
        if option = 7 then
          selecthh( 1 );        { report households listed }
        else
          selecthh( 2 );        { select households for sample }
        endif;
        RunPFFW();
      else
        errmsg( 0081, xcluster );
      endif
    endif;
  elseif action = 2 then        { get questionnaires from interviewer/biomarker }
    x = showarray( tr("Select fieldworker you want to get data from"), TeamShare, title(tr("Code"), tr("Name"), tr("Role")) );
	if x then
      xfilenum = xcluster + TeamShare(x,1);
	  intcode  = tonumber(TeamShare(x,1));
	  introle  = tonumber(TeamShare(x,3));
      { check if data was previously sent but with wrong interviewer number }
      found = ( FileExist( temp + "\H" + xfilenum + ".dat") |
                FileExist( temp + "\I" + xfilenum + ".dat") |
                FileExist( temp + "\B" + xfilenum + ".dat") );    // When Biomarkers collected in tablets
      if getquest( found ) then
        { check duplicates for individuals and biomarkers }
//      biodups = FindBIDups();                        enable when Biomarker specialist and data collected in tablets
        indups = 0;
        if anyfiles(2) then
          indups  = FindINDups();
        endif;		  
        if indups | biodups then
          if biodups then
            ChkBIDup();
            RunPFFW();
          endif;
          if indups then
            ChkINDup();
            RunPFFW();
          endif;
          reenter WFINAL;
        endif;
        if IntRole <> 3 then                                                         // if Biomarker specialist and data collected in tablets
          { next 'if' necessary because CHECKID iterates over the cluster's household file }
          if !FileExist( receive + "\H" + xfilenum + ".dat" ) |
             FileEmpty( receive  + "\H" + xfilenum + ".dat" ) then
            errmsg( 040 ); 
          else
            concatind();     { concatenate individual questionnaires from all interviewers }
            concatpari();    { concatenate individual partials from all interviewers }
            {{BIO}
            { add biomarker data to interviewer's household data file }              // When Biomarkers collected in tablets
            fname = work + "\T" + xfilenum + ".dat";
            FileDelete( fname );
            FileDelete( fname + ".csidx" );
            FileCopy( receive + "\H" + xfilenum + ".dat", fname );
            concatbio();
            fname = work + "\AllBio.dat";
            if FileExist(Fname) & !FileEmpty(fname) then
              AppName = "AddBiomarker";
              AddBiomarker( 1 );            RunPFFW();
            endif;
            {BIO}}
            AppName = "CheckID";
            CheckID( 1 );           // !!!! 1-biomarker in paper 4-Biomarker in CAPI
            close( fromckid );
            RunPFFW();
            open( fromckid );
          endif;
        {+BIO}
        else                                                                         // When Biomarkers collected in tablets
          { lists individuals eligible for biomarkers and status of biomarker data collection }
          concathh();
          fname = work + "\AllHH.dat";
          if !FileExist(Fname) | FileEmpty(fname) then
            errmsg( 115 );
          else
            concatbio();
            fname = work + "\AllBio.dat";
            if FileExist(Fname) & !FileEmpty(fname) then
              AppName = "ListEligBIO";
              ListEligBio();
              runpffW();
            endif;
          endif;
        endif;
        {BIO+}
      endif;
      { identify data files sent by other than the current interviewer }
      remainfile();
	endif;
  elseif action = 3 then       { list questionnaires from an interviewer }
    { check duplicates for individuals and biomarkers }
    x = showarray( tr("Select fieldworker you want to list questionnaires for"), TeamShare, title(tr("Code"), tr("Name"), tr("Role")) );
	if x then
      xfilenum = xcluster + TeamShare(x,1);
	  intcode  = tonumber(TeamShare(x,1));
	  introle  = tonumber(TeamShare(x,3));
//    biodups = FindBIDups();                             enable when Biomarker specialist and data collected in tablets
      indups = 0;
      if anyfiles(2) then
        indups  = FindINDups();
      endif;		
      if indups | biodups then
        if biodups then
          ChkBIDup();
          RunPFFW();
        endif;
        if indups then
          ChkINDup();
          RunPFFW();
        endif;
        reenter WFINAL;
      endif;
      if IntRole <> 3 then
        if files_hh( receive, xfilenum ) then
          concatind();     { concatenate individual questionnaires from all interviewers }
          concatpari();    { concatenate individual partials from all interviewers }
          {{BIO}
          { add biomarker data to interviewer's household data file }              // When Biomarkers collected in tablets
          fname = work + "\T" + xfilenum + ".dat";
          FileDelete( fname );
          FileDelete( fname + ".csidx" );
          FileCopy( receive + "\H" + xfilenum + ".dat", fname );
          concatbio();
          fname = work + "\AllBio.dat";
          if FileExist(fname) & !FileEmpty(fname) then
            AppName = "AddBiomarker";
            AddBiomarker( 1 );
            RunPFFW();
          endif;
          {BIO}}
          AppName = "CheckID";
          CheckID( 1 );           // !!!! 1-biomarker in paper 4-Biomarker in CAPI
          close( fromckid );
          RunPFFW();
          open( fromckid );
        else
          errmsg( 118 );
        endif;
      {+BIO}
      else
        { lists individuals eligible for biomarkers and status of biomarker data collection }
        concathh();
        fname = work + "\AllHH.dat";
        if !FileExist(Fname) | FileEmpty(fname) then
          errmsg( 120 );
        else
          concatbio();
          fname = work + "\AllBio.dat";
          if FileExist(Fname) & !FileEmpty(fname) then
            close( ELIGINDV );
            AppName = "ListEligBIO";
            ListEligBio();
            runpffW();
          endif;
        endif;
      {BIO+}
      endif;
	endif;
  { Review household questionnaire or individual questionnaire }
  elseif action = 4 then
    hhind = accept( tr("Do you want to review Household/Individual questionnaires?"), 
	                tr("Households"), tr("Individuals") );
    if !AnyFiles(1) then            { check if hh files have been transferred to supervisor }
      errmsg( 080, xcluster );
	  reenter;
    endif;
    hhdups  = FindHHDups();
    if hhdups then
      ChkHHDup();
      RunPFFW();
      reenter;
    endif;
    if hhind = 2 then
      if !AnyFiles(2) then            { check if individual files have been transferred to supervisor }
        errmsg( 080, xcluster );
	    reenter;
      endif;
      indups  = FindINDups();
      if indups then
        ChkINDup();
        RunPFFW();
        reenter;
      endif;
	endif;
    { get a household }
    if getonehh() then
      advance to WCORRECT;
    else
      reenter
    endif;
  elseif action = 5 then       { do nothing }
    reenter;
  elseif action = 6 then       { close a cluster }
    if AnyFiles(1) then         { check if hh files has been transferred to supervisor }
      { check for duplicated households, individuals and biomarkers }
      hhdups  = FindHHDups();
	  indups = 0;
	  if AnyFiles(2) then
        indups  = FindINDups();
      endif;	
	  biodups = 0;
	  if AnyFiles(3) then
        biodups = FindBIDups();    // when Biomarker specialist collectes data in tablets
	  endif;
      if hhdups | indups | biodups then
        if hhdups then
          ChkHHDup();
          RunPFFW();
        endif;
        if indups then
          ChkINDup();
          RunPFFW();
        endif;
        if biodups then
          ChkBIDup();
          RunPFFW();
        endif;
        reenter WFINAL;
      endif;
      collapse();
      {+BIO}
      { add biomarker data to cluster household data file }              // When Biomarkers collected in tablets
      fname = temp + "\B" + xcluster + ".dat";
      if FileExist(fname) & !FileEmpty(fname) then
        AppName = "AddBiomarker";
        AddBiomarker( 2 );
        RunPFFW();
      endif;
      {BIO+}
      AppName = "CheckID";
      CheckID( 2 );
      close( fromckid );
      RunPFFW();
      open( fromckid );
      FileRead( fromckid, chkfile );
      if pos( "WITH", chkfile ) then
        errmsg( 060 );
      else
        SortHH();                                                              
        alldata();
        backupf();
		errmsg( 105 );
        SendData();
      endif;
    else
      errmsg( 080, xcluster );
    endif;
  elseif action = 7 then        { create file to transfer to central office }
    SendData();
  elseif action = 8 then        { list cluster notes }
    if AnyFiles(1) then          { check if hh files has been transferred to supervisor }
      concatnotes();
      AppName = "ListNotes";
      ListNotes();
      runpffW();
    else
      errmsg( 080, xcluster );
    endif;
  elseif action = 9 then       { send upgrades to interviewer's machine }
    sendupgr();
  elseif action in 10 then       { enter transmittal sheet }
    x = accept( tr("Do you want to register transmittal sheets for HIV or Malaria?"),
                tr("HIV"), tr("Malaria") );
    if x in 1:2 then
      AppName = "Tentry";
      tentry( x );
      RunPFFS();
    endif;
  elseif action = 11 then       { options available for height & weight remeasurment }
    if getlanguage() = "EN" then
      option = accept( heading,
               { 1}  "1 Select children for remeasurement",
               { 2}  "2 Enter remeasurements",
               { 3}  "3 List children selected for remeasurement",
               { 4}  "4 Send remeasurement to health specialist",
               { 5}  "5 Receive remeasurement from health specialist",
               { 6}  "9 Return to main menu" );
    elseif getlanguage() = "ES" then
      option = accept( heading,
               { 1}  "1 Seleccionar niños para remedicion",
               { 2}  "2 Ingresar remedicion",
               { 3}  "3 Listar niños selecionados para remedicion",
               { 4}  "4 Enviar remediciones a especialista de salud",
               { 5}  "5 Recibir remediciones de especialista de salud",
               { 4}  "9 Regresar al menu principal" );
    elseif getlanguage() = "FR" then
      option = accept( heading,
               { 1}  "1 Sélectionner les enfants pour la remesure",
               { 2}  "2 Saisir la remesure",
               { 3}  "3 Lister les enfants sélectionnées pour la remesure",
               { 4}  "4 Envoyer la double mesure au Technicien de la santé",
               { 5}  "5 Recevoir la double mesure du Technicien de la santé",
               { 6}  "9 Retourner au menu principal" );
    endif;
	{ select children for remeasurement }
	if option = 1 then
      { check for duplicated households }
      hhdups  = FindHHDups();
      indups = 0;
      if anyfiles(2) then
        indups  = FindINDups();
      endif;		
      if hhdups | indups then
	    if hhdups then
          ChkHHDup();
          RunPFFW();
		endif;
        if indups then
          ChkINDup();
          RunPFFW();
        endif;
        reenter WFINAL;
      endif;
      collapse();
      {{BIO}
      { add biomarker data to cluster household data file }              // When Biomarkers collected in tablets
      fname = temp + "\B" + xcluster + ".dat";
      if FileExist(fname) & !FileEmpty(fname) then
        AppName = "AddBiomarker";
        AddBiomarker( 2 );
        RunPFFW();
      endif;
      {BIO}}
      AppName = "RemeasSel";
      RemeasSel();
      RunPFFW();
	{ enter remeasurement data from paper questionnaires }
	elseif option = 2 then
	  fname = temp + "\R" + xcluster + ".dat";
	  if FileExist( fname ) & !FileEmpty( fname ) then
        setfile(RMEASURE, fname);
		do i = 1 while loadcase(RMEASURE) 
		  Remeasurement(i,1) = edit("9999",RNUMBER);
		  Remeasurement(i,2) = edit("99",R102L);
		  Remeasurement(i,3) = R102N;
		  Remeasurement(i,4) = RADDRESS;
        enddo;		  
        close( RMEASURE );
        x = showarray( tr("Select the child for whom remeasurement data will be entered"), Remeasurement, 
		    title(tr("Household"), tr("Child Number"), tr("Child Name"), tr("Address")) );
        if x then	
          xremeas = xcluster + Remeasurement(x,1) + Remeasurement(x,2);		
          AppName = "RemeasEntry";
          RemeasEntry( 0 );             // 1-Biomarker in CAPI, 0-Biomarker on paper
          RunPFFS();
        else
		  errmsg( 130 );
        endif;		
      else
	    errmsg( 110, fname );
      endif;
    { list children eligible for remeasurement }
	elseif option = 3 then
	  fname = temp + "\R" + xcluster + ".dat";
	  if FileExist( fname ) & !FileEmpty( fname ) then
        AppName = "RemeasLst";
        RemeasLst();
        RunPFFW();
      else
	    errmsg( 110, fname );
	  endif;
    { send children selected for remeasurement to health specialist }
	elseif option = 4 then
	  fname = temp + "\R" + xcluster + ".dat";
	  if FileExist( fname ) & !FileEmpty( fname ) then
        SendRemeas();
      else
	    errmsg( 110, fname );
	  endif;
	{ receive remeasurement data from health specialist }
	elseif option = 5 then
      ReceiveRemeas();
	  fname = temp + "\R" + xcluster + ".dat";
	  if FileExist( fname ) & !FileEmpty( fname ) then
        AppName = "RemeasLst";
        RemeasLst();
        RunPFFW();
      else
	    errmsg( 110, fname );
	  endif;
	  
    endif;
  elseif action = 12 then      { change cluster number }
    reenter WCLUSTER
  else
    skip to WNUMBER;
  endif;
  reenter WFINAL;

PROC WADDRESS
preproc
  if length(strip(ZNAME)) then
    if length(strip(ZADDRESS)) then
      $ = concat( strip(ZNAME), " - ", strip(ZADDRESS) );
    else
      $ = ZNAME;
    endif;
  elseif length(strip(ZADDRESS)) then
    $ = ZADDRESS;
  else
    $ = "";
  endif;

PROC WCORRECT
preproc
  $ = 1;

postproc
  if $ <> 1 then
    reenter WFINAL;
  endif;
  if hhind = 1 then
    xcase  = edit("9999", WCLUSTER) + edit("9999",WNUMBER);
    xparamet = xparaux + edit("9999",WNUMBER);
    AppName = "CollectHH";
    { review households including incomplete }
    if ZRESULT <> 1 then
      errmsg( 0011, ZRESULT );
    endif;
    { modify, hh, partial, revisit, change, height/weight }
    csrun( 0, 1, 0, 0, 1, 0 );
    reenter WFINAL;

  elseif hhind = 2 then
    if ZRESULT <> 1 then
      errmsg( 067, ZRESULT );
      reenter WFINAL
    else
      skip to WINDIV
    endif;
  else
    reenter WFINAL;
  endif;

PROC WINDIV
preproc
  { get an individual from the household file }
  if getonewm() then
    advance to WCORRECT2;
  else
    errmsg( 020 );
    reenter WFINAL;
  endif;

PROC WCORRECT2
preproc
  $ = 1;

postproc
  if $ <> 1 then
    reenter WFINAL;
  endif;
  xparamet = xparaux + edit("9999",WNUMBER) + edit("99",WINDIV);
  xcase    = edit("9999",WCLUSTER) + edit("9999",WNUMBER) + edit("99",WINDIV);
  AppName  = "CollectIN";

  if ZRESULT = notappl then         { woman hasn't been visited yet }
    errmsg( 068 );
    reenter WFINAL;
  elseif ZRESULT <> 1 then          { result incomplete }
    errmsg( 055, ZRESULT );
  endif;
 { modify, women, partial, revisit, change, height/weight }
  csrun( 0, zquest, 0, 0, 1, 0 );
  reenter WFINAL;

